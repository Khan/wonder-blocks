"use strict";(self.webpackChunkwonder_blocks=self.webpackChunkwonder_blocks||[]).push([[7942],{"./__docs__/wonder-blocks-data/exports.data.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-data/dist/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",code:"code",h4:"h4",h5:"h5",h6:"h6",pre:"pre"},(0,_storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.h_,{title:"Data / Exports / Data",component:_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__.Vw,parameters:{chromatic:{disableSnapshot:!0}}}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h1,{id:"data",children:"Data"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," component is the frontend piece of our data architecture.\nIt describes a data requirement in terms of a handler and an identifier.\nIt also has props to govern hydrate behavior as well as loading and client-side\nrequest behavior."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"The handler is responsible for fulfilling the request when asked to do so."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h4,{id:"server-side-rendering-and-hydration",children:"Server-side Rendering and Hydration"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"The Wonder Blocks Data framework uses an in-memory cache for supporting\nserver-side rendering (SSR) and hydration."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h5,{id:"server-side-behavior",children:"Server-side behavior"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h6,{id:"cache-miss",children:"Cache miss"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["When the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," component does not get data or an error from the cache and it\nis rendering server-side, it tells our request tracking that it wants data, and\nit renders in its ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"loading"})," state. It will always render in this state if there\nis no cached response."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h6,{id:"cache-hit",children:"Cache hit"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["When the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," component gets data or an error from the cache and it is\nrendering server-side, it will render as loaded, with that data or error,\nas it would client-side. In this situation, it does not track the request it\nwould have made, as it already has the data and doesn't need to."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h5,{id:"client-side-behavior",children:"Client-side behavior"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h6,{id:"cache-miss-1",children:"Cache miss"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"When the hydration cache does not contain the data, the data will be requested.\nWhile the request is pending, the data is rendered in the loading state.\nIn this example, we use a 3 second delayed promise to simulate the request.\nWe start out without any data and so the request is made. Upon receipt of that\ndata or an error, we re-render."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{className:"language-jsx",children:'import {Body, BodyMonospace} from "@khanacademy/wonder-blocks-typography";\nimport {View} from "@khanacademy/wonder-blocks-core";\nimport {Data} from "@khanacademy/wonder-blocks-data";\nimport {Strut} from "@khanacademy/wonder-blocks-layout";\nimport Color from "@khanacademy/wonder-blocks-color";\nimport Spacing from "@khanacademy/wonder-blocks-spacing";\n\nconst myValidHandler = () =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => resolve("I\'m DATA from a request"), 3000),\n    );\n\nconst myInvalidHandler = () =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => reject("I\'m an ERROR from a request"), 3000),\n    );\n\n<View>\n    <View>\n        <Body>This request will succeed and give us data!</Body>\n        <Data handler={myValidHandler} requestId="VALID">\n            {(result) => {\n                if (result.status === "loading") {\n                    return "Loading...";\n                }\n\n                return <BodyMonospace>{result.data}</BodyMonospace>;\n            }}\n        </Data>\n    </View>\n    <Strut size={Spacing.small_12} />\n    <View>\n        <Body>This request will go boom and give us an error!</Body>\n        <Data handler={myInvalidHandler} requestId="INVALID">\n            {(result) => {\n                if (result.status === "loading") {\n                    return "Loading...";\n                }\n\n                return (\n                    <BodyMonospace style={{color: Color.red}}>\n                        ERROR: {result.error}\n                    </BodyMonospace>\n                );\n            }}\n        </Data>\n    </View>\n</View>;\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h6,{id:"cache-hit-1",children:"Cache hit"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["If the hydration cache already contains data or an error for our request, then\nthe ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," component will render it immediately. The hydration cache is\npopulated using the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"initializeHydrationCache"})," method before rendering."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{className:"language-jsx",children:'import {Body, BodyMonospace} from "@khanacademy/wonder-blocks-typography";\nimport {View} from "@khanacademy/wonder-blocks-core";\nimport {Data, initializeHydrationCache} from "@khanacademy/wonder-blocks-data";\nimport {Strut} from "@khanacademy/wonder-blocks-layout";\nimport Color from "@khanacademy/wonder-blocks-color";\nimport Spacing from "@khanacademy/wonder-blocks-spacing";\n\nconst myHandler = () => {\n    throw new Error(\n        "If you\'re seeing this error, the examples are broken and data isn\'t in the cache that should be.",\n    );\n};\n\ninitializeHydrationCache({\n    DATA: {\n        data: "I\'m DATA from the hydration cache",\n    },\n});\n\n<View>\n    <View>\n        <Body>This cache has data!</Body>\n        <Data handler={myHandler} requestId="DATA">\n            {(result) => {\n                if (result.status !== "success") {\n                    return "If you see this, the example is broken!";\n                }\n\n                return <BodyMonospace>{result.data}</BodyMonospace>;\n            }}\n        </Data>\n    </View>\n</View>;\n'})})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Data / Exports / Data",parameters:{chromatic:{disableSnapshot:!0}},component:_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__.Vw,tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const __WEBPACK_DEFAULT_EXPORT__=componentMeta}}]);