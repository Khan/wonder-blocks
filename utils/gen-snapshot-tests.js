/**
 * This script generates generated-snapshot.test.js files from examples in
 * docs.md files in every packages/wonder-blocks-* directory.
 *
 * Running `yarn test` will run this script and then run jest which will run
 * the tests in all of the generated-snapshot.test.js files.
 *
 * TODO(kevinb):
 * - run prettier on the output
 * - extract into a separate repo and publish an npm package
 */
const fs = require("fs");
const path = require("path");
const marked = require("marked");
const babylon = require("babylon");

const {
    getComponentFilesFromSection,
} = require("./styleguidist-config-utils.js");

const styleguideConfig = require("../styleguide.config.js");

/**
 * Generate a test file with the given examples.
 *
 * For a given root package, this generates a single JS test file
 * with each example as a snapshot test. The componentFileMap provides
 * a map between a component name and its file location so that we can
 * insert the necessary requires for components within the root package.
 */
function generateTestFile(root, examples, componentFileMap) {
    const lines = [
        "// This file is auto-generated by gen-snapshot-tests.js",
        "// Do not edit this file.  To make changes to these snapshot tests:",
        `//   1. edit the markdown documentation files in the package,`,
        `//        ${root}`,
        "//   2. Run `yarn run gen-snapshot-tests`.",
        `import React from "react";`,
        `import renderer from "react-test-renderer";`,
        ``,
        `// Mock react-dom as jest doesn't like findDOMNode.`,
        `jest.mock("react-dom");`,
    ];

    const modName = root.split("/")[1];

    if (componentFileMap) {
        for (const [componentName, filename] of Object.entries(
            componentFileMap,
        )) {
            const relFilename = path.relative(root, filename);
            lines.push(`import ${componentName} from "./${relFilename}";`);
        }
    }

    lines.push("");
    lines.push(`describe("${modName}", () => {`);

    examples.forEach((example, exampleIndex) => {
        lines.push(`    it("example ${exampleIndex + 1}", () => {`);

        const ast = babylon.parse(example, {
            plugins: ["jsx", "flow"],
        });

        const lastStatement = ast.program.body[ast.program.body.length - 1];

        if (lastStatement.type !== "ExpressionStatement") {
            throw new Error("last line should be an expression");
        }

        if (lastStatement.expression.type !== "JSXElement") {
            throw new Error("last line should be a JSX Element");
        }

        lines.push(
            ...example
                .split("\n")
                .map((line, index) =>
                    index + 1 === lastStatement.loc.start.line
                        ? `        const example = ${line}`
                        : `        ${line}`,
                ),
        );

        lines.push("        const tree = renderer.create(example).toJSON();");
        lines.push("        expect(tree).toMatchSnapshot();");

        lines.push(`    });`);
    });

    lines.push("});\n");

    const data = lines.join("\n");

    const outPath = path.join(root, "generated-snapshot.test.js");
    fs.writeFileSync(outPath, data, "utf8");
    // eslint-disable-next-line no-console
    console.log(`wrote ${outPath}`);
}

/**
 * Read examples from markdown document.
 *
 * @param {string} documentPath The path to the markdown file from which
 * examples are to be loaded.
 *
 * @returns {Array<string>} An array of the code examples from the file. This is
 * empty if the file does not exist.
 */
function readExamplesFromDocument(documentPath) {
    if (!fs.existsSync(documentPath)) {
        return [];
    }
    const content = fs.readFileSync(documentPath, "utf8");
    const tokens = marked.lexer(content);
    const examples = tokens
        .filter((token) => token.type === "code")
        .map((token) => token.text);

    return examples;
}

/**
 * Extract examples and map components to files for a given source file.
 *
 * @param {string} sourceFile The path to the source file to be processed.
 * @param {[string]: string} componentFileMap A map from component name to its
 * source file path.
 */
function extractExamplesAndComponentsForFile(sourceFile, componentFileMap) {
    // This might be the very first time the map is used, so make sure it is
    // initialized.
    componentFileMap = componentFileMap || {};

    const src = fs.readFileSync(sourceFile, "utf8");
    const match =
        src.match(/export default class \s*(\w+)/) ||
        src.match(/export default \s*\w+\(\s*(\w+)/);

    // Guard against files without default exports.
    if (!match) {
        return {examples: [], componentFileMap};
    }

    const alreadyCollated = componentFileMap[match[1]] === sourceFile;
    if (!alreadyCollated) {
        // Only gather examples for this component file if
        // we didn't see it already.
        componentFileMap[match[1]] = sourceFile;

        const componentDoc =
            path.join(
                path.dirname(sourceFile),
                path.basename(sourceFile, path.extname(sourceFile)),
            ) + ".md";

        const examples = readExamplesFromDocument(componentDoc);
        return {examples, componentFileMap};
    }

    // Nothing to load. So let's just return this.
    return {examples: [], componentFileMap};
}

/**
 * Extract examples and map components to their source files for a given
 * section in the styleguidist configuration.
 */
function extractExamplesAndComponentFiles(section, componentFileMap) {
    // Add any examples from the section content.
    let examples = readExamplesFromDocument(section.content);

    // Then process any component files and add their stuff too.
    const files = getComponentFilesFromSection(section);
    for (const file of files) {
        const extracted = extractExamplesAndComponentsForFile(
            file,
            componentFileMap,
        );
        examples = examples.concat(extracted.examples);
        componentFileMap = extracted.componentFileMap;
    }

    if (section.sections) {
        // Repeat all this for each sub-section.
        for (const childSection of section.sections) {
            const extracted = extractExamplesAndComponentFiles(
                childSection,
                componentFileMap,
            );
            examples = examples.concat(extracted.examples);
            componentFileMap = extracted.componentFileMap;
        }
    }

    return {examples, componentFileMap};
}

/**
 * Extract examples for a given styleguidist configuration root section and
 * output a jest snapshot test file for each example in the section.
 *
 * This will handle recursing into sub-sections and dealing with
 * component-specific documentation.
 */
function tryGenerateSectionTests(section) {
    // If there is no content nor sections, then we should quit.
    if (!section.content && !section.sections) {
        // eslint-disable-next-line no-console
        console.warn("no content or sub-sections for section: ");
        // eslint-disable-next-line no-console
        console.warn(JSON.stringify(section));
        return;
    }

    // Now, let's collate all our examples and the components for the section
    // they're in.
    const {examples, componentFileMap} = extractExamplesAndComponentFiles(
        section,
    );

    if (examples.length === 0) {
        // eslint-disable-next-line no-console
        console.warn(`no examples for section ${section.name}`);
        return;
    }

    const root = path.dirname(section.content);
    generateTestFile(root, examples, componentFileMap);
}

// This is where the magic begins.
// We iterate over the root sections of the styleguidist configuration
// and generate a tests for each one.
for (const section of styleguideConfig.sections) {
    tryGenerateSectionTests(section);
}
