/**
 * This script generates generated-snapshot.test.js files from examples in
 * docs.md files in every packages/wonder-blocks-* directory.
 *
 * Running `npm test` will run this script and then run jest which will run
 * the tests in all of the generated-snapshot.test.js files.
 *
 * TODO(kevinb):
 * - run prettier on the output
 * - extract into a separate repo and publish an npm package
 * - handle more cases, e.g. top level "components" within styleguide.config.js
 */
const marked = require("marked");
const fs = require("fs");
const path = require("path");
const unescape = require("unescape");
const glob = require("glob");
const babel = require("babel-core");
const babylon = require("babylon");

const styleguideConfig = require("../styleguide.config.js");

function generateTestFile(root, examples, componentFileMap) {
    const lines = [
        "// This file is auto-generated by gen-snapshot-tests.js",
        "// Do not edit this file.  To make changes to these snapshot tests",
        `// edit ${root}/docs.md and run \`npm run gen-snapshot-tests\`.`,
        `import React from "react";`,
        `import renderer from "react-test-renderer";`,
    ];

    const modName = root.split("/")[1];

    if (componentFileMap) {
        for (const [componentName, filename] of Object.entries(
            componentFileMap,
        )) {
            const relFilename = path.relative(root, filename);
            lines.push(`import ${componentName} from "./${relFilename}";`);
        }
    }

    lines.push("");
    lines.push(`describe("${modName}", () => {`);

    examples.forEach((example, exampleIndex) => {
        lines.push(`    it("example ${exampleIndex + 1}", () => {`);

        const ast = babylon.parse(example, {
            plugins: ["jsx", "flow"],
        });

        const lastStatement = ast.program.body[ast.program.body.length - 1];

        if (lastStatement.type !== "ExpressionStatement") {
            throw new Error("last line should be an expression");
        }

        if (lastStatement.expression.type !== "JSXElement") {
            throw new Error("last line should be a JSX Element");
        }

        lines.push(
            ...example
                .split("\n")
                .map(
                    (line, index) =>
                        index + 1 === lastStatement.loc.start.line
                            ? `        const example = ${line}`
                            : `        ${line}`,
                ),
        );

        lines.push("        const tree = renderer.create(example).toJSON();");
        lines.push("        expect(tree).toMatchSnapshot();");

        lines.push(`    });`);
    });

    lines.push("});\n");

    const data = lines.join("\n");

    const outPath = path.join(root, "generated-snapshot.test.js");
    fs.writeFileSync(outPath, data, "utf8");
    console.log(`wrote ${outPath}`);
}

for (const section of styleguideConfig.sections) {
    const content = fs.readFileSync(section.content, "utf8");
    const tokens = marked.lexer(content);
    const examples = tokens
        .filter((token) => token.type === "code")
        .map((token) => token.text);

    if (section.content) {
        const root = path.dirname(section.content);

        if (section.components) {
            glob(section.components, {}, (err, files) => {
                const componentFileMap = {};
                for (const file of files) {
                    const src = fs.readFileSync(file, "utf8");
                    const match = src.match(/export default class ([^ ]+)/);
                    if (match) {
                        componentFileMap[match[1]] = file;
                    }
                }

                generateTestFile(root, examples, componentFileMap);
            });
        } else {
            generateTestFile(root, examples);
        }
    } else {
        console.warn("no content for section: ");
        console.warn(JSON.stringify(section));
    }
}
