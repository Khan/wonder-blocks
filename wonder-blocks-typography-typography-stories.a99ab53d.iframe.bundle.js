"use strict";(self.webpackChunkwonder_blocks=self.webpackChunkwonder_blocks||[]).push([[8736],{"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}__webpack_require__.d(__webpack_exports__,{Z:()=>_assertThisInitialized})},"./.storybook/components/component-info.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-button/dist/es/index.js"),_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/wonder-blocks-typography/dist/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const githubIconAsset={small:"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z"},ComponentInfo=({name,version})=>{var _name$split;const packageFolder=null==(_name$split=name.split("/"))?void 0:_name$split[1];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__.G7,{style:{justifyContent:"flex-end",alignItems:"center",flexDirection:"row",gap:10},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__.YS,{children:[name,"@",version]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__.Z,{kind:"secondary",href:`https://github.com/Khan/wonder-blocks/tree/main/packages/${packageFolder}`,target:"_blank",style:{color:"black"},icon:githubIconAsset,children:"Source code"})]})};ComponentInfo.displayName="ComponentInfo";const __WEBPACK_DEFAULT_EXPORT__=ComponentInfo;try{componentinfo.displayName="componentinfo",componentinfo.__docgenInfo={description:"An internal component that displays the package name and version. It also\nincludes a link to the Github repo.",displayName:"componentinfo",props:{name:{defaultValue:null,description:"The package name.",name:"name",required:!0,type:{name:"string"}},version:{defaultValue:null,description:"The latest stable version.",name:"version",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/components/component-info.tsx#componentinfo"]={docgenInfo:componentinfo.__docgenInfo,name:"componentinfo",path:".storybook/components/component-info.tsx#componentinfo"})}catch(__react_docgen_typescript_loader_error){}},"./__docs__/wonder-blocks-typography/typography.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CodeFont:()=>CodeFont,ControlProps:()=>ControlProps,LatoForLatin:()=>LatoForLatin,LatoForLatinExtended:()=>LatoForLatinExtended,LineHeight:()=>LineHeight,NotoForNonLatin:()=>NotoForNonLatin,Paragraph:()=>Paragraph,TypographyElements:()=>TypographyElements,WithStyle:()=>WithStyle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>typography_stories});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/aphrodite/lib/index.js"),es=__webpack_require__("./packages/wonder-blocks-color/dist/es/index.js"),dist_es=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),wonder_blocks_dropdown_dist_es=__webpack_require__("./packages/wonder-blocks-dropdown/dist/es/index.js"),wonder_blocks_spacing_dist_es=__webpack_require__("./packages/wonder-blocks-spacing/dist/es/index.js"),wonder_blocks_typography_dist_es=__webpack_require__("./packages/wonder-blocks-typography/dist/es/index.js");const package_namespaceObject=JSON.parse('{"u2":"@khanacademy/wonder-blocks-typography","i8":"2.0.13"}');var component_info=__webpack_require__("./.storybook/components/component-info.tsx");var _ControlProps$paramet,_ControlProps$paramet2,_ControlProps$paramet3,_TypographyElements$p,_TypographyElements$p2,_TypographyElements$p3,_WithStyle$parameters,_WithStyle$parameters2,_WithStyle$parameters3,_LatoForLatin$paramet,_LatoForLatin$paramet2,_LatoForLatin$paramet3,_LatoForLatinExtended,_LatoForLatinExtended2,_LatoForLatinExtended3,_NotoForNonLatin$para,_NotoForNonLatin$para2,_NotoForNonLatin$para3,_CodeFont$parameters,_CodeFont$parameters2,_CodeFont$parameters3,_Paragraph$parameters,_Paragraph$parameters2,_Paragraph$parameters3,_LineHeight$parameter,_LineHeight$parameter2,_LineHeight$parameter3,jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const typography_stories={title:"Typography",parameters:{componentSubtitle:(0,jsx_runtime.jsx)(component_info.Z,{name:package_namespaceObject.u2,version:package_namespaceObject.i8}),docs:{description:{component:'Typography. `wonder-blocks-typography`\nprovides a set of standardized components for displaying text in a consistent\nway. This includes components for headings, paragraphs, and text\nlabels.\n\n\n ### Usage\n\n```jsx\nimport {Body, Title} from "@khanacademy/wonder-blocks-typography";\n\n<Title>Title: Hello, world!</Title>\n<Body>This is just a regular paragraph</Body>\n```\n'},source:{excludeDecorators:!0}}},argTypes:{children:{control:{type:"text"},description:"Text to appear with the specified typography styles.",table:{type:{summary:"React.Node"}},type:{required:!1}},style:{control:{type:"object"},description:"Optional custom styles.",table:{type:{summary:"StyleType"}},type:{required:!1}},testId:{control:{type:"text"},description:"Test ID used for e2e testing.",table:{type:{summary:"string"}},type:{required:!1}},id:{control:{type:"text"},description:"Unique identifier.",table:{type:{summary:"string"}},type:{required:!1}}}},ControlProps={render:args=>(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,(0,esm_extends.Z)({},args)),args:{children:"This is a Title typography element",id:"example-title"}},TypographyElements=()=>(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{children:"Title"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Ih,{children:"HeadingLarge"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.TE,{children:"HeadingMedium"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Jf,{children:"HeadingSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.fH,{children:"HeadingXSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.C$,{children:"BodySerifBlock"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.DR,{children:"BodySerif"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{children:"BodyMonospace"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{children:"Body"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{children:"LabelLarge"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Uc,{children:"LabelMedium"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.S$,{children:"LabelSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.UU,{children:"LabelXSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.B7,{children:"Tagline"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.YS,{children:"Caption"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.wF,{children:"Footnote"})]});TypographyElements.displayName="TypographyElements",TypographyElements.parameters={docs:{description:{story:"These are all the available typography elements\n            with their names written out in their respective styles."}}};const WithStyle=()=>{const styles=lib.StyleSheet.create({blueText:{color:es.default.blue}});return(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{style:styles.blueText,children:"Blue Title"})};WithStyle.displayName="WithStyle",WithStyle.parameters={docs:{description:{story:"You can change the color of text with the `style` prop."}}};const LatoForLatin=()=>(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Ih,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.TE,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Jf,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.fH,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.C$,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.DR,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Uc,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.S$,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.UU,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.B7,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.YS,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.wF,{children:"Для каждого ученика, независимо от возраста. Реальные результаты!"})]});LatoForLatin.displayName="LatoForLatin",LatoForLatin.parameters={docs:{description:{story:"Lato is used for Latin and Cyrillic languages.\n            This is a example where we use Lato for Russian."}}};const LatoForLatinExtended=()=>(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Ih,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.TE,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Jf,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.fH,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.C$,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.DR,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Uc,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.S$,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.UU,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.B7,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.YS,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.wF,{children:"Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế."})]});LatoForLatinExtended.displayName="LatoForLatinExtended",LatoForLatinExtended.parameters={docs:{description:{story:"This is another example where we use Lato\n            latin for Vietnamese. In this specific case, we also use\n            the extended glyphs so we can add full support to Vietnamese\n            using this font."}}};const NotoForNonLatin=()=>{const languages={Arabic:{text:"مرحبا",dir:"rtl"},Armenian:{text:"Բարեւ"},Greek:{text:"γεια σας"},Hebrew:{text:"שלום",dir:"rtl"}},[selectedValue,updateValue]=react.useState("Arabic"),{text,dir}=languages[selectedValue];return(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_dropdown_dist_es.q4,{"aria-labelledby":"language-selector",id:"unique-language-selector",placeholder:"Select language",onChange:selectedValue=>updateValue(selectedValue),selectedValue,children:Object.keys(languages).map(((item,key)=>(0,jsx_runtime.jsx)(wonder_blocks_dropdown_dist_es.BA,{label:item,value:item},key)))}),(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Ih,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.TE,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Jf,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.fH,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.C$,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.DR,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Uc,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.S$,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.UU,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.B7,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.YS,{dir,children:text}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.wF,{dir,children:text})]})]})};NotoForNonLatin.displayName="NotoForNonLatin",NotoForNonLatin.parameters={docs:{description:{story:"The Noto font is used for non-Latin languages."}}};const CodeFont=()=>{const Code=({children})=>(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{children});return(0,jsx_runtime.jsx)(Code,{children:'const str = "Hello, world!"'})};CodeFont.displayName="CodeFont",CodeFont.parameters={docs:{description:{story:"One example of using the `BodyMonospace`\n            typography component is to create a `Code` component for\n            rendering pre-formatted code blocks."}}};const Paragraph=()=>(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{children:"This is an example of a long paragraph.\n        Khan Academy offers practice exercises, instructional videos,\n        and a personalized learning dashboard that empower learners\n        to study at their own pace in and outside of the classroom.\n        We tackle math, science, computing, history, art history, economics,\n        and more, including K-14 and test preparation (SAT, Praxis, LSAT)\n        content. We focus on skill mastery to help learners establish\n        strong foundations, so there's no limit to what they can learn next!"});Paragraph.displayName="Paragraph",Paragraph.parameters={docs:{description:{story:"The `Body` typography component is usually used\n            for paragraphs and other body text."}}};const LineHeight=()=>{const style={outline:`1px solid ${es.default.offBlack}`,marginBottom:wonder_blocks_spacing_dist_es.Z.small_12};return(0,jsx_runtime.jsxs)(dist_es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Dx,{style,children:"Title"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Ih,{style,children:"HeadingLarge"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.TE,{style,children:"HeadingMedium"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Jf,{style,children:"HeadingSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.fH,{style,children:"HeadingXSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.C$,{style,children:"BodySerifBlock"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.DR,{style,children:"BodySerif"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Rr,{style,children:"BodyMonospace"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.uT,{style,children:"Body"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{style,children:"LabelLarge"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.Uc,{style,children:"LabelMedium"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.S$,{style,children:"LabelSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.UU,{style,children:"LabelXSmall"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.B7,{style,children:"Tagline"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.YS,{style,children:"Caption"}),(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.wF,{style,children:"Footnote"})]})};LineHeight.displayName="LineHeight",LineHeight.parameters={docs:{description:{story:"This is a visualization of the line height\n            for each typography element."}}},ControlProps.parameters=(0,esm_extends.Z)({},ControlProps.parameters,{docs:(0,esm_extends.Z)({},null==(_ControlProps$paramet=ControlProps.parameters)?void 0:_ControlProps$paramet.docs,{source:(0,esm_extends.Z)({originalSource:'{\n  render: args => <Title {...args} />,\n  args: {\n    children: "This is a Title typography element",\n    id: "example-title"\n  }\n}'},null==(_ControlProps$paramet2=ControlProps.parameters)||null==(_ControlProps$paramet3=_ControlProps$paramet2.docs)?void 0:_ControlProps$paramet3.source)})}),TypographyElements.parameters=(0,esm_extends.Z)({},TypographyElements.parameters,{docs:(0,esm_extends.Z)({},null==(_TypographyElements$p=TypographyElements.parameters)?void 0:_TypographyElements$p.docs,{source:(0,esm_extends.Z)({originalSource:"() => <View>\n        <Title>Title</Title>\n        <HeadingLarge>HeadingLarge</HeadingLarge>\n        <HeadingMedium>HeadingMedium</HeadingMedium>\n        <HeadingSmall>HeadingSmall</HeadingSmall>\n        <HeadingXSmall>HeadingXSmall</HeadingXSmall>\n        <BodySerifBlock>BodySerifBlock</BodySerifBlock>\n        <BodySerif>BodySerif</BodySerif>\n        <BodyMonospace>BodyMonospace</BodyMonospace>\n        <Body>Body</Body>\n        <LabelLarge>LabelLarge</LabelLarge>\n        <LabelMedium>LabelMedium</LabelMedium>\n        <LabelSmall>LabelSmall</LabelSmall>\n        <LabelXSmall>LabelXSmall</LabelXSmall>\n        <Tagline>Tagline</Tagline>\n        <Caption>Caption</Caption>\n        <Footnote>Footnote</Footnote>\n    </View>"},null==(_TypographyElements$p2=TypographyElements.parameters)||null==(_TypographyElements$p3=_TypographyElements$p2.docs)?void 0:_TypographyElements$p3.source)})}),WithStyle.parameters=(0,esm_extends.Z)({},WithStyle.parameters,{docs:(0,esm_extends.Z)({},null==(_WithStyle$parameters=WithStyle.parameters)?void 0:_WithStyle$parameters.docs,{source:(0,esm_extends.Z)({originalSource:"() => {\n  const styles = StyleSheet.create({\n    blueText: {\n      color: Color.blue\n    }\n  });\n  return <Title style={styles.blueText}>Blue Title</Title>;\n}"},null==(_WithStyle$parameters2=WithStyle.parameters)||null==(_WithStyle$parameters3=_WithStyle$parameters2.docs)?void 0:_WithStyle$parameters3.source)})}),LatoForLatin.parameters=(0,esm_extends.Z)({},LatoForLatin.parameters,{docs:(0,esm_extends.Z)({},null==(_LatoForLatin$paramet=LatoForLatin.parameters)?void 0:_LatoForLatin$paramet.docs,{source:(0,esm_extends.Z)({originalSource:"() => <View>\n        <Title>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </Title>\n        <HeadingLarge>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </HeadingLarge>\n        <HeadingMedium>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </HeadingMedium>\n        <HeadingSmall>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </HeadingSmall>\n        <HeadingXSmall>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </HeadingXSmall>\n        <BodySerifBlock>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </BodySerifBlock>\n        <BodySerif>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </BodySerif>\n        <BodyMonospace>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </BodyMonospace>\n        <Body>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </Body>\n        <LabelLarge>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </LabelLarge>\n        <LabelMedium>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </LabelMedium>\n        <LabelSmall>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </LabelSmall>\n        <LabelXSmall>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </LabelXSmall>\n        <Tagline>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </Tagline>\n        <Caption>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </Caption>\n        <Footnote>\n            Для каждого ученика, независимо от возраста. Реальные результаты!\n        </Footnote>\n    </View>"},null==(_LatoForLatin$paramet2=LatoForLatin.parameters)||null==(_LatoForLatin$paramet3=_LatoForLatin$paramet2.docs)?void 0:_LatoForLatin$paramet3.source)})}),LatoForLatinExtended.parameters=(0,esm_extends.Z)({},LatoForLatinExtended.parameters,{docs:(0,esm_extends.Z)({},null==(_LatoForLatinExtended=LatoForLatinExtended.parameters)?void 0:_LatoForLatinExtended.docs,{source:(0,esm_extends.Z)({originalSource:"() => <View>\n        <Title>Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.</Title>\n        <HeadingLarge>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </HeadingLarge>\n        <HeadingMedium>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </HeadingMedium>\n        <HeadingSmall>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </HeadingSmall>\n        <HeadingXSmall>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </HeadingXSmall>\n        <BodySerifBlock>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </BodySerifBlock>\n        <BodySerif>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </BodySerif>\n        <BodyMonospace>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </BodyMonospace>\n        <Body>Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.</Body>\n        <LabelLarge>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </LabelLarge>\n        <LabelMedium>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </LabelMedium>\n        <LabelSmall>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </LabelSmall>\n        <LabelXSmall>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </LabelXSmall>\n        <Tagline>Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.</Tagline>\n        <Caption>Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.</Caption>\n        <Footnote>\n            Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.\n        </Footnote>\n    </View>"},null==(_LatoForLatinExtended2=LatoForLatinExtended.parameters)||null==(_LatoForLatinExtended3=_LatoForLatinExtended2.docs)?void 0:_LatoForLatinExtended3.source)})}),NotoForNonLatin.parameters=(0,esm_extends.Z)({},NotoForNonLatin.parameters,{docs:(0,esm_extends.Z)({},null==(_NotoForNonLatin$para=NotoForNonLatin.parameters)?void 0:_NotoForNonLatin$para.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const languages = ({\n    Arabic: {\n      text: "مرحبا",\n      dir: "rtl"\n    },\n    Armenian: {\n      text: "Բարեւ"\n    },\n    Greek: {\n      text: "γεια σας"\n    },\n    Hebrew: {\n      text: "שלום",\n      dir: "rtl"\n    }\n  } as const);\n  const [selectedValue, updateValue] = React.useState("Arabic");\n  // @ts-expect-error [FEI-5019] - TS7053 - Element implicitly has an \'any\' type because expression of type \'string\' can\'t be used to index type \'{ readonly Arabic: { readonly text: "مرحبا"; readonly dir: "rtl"; }; readonly Armenian: { readonly text: "Բարեւ"; }; readonly Greek: { readonly text: "γεια σας"; }; readonly Hebrew: { readonly text: "שלום"; readonly dir: "rtl"; }; }\'.\n  const {\n    text,\n    dir\n  } = languages[selectedValue];\n  return <View>\n            <SingleSelect aria-labelledby="language-selector" id="unique-language-selector" placeholder="Select language" onChange={selectedValue => updateValue(selectedValue)} selectedValue={selectedValue}>\n                {Object.keys(languages).map((item, key) => <OptionItem label={item} value={item} key={key} />)}\n            </SingleSelect>\n            <View>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <Title dir={dir}>{text}</Title>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <HeadingLarge dir={dir}>{text}</HeadingLarge>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <HeadingMedium dir={dir}>{text}</HeadingMedium>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <HeadingSmall dir={dir}>{text}</HeadingSmall>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <HeadingXSmall dir={dir}>{text}</HeadingXSmall>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <BodySerifBlock dir={dir}>{text}</BodySerifBlock>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <BodySerif dir={dir}>{text}</BodySerif>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <BodyMonospace dir={dir}>{text}</BodyMonospace>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <Body dir={dir}>{text}</Body>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <LabelLarge dir={dir}>{text}</LabelLarge>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <LabelMedium dir={dir}>{text}</LabelMedium>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <LabelSmall dir={dir}>{text}</LabelSmall>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <LabelXSmall dir={dir}>{text}</LabelXSmall>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <Tagline dir={dir}>{text}</Tagline>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <Caption dir={dir}>{text}</Caption>\n                {/* @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call. */}\n                <Footnote dir={dir}>{text}</Footnote>\n            </View>\n        </View>;\n}'},null==(_NotoForNonLatin$para2=NotoForNonLatin.parameters)||null==(_NotoForNonLatin$para3=_NotoForNonLatin$para2.docs)?void 0:_NotoForNonLatin$para3.source)})}),CodeFont.parameters=(0,esm_extends.Z)({},CodeFont.parameters,{docs:(0,esm_extends.Z)({},null==(_CodeFont$parameters=CodeFont.parameters)?void 0:_CodeFont$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const Code = ({\n    children\n  }: {\n    children: React.ReactNode;\n  }) => <BodyMonospace>{children}</BodyMonospace>;\n  return <Code>{`const str = "Hello, world!"`}</Code>;\n}'},null==(_CodeFont$parameters2=CodeFont.parameters)||null==(_CodeFont$parameters3=_CodeFont$parameters2.docs)?void 0:_CodeFont$parameters3.source)})}),Paragraph.parameters=(0,esm_extends.Z)({},Paragraph.parameters,{docs:(0,esm_extends.Z)({},null==(_Paragraph$parameters=Paragraph.parameters)?void 0:_Paragraph$parameters.docs,{source:(0,esm_extends.Z)({originalSource:"() => {\n  const longParagraph = `This is an example of a long paragraph.\n        Khan Academy offers practice exercises, instructional videos,\n        and a personalized learning dashboard that empower learners\n        to study at their own pace in and outside of the classroom.\n        We tackle math, science, computing, history, art history, economics,\n        and more, including K-14 and test preparation (SAT, Praxis, LSAT)\n        content. We focus on skill mastery to help learners establish\n        strong foundations, so there's no limit to what they can learn next!`;\n  return <Body>{longParagraph}</Body>;\n}"},null==(_Paragraph$parameters2=Paragraph.parameters)||null==(_Paragraph$parameters3=_Paragraph$parameters2.docs)?void 0:_Paragraph$parameters3.source)})}),LineHeight.parameters=(0,esm_extends.Z)({},LineHeight.parameters,{docs:(0,esm_extends.Z)({},null==(_LineHeight$parameter=LineHeight.parameters)?void 0:_LineHeight$parameter.docs,{source:(0,esm_extends.Z)({originalSource:"() => {\n  const style = ({\n    outline: `1px solid ${Color.offBlack}`,\n    marginBottom: Spacing.small_12\n  } as const);\n  return <View>\n            <Title style={style}>Title</Title>\n            <HeadingLarge style={style}>HeadingLarge</HeadingLarge>\n            <HeadingMedium style={style}>HeadingMedium</HeadingMedium>\n            <HeadingSmall style={style}>HeadingSmall</HeadingSmall>\n            <HeadingXSmall style={style}>HeadingXSmall</HeadingXSmall>\n            <BodySerifBlock style={style}>BodySerifBlock</BodySerifBlock>\n            <BodySerif style={style}>BodySerif</BodySerif>\n            <BodyMonospace style={style}>BodyMonospace</BodyMonospace>\n            <Body style={style}>Body</Body>\n            <LabelLarge style={style}>LabelLarge</LabelLarge>\n            <LabelMedium style={style}>LabelMedium</LabelMedium>\n            <LabelSmall style={style}>LabelSmall</LabelSmall>\n            <LabelXSmall style={style}>LabelXSmall</LabelXSmall>\n            <Tagline style={style}>Tagline</Tagline>\n            <Caption style={style}>Caption</Caption>\n            <Footnote style={style}>Footnote</Footnote>\n        </View>;\n}"},null==(_LineHeight$parameter2=LineHeight.parameters)||null==(_LineHeight$parameter3=_LineHeight$parameter2.docs)?void 0:_LineHeight$parameter3.source)})});const __namedExportsOrder=["ControlProps","TypographyElements","WithStyle","LatoForLatin","LatoForLatinExtended","NotoForNonLatin","CodeFont","Paragraph","LineHeight"]}}]);