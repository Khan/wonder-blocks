/*! For license information please see wonder-blocks-clickable-clickable-behavior-stories.4c802fdd.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkwonder_blocks=self.webpackChunkwonder_blocks||[]).push([[1729],{"./.storybook/components/component-info.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-button/dist/es/index.js"),_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/wonder-blocks-typography/dist/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const githubIconAsset={small:"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z"},ComponentInfo=({name,version})=>{var _name$split;const packageFolder=null==(_name$split=name.split("/"))?void 0:_name$split[1];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__.G7,{style:{justifyContent:"flex-end",alignItems:"center",flexDirection:"row",gap:10},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__.YS,{children:[name,"@",version]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__.Z,{kind:"secondary",href:`https://github.com/Khan/wonder-blocks/tree/main/packages/${packageFolder}`,target:"_blank",style:{color:"black"},icon:githubIconAsset,children:"Source code"})]})};ComponentInfo.displayName="ComponentInfo";const __WEBPACK_DEFAULT_EXPORT__=ComponentInfo;try{componentinfo.displayName="componentinfo",componentinfo.__docgenInfo={description:"An internal component that displays the package name and version. It also\nincludes a link to the Github repo.",displayName:"componentinfo",props:{name:{defaultValue:null,description:"The package name.",name:"name",required:!0,type:{name:"string"}},version:{defaultValue:null,description:"The latest stable version.",name:"version",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/components/component-info.tsx#componentinfo"]={docgenInfo:componentinfo.__docgenInfo,name:"componentinfo",path:".storybook/components/component-info.tsx#componentinfo"})}catch(__react_docgen_typescript_loader_error){}},"./__docs__/wonder-blocks-clickable/clickable.argtypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={children:{description:"The child of Clickable must be a function which returns the component which should be made Clickable.  The function is passed an object with three boolean properties: hovered, focused, and pressed.",control:{type:"text"},type:{name:"string",required:!0},table:{type:{summary:"(ClickableState) => React.Node"}}},id:{description:"An optional id attribute.",table:{type:{summary:"string"}},control:{type:"text"}},tabIndex:{description:"Set the tabindex attribute on the rendered element.",control:{type:"number",min:-1,max:1},table:{type:{summary:"number"}}},light:{description:"Whether the Clickable is on a dark colored background. Sets the default focus ring color to white, instead of blue. Defaults to false.",defaultValue:!1,type:{name:"boolean",required:!0},table:{category:"States",type:{summary:"boolean"}}},disabled:{description:"Disables or enables the child; defaults to false",defaultValue:!1,type:{name:"boolean",required:!0},table:{category:"States",type:{summary:"boolean"}}},hideDefaultFocusRing:{description:"Don't show the default focus ring.  This should be used when implementing a custom focus ring within your own component that uses Clickable.",table:{category:"States",type:{summary:"boolean"}}},className:{description:"Adds CSS classes to the Clickable.",control:{type:"text"},table:{category:"Styling"},type:{name:"string"}},style:{description:"Optional custom styles.",table:{category:"Styling",type:{summary:"StyleType"}}},onClick:{description:"An onClick function which Clickable can execute when clicked.",table:{category:"Events",type:{summary:"(e: SyntheticEvent<>) => mixed",detail:"`onClick` is optional if `href` is present, but must be defined if `href` is not"}},action:"clicked"},onkeyDown:{description:"Respond to raw `keydown` event.",table:{category:"Events",type:{summary:"(e: SyntheticKeyboardEvent<>) => mixed"}}},onKeyUp:{description:"Respond to raw `keyup` event.",table:{category:"Events",type:{summary:"(e: SyntheticKeyboardEvent<>) => mixed"}}},skipClientNav:{description:"Avoids client-side routing in the presence of the `href` prop",defaultValue:!1,control:{type:"boolean"},table:{category:"Navigation",type:{summary:"boolean"}}},rel:{description:'Specifies the type of relationship between the current document and the linked document. Should only be used when `href` is specified. This defaults to `noopener noreferrer` when `target="_blank"`, but can be overridden by setting this prop to something else.',control:{type:"text"},table:{category:"Navigation",type:{summary:"string"}}},target:{description:"A target destination window for a link to open in. Should only be used when `href` is specified.",control:{type:"text"},table:{category:"Navigation",type:{summary:"string"}}},href:{description:"Optional `href` which `Clickable` should direct to, uses client-side routing by default if react-router is present",control:{type:"text"},table:{category:"Navigation",type:{summary:"string",detail:"URL is required when we use `safeWithNav`"}}},beforeNav:{description:"Run async code before navigating. If the promise returned rejects then navigation will not occur. If both `safeWithNav` and `beforeNav` are provided, `beforeNav` will be run first and `safeWithNav` will only be run if `beforeNav` does not reject.",table:{category:"Navigation",type:{summary:"() => Promise<mixed>"}}},safeWithNav:{description:"Run async code in the background while client-side navigating. If the browser does a full page load navigation, the callback promise must be settled before the navigation will occur. Errors are ignored so that navigation is guaranteed to succeed.",table:{category:"Navigation",type:{summary:"() => Promise<mixed>"}}},"aria-label":{description:"A label for the clickable element read by a screen reader.",control:{type:"text"},table:{category:"Accessibility",type:{summary:"string",detail:"aria-label should be used when using\n                graphical elements to let people using screen readers the purpose of the\n                clickable element."}}},role:{description:"The role of the component, can be a role of type `ClickableRole`",control:{type:"select"},options:["button","checkbox","link","listbox","menu","menuitem","radio","tab"],table:{category:"Accessibility",type:{summary:"ClickableRole",detail:'"button" | "link" | "checkbox" | "radio" | "listbox" | "option" | "menuitem" | "menu" | "tab"'}}}}},"./__docs__/wonder-blocks-clickable/clickable-behavior.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithTabIndex:()=>WithTabIndex,WrappingButton:()=>WrappingButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>clickable_behavior_stories});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),lib=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/aphrodite/lib/index.js")),es=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),dist_es=__webpack_require__("./packages/wonder-blocks-color/dist/es/index.js"),wonder_blocks_spacing_dist_es=__webpack_require__("./packages/wonder-blocks-spacing/dist/es/index.js"),wonder_blocks_clickable_dist_es=__webpack_require__("./packages/wonder-blocks-clickable/dist/es/index.js"),wonder_blocks_clickable_package=__webpack_require__("./packages/wonder-blocks-clickable/package.json"),component_info=__webpack_require__("./.storybook/components/component-info.tsx"),clickable_argtypes=__webpack_require__("./__docs__/wonder-blocks-clickable/clickable.argtypes.ts");const clickable_behavior_argtypes={children:{description:"A function that returns the a React `Element`. The function is passed an object with three boolean properties: hovered, focused, and pressed, and a `childrenProps` argument that contains all the event handlers that should be passed to the React `Element` itself.",type:{name:"other",value:"(state: ClickableState, childrenProps: ChildrenProps) => React.Node",required:!0},table:{type:{summary:"(state: ClickableState, childrenProps: ChildrenProps) => React.Node"}}},tabIndex:{control:{type:"number"},description:"Used to indicate the tab order of an element.\n            Use 0 to make an element focusable, and use -1 to make an\n            element non-focusable via keyboard navigation.",table:{type:{summary:"number"}}},disabled:(0,esm_extends.Z)({},clickable_argtypes.Z.disabled,{description:"Whether the component is disabled.\n\nIf the component is disabled, this component will return handlers that do nothing."}),onClick:(0,esm_extends.Z)({},clickable_argtypes.Z.onClick,{description:"An onClick function which ClickableBehavior can execute when clicked."}),onkeyDown:clickable_argtypes.Z.onkeyDown,onKeyUp:clickable_argtypes.Z.onKeyUp,skipClientNav:clickable_argtypes.Z.skipClientNav,rel:clickable_argtypes.Z.rel,target:clickable_argtypes.Z.target,href:(0,esm_extends.Z)({},clickable_argtypes.Z.href,{description:"Optional `href` which `ClickableBehavior` should direct to, uses client-side routing by default if react-router is present.\n\nFor keyboard navigation, the default is that both an enter and space press would also navigate to this location. See the triggerOnEnter and triggerOnSpace props for more details"}),beforeNav:clickable_argtypes.Z.beforeNav,safeWithNav:clickable_argtypes.Z.safeWithNav,role:clickable_argtypes.Z.role};var _Default$parameters,_Default$parameters2,_Default$parameters2$,_WrappingButton$param,_WrappingButton$param2,_WrappingButton$param3,_WrappingButton$param4,_WrappingButton$param5,_WithTabIndex$paramet,_WithTabIndex$paramet2,_WithTabIndex$paramet3,jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const clickable_behavior_stories={title:"Clickable / ClickableBehavior",component:(0,wonder_blocks_clickable_dist_es.nJ)(),argTypes:clickable_behavior_argtypes,args:{disabled:!1},parameters:{componentSubtitle:(0,jsx_runtime.jsx)(component_info.Z,{name:wonder_blocks_clickable_package.u2,version:wonder_blocks_clickable_package.i8}),docs:{description:{component:null},source:{excludeDecorators:!0}}}},Default=args=>{const ClickableBehavior=(0,wonder_blocks_clickable_dist_es.nJ)();return(0,jsx_runtime.jsx)(ClickableBehavior,(0,esm_extends.Z)({role:"button"},args,{children:(state,childrenProps)=>{const{pressed,hovered,focused}=state;return(0,jsx_runtime.jsx)(es.G7,(0,esm_extends.Z)({style:[styles.clickable,hovered&&styles.hovered,focused&&styles.focused,pressed&&styles.pressed]},childrenProps,{children:"This is an element wrapped with ClickableBehavior"}))}}))};Default.displayName="Default",Default.parameters={chromatic:{disableSnapshot:!0}};const WrappingButton=args=>{const ClickableBehavior=(0,wonder_blocks_clickable_dist_es.nJ)(),StyledButton=(0,es.cu)("button");return(0,jsx_runtime.jsx)(ClickableBehavior,(0,esm_extends.Z)({},args,{children:(state,childrenProps)=>{const{pressed,hovered,focused}=state;return(0,jsx_runtime.jsx)(StyledButton,(0,esm_extends.Z)({style:[styles.clickable,styles.newButton,hovered&&styles.hovered,focused&&styles.focused,pressed&&styles.pressed]},childrenProps,{children:"This is an element wrapped with ClickableBehavior"}))}}))};WrappingButton.displayName="WrappingButton",WrappingButton.parameters={chromatic:{disableSnapshot:!0}};const WithTabIndex=()=>{const ClickableBehavior=(0,wonder_blocks_clickable_dist_es.nJ)();return(0,jsx_runtime.jsx)(ClickableBehavior,{role:"button",tabIndex:0,children:(state,childrenProps)=>{const{pressed,hovered,focused}=state;return(0,jsx_runtime.jsx)(es.G7,(0,esm_extends.Z)({style:[styles.clickable,hovered&&styles.hovered,focused&&styles.focused,pressed&&styles.pressed]},childrenProps,{children:"This is an element wrapped with ClickableBehavior"}))}})};WithTabIndex.displayName="WithTabIndex",WithTabIndex.parameters={chromatic:{disableSnapshot:!0},docs:{description:{story:"A `<ClickableBehavior>` element does not have\n            a tabIndex by default, as many elements it could wrap may have\n            their own built in tabIndex attribute, such as buttons. If this\n            is not the case, a tabIndex should be passed in using the\n            `tabIndex` prop."}}};const styles=lib.StyleSheet.create({clickable:{cursor:"pointer",padding:wonder_blocks_spacing_dist_es.Z.medium_16,textAlign:"center"},newButton:{border:"none",backgroundColor:dist_es.default.white,width:"100%"},hovered:{textDecoration:"underline",backgroundColor:dist_es.default.blue,color:dist_es.default.white},pressed:{backgroundColor:dist_es.default.darkBlue},focused:{outline:`solid 4px ${dist_es.default.lightBlue}`}});Default.parameters=(0,esm_extends.Z)({},Default.parameters,{docs:(0,esm_extends.Z)({},null==(_Default$parameters=Default.parameters)?void 0:_Default$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'(args: any) => {\n  const ClickableBehavior = getClickableBehavior();\n  return <ClickableBehavior role="button" {...args}>\n            {(state, childrenProps) => {\n      const {\n        pressed,\n        hovered,\n        focused\n      } = state;\n      return <View style={[styles.clickable, hovered && styles.hovered, focused && styles.focused, pressed && styles.pressed]} {...childrenProps}>\n                        This is an element wrapped with ClickableBehavior\n                    </View>;\n    }}\n        </ClickableBehavior>;\n}'},null==(_Default$parameters2=Default.parameters)||null==(_Default$parameters2$=_Default$parameters2.docs)?void 0:_Default$parameters2$.source)})}),WrappingButton.parameters=(0,esm_extends.Z)({},WrappingButton.parameters,{docs:(0,esm_extends.Z)({},null==(_WrappingButton$param=WrappingButton.parameters)?void 0:_WrappingButton$param.docs,{source:(0,esm_extends.Z)({originalSource:'(args: any) => {\n  const ClickableBehavior = getClickableBehavior();\n  const StyledButton = addStyle("button");\n  return <ClickableBehavior {...args}>\n            {(state, childrenProps) => {\n      const {\n        pressed,\n        hovered,\n        focused\n      } = state;\n      return <StyledButton style={[styles.clickable, styles.newButton, hovered && styles.hovered, focused && styles.focused, pressed && styles.pressed]} {...childrenProps}>\n                        This is an element wrapped with ClickableBehavior\n                    </StyledButton>;\n    }}\n        </ClickableBehavior>;\n}'},null==(_WrappingButton$param2=WrappingButton.parameters)||null==(_WrappingButton$param3=_WrappingButton$param2.docs)?void 0:_WrappingButton$param3.source),description:(0,esm_extends.Z)({story:"This is an example of a `<ClickableBehavior>` wrapping a button. Since\nbuttons have a built in tabIndex, a tabIndex does not need to be added to\n`<ClickableBehavior>` here."},null==(_WrappingButton$param4=WrappingButton.parameters)||null==(_WrappingButton$param5=_WrappingButton$param4.docs)?void 0:_WrappingButton$param5.description)})}),WithTabIndex.parameters=(0,esm_extends.Z)({},WithTabIndex.parameters,{docs:(0,esm_extends.Z)({},null==(_WithTabIndex$paramet=WithTabIndex.parameters)?void 0:_WithTabIndex$paramet.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const ClickableBehavior = getClickableBehavior();\n  return <ClickableBehavior role="button" tabIndex={0}>\n            {(state, childrenProps) => {\n      const {\n        pressed,\n        hovered,\n        focused\n      } = state;\n      return <View style={[styles.clickable, hovered && styles.hovered, focused && styles.focused, pressed && styles.pressed]} {...childrenProps}>\n                        This is an element wrapped with ClickableBehavior\n                    </View>;\n    }}\n        </ClickableBehavior>;\n}'},null==(_WithTabIndex$paramet2=WithTabIndex.parameters)||null==(_WithTabIndex$paramet3=_WithTabIndex$paramet2.docs)?void 0:_WithTabIndex$paramet3.source)})});const __namedExportsOrder=["Default","WrappingButton","WithTabIndex"];try{WrappingButton.displayName="WrappingButton",WrappingButton.__docgenInfo={description:"This is an example of a `<ClickableBehavior>` wrapping a button. Since\nbuttons have a built in tabIndex, a tabIndex does not need to be added to\n`<ClickableBehavior>` here.",displayName:"WrappingButton",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["__docs__/wonder-blocks-clickable/clickable-behavior.stories.tsx#WrappingButton"]={docgenInfo:WrappingButton.__docgenInfo,name:"WrappingButton",path:"__docs__/wonder-blocks-clickable/clickable-behavior.stories.tsx#WrappingButton"})}catch(__react_docgen_typescript_loader_error){}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./packages/wonder-blocks-clickable/package.json":module=>{module.exports=JSON.parse('{"u2":"@khanacademy/wonder-blocks-clickable","i8":"3.1.0"}')}}]);