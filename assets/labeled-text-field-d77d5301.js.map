{"version":3,"file":"labeled-text-field-d77d5301.js","sources":["../../packages/wonder-blocks-form/src/components/checkbox.tsx","../../packages/wonder-blocks-form/src/components/choice.tsx","../../packages/wonder-blocks-form/src/components/group-styles.ts","../../packages/wonder-blocks-form/src/components/checkbox-group.tsx","../../packages/wonder-blocks-form/src/components/radio-group.tsx","../../packages/wonder-blocks-form/src/components/text-field.tsx","../../packages/wonder-blocks-form/src/components/field-heading.tsx","../../packages/wonder-blocks-form/src/components/labeled-text-field.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport type {Checked} from \"../util/types\";\n\nimport ChoiceInternal from \"./choice-internal\";\n\n// Keep synced with ChoiceComponentProps in ../util/types.js\ntype ChoiceComponentProps = AriaProps & {\n    /**\n     * Whether this component is checked or indeterminate\n     */\n    checked: Checked;\n    /**\n     * Whether this component is disabled\n     */\n    disabled?: boolean;\n    /**\n     * Whether this component should show an error state\n     */\n    error?: boolean;\n    /**\n     * Callback when this component is selected. The newCheckedState is the\n     * new checked state of the component.\n     */\n    onChange: (newCheckedState: boolean) => unknown;\n    /**\n     * Optional label for the field.\n     */\n    label?: React.ReactNode;\n    /**\n     * Optional description for the field.\n     */\n    description?: React.ReactNode;\n    /**\n     * Unique identifier attached to the HTML input element. If used, need to\n     * guarantee that the ID is unique within everything rendered on a page.\n     * Used to match `<label>` with `<input>` elements for screenreaders.\n     */\n    id?: string;\n    /**\n     * Optional styling for the container. Does not style the component.\n     */\n    style?: StyleType;\n    /**\n     * Adds CSS classes to the Checkbox.\n     */\n    className?: string;\n    /**\n     * Optional test ID for e2e testing\n     */\n    testId?: string;\n    /**\n     * Name for the checkbox or radio button group. Only applicable for group\n     * contexts, auto-populated by group components via Choice.\n     * @ignore\n     */\n    groupName?: string;\n};\n\n/**\n * ‚òëÔ∏è A nicely styled checkbox for all your checking needs. Can optionally take\n * label and description props.\n *\n * If used by itself, a checkbox provides two options - checked and unchecked.\n * A group of checkboxes can be used to allow a user to select multiple values\n * from a list of options.\n *\n * If you want a whole group of Checkbox[es] that are related, see the Choice\n * and CheckboxGroup components.\n *\n * ### Usage\n *\n * ```jsx\n * import {Checkbox} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [checked, setChecked] = React.useState(false);\n *\n * <Checkbox checked={checked} onChange={setChecked} />\n * ```\n */\nconst Checkbox = React.forwardRef(\n    (\n        props: ChoiceComponentProps,\n        ref: React.ForwardedRef<HTMLInputElement>,\n    ) => {\n        const {disabled = false, error = false} = props;\n\n        return (\n            <ChoiceInternal\n                {...props}\n                variant=\"checkbox\"\n                disabled={disabled}\n                error={error}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default Checkbox;\n","import * as React from \"react\";\n\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport Checkbox from \"./checkbox\";\nimport Radio from \"./radio\";\n\ntype Props = AriaProps & {\n    /** User-defined. Label for the field. */\n    label: React.ReactNode;\n    /** User-defined. Optional description for the field. */\n    description?: React.ReactNode;\n    /** User-defined. Should be distinct for each item in the group. */\n    value: string;\n    /** User-defined. Whether this choice option is disabled. Default false. */\n    disabled?: boolean;\n    /** User-defined. Optional id for testing purposes. */\n    testId?: string;\n    /** User-defined. Optional additional styling. */\n    style?: StyleType;\n    /**\n     * Auto-populated by parent. Whether this choice is checked.\n     * @ignore\n     */\n    checked?: boolean;\n    /**\n     * Auto-populated by parent. Whether this choice is in error mode (everything\n     * in a choice group would be in error mode at the same time).\n     * @ignore\n     */\n    error?: boolean;\n    /**\n     * Auto-populated by parent. Used for accessibility purposes, where the label\n     * id should match the input id.\n     * @ignore\n     */\n    id?: string;\n    /**\n     * Auto-populated by parent's groupName prop.\n     * @ignore\n     */\n    groupName?: string;\n    /**\n     * Auto-populated by parent. Returns the new checked state of the component.\n     * @ignore\n     */\n    onChange?: (newCheckedState: boolean) => unknown;\n    /**\n     * Auto-populated by parent.\n     * @ignore\n     */\n    variant?: \"radio\" | \"checkbox\";\n};\n\n/**\n * This is a labeled üîò or ‚òëÔ∏è item. Choice is meant to be used as children of\n * CheckboxGroup and RadioGroup because many of its props are auto-populated\n * and not shown in the documentation here. See those components for usage\n * examples.\n *\n * If you wish to use just a single field, use Checkbox or Radio with the\n * optional label and description props.\n *\n * ### Checkbox Usage\n *\n * ```jsx\n * import {Choice, CheckboxGroup} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [selectedValues, setSelectedValues] = React.useState([]);\n *\n * // Checkbox usage\n * <CheckboxGroup\n *     label=\"some-label\"\n *     description=\"some-description\"\n *     groupName=\"some-group-name\"\n *     onChange={setSelectedValues}\n *     selectedValues={selectedValues}\n * />\n *     // Add as many choices as necessary\n *     <Choice\n *        label=\"Choice 1\"\n *        value=\"some-choice-value\"\n *        description=\"Some choice description.\"\n *     />\n *     <Choice\n *        label=\"Choice 2\"\n *        value=\"some-choice-value-2\"\n *        description=\"Some choice description.\"\n *     />\n * </CheckboxGroup>\n * ```\n *\n * ### Radio Usage\n *\n * ```jsx\n * import {Choice, RadioGroup} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [selectedValue, setSelectedValue] = React.useState(\"\");\n *\n * <RadioGroup\n *     label=\"some-label\"\n *     description=\"some-description\"\n *     groupName=\"some-group-name\"\n *     onChange={setSelectedValue}>\n *     selectedValues={selectedValue}\n * />\n *     // Add as many choices as necessary\n *     <Choice\n *        label=\"Choice 1\"\n *        value=\"some-choice-value\"\n *        description=\"Some choice description.\"\n *     />\n *     <Choice\n *        label=\"Choice 2\"\n *        value=\"some-choice-value-2\"\n *        description=\"Some choice description.\"\n *     />\n * </RadioGroup>\n * ```\n */\nconst Choice = React.forwardRef(\n    (props: Props, ref: React.ForwardedRef<HTMLInputElement>) => {\n        const {\n            checked = false,\n            disabled = false,\n            onChange = () => {},\n            // we don't need this going into the ChoiceComponent\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            value,\n            variant,\n            ...remainingProps\n        } = props;\n\n        const getChoiceComponent = (\n            variant?: string | null,\n        ): typeof Radio | typeof Checkbox => {\n            if (variant === \"checkbox\") {\n                return Checkbox;\n            } else {\n                return Radio;\n            }\n        };\n\n        const ChoiceComponent = getChoiceComponent(variant);\n        return (\n            <ChoiceComponent\n                {...remainingProps}\n                checked={checked}\n                disabled={disabled}\n                onChange={onChange}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default Choice;\n","import {StyleSheet} from \"aphrodite\";\n\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {StyleDeclaration} from \"aphrodite\";\n\nconst styles: StyleDeclaration = StyleSheet.create({\n    fieldset: {\n        border: \"none\",\n        padding: 0,\n        margin: 0,\n    },\n\n    legend: {\n        padding: 0,\n    },\n\n    description: {\n        marginTop: Spacing.xxxSmall_4,\n        color: Color.offBlack64,\n    },\n\n    error: {\n        marginTop: Spacing.xxxSmall_4,\n        color: Color.red,\n    },\n\n    defaultLineGap: {\n        marginTop: Spacing.xSmall_8,\n    },\n});\n\nexport default styles;\n","import * as React from \"react\";\n\nimport {View, addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {LabelMedium, LabelSmall} from \"@khanacademy/wonder-blocks-typography\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport styles from \"./group-styles\";\nimport Choice from \"./choice\";\n\n// Keep synced with CheckboxGroupProps in ../util/types.js\ntype CheckboxGroupProps = {\n    /**\n     * Children should be Choice components.\n     */\n    children: Array<\n        | React.ReactElement<React.ComponentProps<typeof Choice>>\n        | false\n        | null\n        | undefined\n    >;\n    /**\n     * Group name for this checkbox or radio group. Should be unique for all\n     * such groups displayed on a page.\n     */\n    groupName: string;\n    /**\n     * Optional label for the group. This label is optional to allow for\n     * greater flexibility in implementing checkbox and radio groups.\n     */\n    label?: React.ReactNode;\n    /**\n     * Optional description for the group.\n     */\n    description?: React.ReactNode;\n    /**\n     * Optional error message. If supplied, the group will be displayed in an\n     * error state, along with this error message. If no error state is desired,\n     * simply do not supply this prop, or pass along null.\n     */\n    errorMessage?: string | null | undefined;\n    /**\n     * Custom styling for this group of checkboxes.\n     */\n    style?: StyleType;\n    /**\n     * Callback for when selection of the group has changed. Passes the newly\n     * selected values.\n     */\n    onChange: (selectedValues: Array<string>) => unknown;\n    /**\n     * An array of the values of the selected values in this checkbox group.\n     */\n    selectedValues: Array<string>;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\nconst StyledFieldset = addStyle(\"fieldset\");\nconst StyledLegend = addStyle(\"legend\");\n\n/**\n * A checkbox group allows multiple selection. This component auto-populates\n * many props for its children Choice components. The Choice component is\n * exposed for the user to apply custom styles or to indicate which choices are\n * disabled.\n *\n * ### Usage\n *\n * ```jsx\n * import {Choice, CheckboxGroup} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [selectedValues, setSelectedValues] = React.useState([]);\n *\n * <CheckboxGroup\n *     label=\"some-label\"\n *     description=\"some-description\"\n *     groupName=\"some-group-name\"\n *     onChange={setSelectedValues}\n *     selectedValues={selectedValues}\n * >\n *     // Add as many choices as necessary\n *     <Choice\n *        label=\"Choice 1\"\n *        value=\"some-choice-value\"\n *     />\n *     <Choice\n *        label=\"Choice 2\"\n *        value=\"some-choice-value-2\"\n *        description=\"Some choice description.\"\n *     />\n * </CheckboxGroup>\n * ```\n */\nconst CheckboxGroup = React.forwardRef(\n    (\n        props: CheckboxGroupProps,\n        ref: React.ForwardedRef<HTMLFieldSetElement>,\n    ) => {\n        const {\n            children,\n            label,\n            description,\n            errorMessage,\n            groupName,\n            onChange,\n            selectedValues,\n            style,\n            testId,\n        } = props;\n\n        const handleChange = (\n            changedValue: string,\n            originalCheckedState: boolean,\n        ) => {\n            if (originalCheckedState) {\n                const index = selectedValues.indexOf(changedValue);\n                const updatedSelection = [\n                    ...selectedValues.slice(0, index),\n                    ...selectedValues.slice(index + 1),\n                ];\n                onChange(updatedSelection);\n            } else {\n                onChange([...selectedValues, changedValue]);\n            }\n        };\n\n        const allChildren = React.Children.toArray(children).filter(Boolean);\n\n        return (\n            <StyledFieldset\n                data-test-id={testId}\n                style={styles.fieldset}\n                ref={ref}\n            >\n                {/* We have a View here because fieldset cannot be used with flexbox*/}\n                <View style={style}>\n                    {label && (\n                        <StyledLegend style={styles.legend}>\n                            <LabelMedium>{label}</LabelMedium>\n                        </StyledLegend>\n                    )}\n                    {description && (\n                        <LabelSmall style={styles.description}>\n                            {description}\n                        </LabelSmall>\n                    )}\n                    {errorMessage && (\n                        <LabelSmall style={styles.error}>\n                            {errorMessage}\n                        </LabelSmall>\n                    )}\n                    {(label || description || errorMessage) && (\n                        <Strut size={Spacing.small_12} />\n                    )}\n\n                    {allChildren.map((child, index) => {\n                        // @ts-expect-error [FEI-5019] - TS2339 - Property 'props' does not exist on type 'ReactChild | ReactFragment | ReactPortal'.\n                        const {style, value} = child.props;\n                        const checked = selectedValues.includes(value);\n                        // @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call.\n                        return React.cloneElement(child, {\n                            checked: checked,\n                            error: !!errorMessage,\n                            groupName: groupName,\n                            id: `${groupName}-${value}`,\n                            key: value,\n                            onChange: () => handleChange(value, checked),\n                            style: [index > 0 && styles.defaultLineGap, style],\n                            variant: \"checkbox\",\n                        });\n                    })}\n                </View>\n            </StyledFieldset>\n        );\n    },\n);\n\nexport default CheckboxGroup;\n","import * as React from \"react\";\n\nimport {View, addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {LabelMedium, LabelSmall} from \"@khanacademy/wonder-blocks-typography\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport styles from \"./group-styles\";\nimport Choice from \"./choice\";\n\n// Keep synced with RadioGroupProps in ../util/types.js\ntype RadioGroupProps = {\n    /**\n     * Children should be Choice components.\n     */\n    children: Array<\n        | React.ReactElement<React.ComponentProps<typeof Choice>>\n        | false\n        | null\n        | undefined\n    >;\n    /**\n     * Group name for this checkbox or radio group. Should be unique for all\n     * such groups displayed on a page.\n     */\n    groupName: string;\n    /**\n     * Optional label for the group. This label is optional to allow for\n     * greater flexibility in implementing checkbox and radio groups.\n     */\n    label?: React.ReactNode;\n    /**\n     * Optional description for the group.\n     */\n    description?: React.ReactNode;\n    /**\n     * Optional error message. If supplied, the group will be displayed in an\n     * error state, along with this error message. If no error state is desired,\n     * simply do not supply this prop, or pass along null.\n     */\n    errorMessage?: string;\n    /**\n     * Custom styling for this group of checkboxes.\n     */\n    style?: StyleType;\n    /**\n     * Callback for when the selected value of the radio group has changed.\n     */\n    onChange: (selectedValue: string) => unknown;\n    /**\n     * Value of the selected radio item.\n     */\n    selectedValue: string;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\nconst StyledFieldset = addStyle(\"fieldset\");\nconst StyledLegend = addStyle(\"legend\");\n\n/**\n * A radio group allows only single selection. Like CheckboxGroup, this\n * component auto-populates many props for its children Choice components. The\n * Choice component is exposed for the user to apply custom styles or to\n * indicate which choices are disabled. The use of the groupName prop is\n * important to maintain expected keyboard navigation behavior for\n * accessibility.\n *\n * ### Usage\n *\n * ```jsx\n * import {Choice, RadioGroup} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [selectedValue, setSelectedValue] = React.useState(\"\");\n *\n * <RadioGroup\n *     label=\"some-label\"\n *     description=\"some-description\"\n *     groupName=\"some-group-name\"\n *     onChange={setSelectedValue}\n *     selectedValue={selectedValue}\n * >\n *     // Add as many choices as necessary\n *     <Choice\n *        label=\"Choice 1\"\n *        value=\"some-choice-value\"\n *     />\n *     <Choice\n *        label=\"Choice 2\"\n *        value=\"some-choice-value-2\"\n *        description=\"Some choice description.\"\n *     />\n * </RadioGroup>\n * ```\n */\nconst RadioGroup = React.forwardRef(\n    (props: RadioGroupProps, ref: React.ForwardedRef<HTMLFieldSetElement>) => {\n        const {\n            children,\n            label,\n            description,\n            errorMessage,\n            groupName,\n            onChange,\n            selectedValue,\n            style,\n            testId,\n        } = props;\n\n        const allChildren = React.Children.toArray(children).filter(Boolean);\n\n        return (\n            <StyledFieldset\n                data-test-id={testId}\n                style={styles.fieldset}\n                ref={ref}\n            >\n                {/* We have a View here because fieldset cannot be used with flexbox*/}\n                <View style={style}>\n                    {label && (\n                        <StyledLegend style={styles.legend}>\n                            <LabelMedium>{label}</LabelMedium>\n                        </StyledLegend>\n                    )}\n                    {description && (\n                        <LabelSmall style={styles.description}>\n                            {description}\n                        </LabelSmall>\n                    )}\n                    {errorMessage && (\n                        <LabelSmall style={styles.error}>\n                            {errorMessage}\n                        </LabelSmall>\n                    )}\n                    {(label || description || errorMessage) && (\n                        <Strut size={Spacing.small_12} />\n                    )}\n\n                    {allChildren.map((child, index) => {\n                        // @ts-expect-error [FEI-5019] - TS2339 - Property 'props' does not exist on type 'ReactChild | ReactFragment | ReactPortal'.\n                        const {style, value} = child.props;\n                        const checked = selectedValue === value;\n                        // @ts-expect-error [FEI-5019] - TS2769 - No overload matches this call.\n                        return React.cloneElement(child, {\n                            checked: checked,\n                            error: !!errorMessage,\n                            groupName: groupName,\n                            id: `${groupName}-${value}`,\n                            key: value,\n                            onChange: () => onChange(value),\n                            style: [index > 0 && styles.defaultLineGap, style],\n                            variant: \"radio\",\n                        });\n                    })}\n                </View>\n            </StyledFieldset>\n        );\n    },\n);\n\nexport default RadioGroup;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport Color, {mix, fade} from \"@khanacademy/wonder-blocks-color\";\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {styles as typographyStyles} from \"@khanacademy/wonder-blocks-typography\";\n\nimport type {StyleType, AriaProps} from \"@khanacademy/wonder-blocks-core\";\n\nexport type TextFieldType = \"text\" | \"password\" | \"email\" | \"number\" | \"tel\";\n\ntype WithForwardRef = {\n    forwardedRef: React.ForwardedRef<HTMLInputElement>;\n};\n\nconst defaultErrorMessage = \"This field is required.\";\n\nconst StyledInput = addStyle(\"input\");\n\ntype Props = AriaProps & {\n    /**\n     * The unique identifier for the input.\n     */\n    id: string;\n    /**\n     * Determines the type of input. Defaults to text.\n     */\n    type: TextFieldType;\n    /**\n     * The input value.\n     */\n    value: string;\n    /**\n     * Makes a read-only input field that cannot be focused. Defaults to false.\n     */\n    disabled: boolean;\n    /**\n     * Provide a validation for the input value.\n     * Return a string error message or null | void for a valid input.\n     */\n    validate?: (value: string) => string | null | void;\n    /**\n     * Called right after the TextField input is validated.\n     */\n    onValidate?: (errorMessage?: string | null | undefined) => unknown;\n    /**\n     * Called when the value has changed.\n     */\n    onChange: (newValue: string) => unknown;\n    /**\n     * Called when a key is pressed.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been focused.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been blurred.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n    /**\n     * Provide hints or examples of what to enter.\n     */\n    placeholder?: string;\n    /**\n     * Whether this field is required to to continue, or the error message to\n     * render if this field is left blank.\n     *\n     * This can be a boolean or a string.\n     *\n     * String:\n     * Please pass in a translated string to use as the error message that will\n     * render if the user leaves this field blank. If this field is required,\n     * and a string is not passed in, a default untranslated string will render\n     * upon error.\n     * Note: The string will not be used if a `validate` prop is passed in.\n     *\n     * Example message: i18n._(\"A password is required to log in.\")\n     *\n     * Boolean:\n     * True/false indicating whether this field is required. Please do not pass\n     * in `true` if possible - pass in the error string instead.\n     * If `true` is passed, and a `validate` prop is not passed, that means\n     * there is no corresponding message and the default untranlsated message\n     * will be used.\n     */\n    required?: boolean | string;\n    /**\n     * Change the default focus ring color to fit a dark background.\n     */\n    light: boolean;\n    /**\n     * Custom styles for the input.\n     */\n    style?: StyleType;\n    /**\n     * Optional test ID for e2e testing.\n     */\n    testId?: string;\n    /**\n     * Specifies if the input field is read-only.\n     */\n    readOnly?: boolean;\n    /**\n     * Whether this field should autofocus on page load.\n     */\n    autoFocus?: boolean;\n    /**\n     * Specifies if the input field allows autocomplete.\n     */\n    autoComplete?: string;\n};\n\ntype PropsWithForwardRef = Props & WithForwardRef;\n\ntype DefaultProps = {\n    type: PropsWithForwardRef[\"type\"];\n    disabled: PropsWithForwardRef[\"disabled\"];\n    light: PropsWithForwardRef[\"light\"];\n};\n\ntype State = {\n    /**\n     * Displayed when the validation fails.\n     */\n    error: string | null | undefined;\n    /**\n     * The user focuses on this field.\n     */\n    focused: boolean;\n};\n\n/**\n * A TextField is an element used to accept a single line of text from the user.\n */\nclass TextField extends React.Component<PropsWithForwardRef, State> {\n    static defaultProps: DefaultProps = {\n        type: \"text\",\n        disabled: false,\n        light: false,\n    };\n\n    constructor(props: PropsWithForwardRef) {\n        super(props);\n        if (props.validate && props.value !== \"\") {\n            // Ensures error is updated on unmounted server-side renders\n            this.state.error = props.validate(props.value) || null;\n        }\n    }\n\n    state: State = {\n        error: null,\n        focused: false,\n    };\n\n    componentDidMount() {\n        if (this.props.value !== \"\") {\n            this.maybeValidate(this.props.value);\n        }\n    }\n\n    maybeValidate: (newValue: string) => void = (newValue) => {\n        const {validate, onValidate, required} = this.props;\n\n        if (validate) {\n            const maybeError = validate(newValue) || null;\n            this.setState({error: maybeError}, () => {\n                if (onValidate) {\n                    onValidate(maybeError);\n                }\n            });\n        } else if (required) {\n            const requiredString =\n                typeof required === \"string\" ? required : defaultErrorMessage;\n            const maybeError = newValue ? null : requiredString;\n            this.setState({error: maybeError}, () => {\n                if (onValidate) {\n                    onValidate(maybeError);\n                }\n            });\n        }\n    };\n\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => unknown = (\n        event,\n    ) => {\n        const {onChange} = this.props;\n        const newValue = event.target.value;\n        this.maybeValidate(newValue);\n        onChange(newValue);\n    };\n\n    handleFocus: (event: React.FocusEvent<HTMLInputElement>) => unknown = (\n        event,\n    ) => {\n        const {onFocus} = this.props;\n        this.setState({focused: true}, () => {\n            if (onFocus) {\n                onFocus(event);\n            }\n        });\n    };\n\n    handleBlur: (event: React.FocusEvent<HTMLInputElement>) => unknown = (\n        event,\n    ) => {\n        const {onBlur} = this.props;\n        this.setState({focused: false}, () => {\n            if (onBlur) {\n                onBlur(event);\n            }\n        });\n    };\n\n    render(): React.ReactNode {\n        const {\n            id,\n            type,\n            value,\n            disabled,\n            onKeyDown,\n            placeholder,\n            light,\n            style,\n            testId,\n            readOnly,\n            autoFocus,\n            autoComplete,\n            forwardedRef,\n            // The following props are being included here to avoid\n            // passing them down to the otherProps spread\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            onFocus,\n            onBlur,\n            onValidate,\n            validate,\n            onChange,\n            required,\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            // Should only include Aria related props\n            ...otherProps\n        } = this.props;\n\n        return (\n            <StyledInput\n                style={[\n                    styles.input,\n                    typographyStyles.LabelMedium,\n                    styles.default,\n                    // Prioritizes disabled, then focused, then error (if any)\n                    disabled\n                        ? styles.disabled\n                        : this.state.focused\n                        ? [styles.focused, light && styles.defaultLight]\n                        : !!this.state.error && [\n                              styles.error,\n                              light && styles.errorLight,\n                          ],\n                    // Cast `this.state.error` into boolean since it's being\n                    // used as a conditional\n                    !!this.state.error && styles.error,\n                    style && style,\n                ]}\n                id={id}\n                type={type}\n                placeholder={placeholder}\n                value={value}\n                disabled={disabled}\n                onChange={this.handleChange}\n                onKeyDown={onKeyDown}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n                data-test-id={testId}\n                readOnly={readOnly}\n                autoFocus={autoFocus}\n                autoComplete={autoComplete}\n                ref={forwardedRef}\n                {...otherProps}\n            />\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    input: {\n        width: \"100%\",\n        height: 40,\n        borderRadius: 4,\n        boxSizing: \"border-box\",\n        paddingLeft: Spacing.medium_16,\n        margin: 0,\n        outline: \"none\",\n        boxShadow: \"none\",\n    },\n    default: {\n        background: Color.white,\n        border: `1px solid ${Color.offBlack16}`,\n        color: Color.offBlack,\n        \"::placeholder\": {\n            color: Color.offBlack64,\n        },\n    },\n    error: {\n        background: `${mix(fade(Color.red, 0.06), Color.white)}`,\n        border: `1px solid ${Color.red}`,\n        color: Color.offBlack,\n        \"::placeholder\": {\n            color: Color.offBlack64,\n        },\n    },\n    disabled: {\n        background: Color.offWhite,\n        border: `1px solid ${Color.offBlack16}`,\n        color: Color.offBlack64,\n        \"::placeholder\": {\n            color: Color.offBlack32,\n        },\n    },\n    focused: {\n        background: Color.white,\n        border: `1px solid ${Color.blue}`,\n        color: Color.offBlack,\n        \"::placeholder\": {\n            color: Color.offBlack64,\n        },\n    },\n    defaultLight: {\n        boxShadow: `0px 0px 0px 1px ${Color.blue}, 0px 0px 0px 2px ${Color.white}`,\n    },\n    errorLight: {\n        boxShadow: `0px 0px 0px 1px ${Color.red}, 0px 0px 0px 2px ${Color.white}`,\n    },\n});\n\ntype ExportProps = Omit<\n    JSX.LibraryManagedAttributes<\n        typeof TextField,\n        React.ComponentProps<typeof TextField>\n    >,\n    \"forwardedRef\"\n>;\n\n/**\n * A TextField is an element used to accept a single line of text from the user.\n *\n * ### Usage\n *\n * ```jsx\n * import {TextField} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [value, setValue] = React.useState(\"\");\n *\n * <TextField\n *     id=\"some-unique-text-field-id\"\n *     value={value}\n *     onChange={setValue}\n * />\n * ```\n */\nexport default React.forwardRef<HTMLInputElement, ExportProps>((props, ref) => (\n    <TextField {...props} forwardedRef={ref} />\n)) as React.ForwardRefExoticComponent<\n    ExportProps & React.RefAttributes<HTMLInputElement>\n>;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport {View, addStyle, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {LabelMedium, LabelSmall} from \"@khanacademy/wonder-blocks-typography\";\n\ntype Props = {\n    /**\n     * The form field component.\n     */\n    field: React.ReactNode;\n    /**\n     * The title for the label element.\n     */\n    label: React.ReactNode;\n    /**\n     * The text for the description element.\n     */\n    description?: React.ReactNode;\n    /**\n     * Whether this field is required to continue.\n     */\n    required?: boolean;\n    /**\n     * The message for the error element.\n     */\n    error?: React.ReactNode;\n    /**\n     * Custom styles for the field heading container.\n     */\n    style?: StyleType;\n    /**\n     * A unique id to link the label (and optional error) to the field.\n     *\n     * The label will assume that the field will have its id formatted as `${id}-field`.\n     * The field can assume that the error will have its id formatted as `${id}-error`.\n     */\n    id?: string;\n    /**\n     * Optional test ID for e2e testing.\n     */\n    testId?: string;\n};\n\nconst StyledSpan = addStyle(\"span\");\n\n/**\n * A FieldHeading is an element that provides a label, description, and error element\n * to present better context and hints to any type of form field component.\n */\nexport default class FieldHeading extends React.Component<Props> {\n    renderLabel(): React.ReactNode {\n        const {label, id, required, testId} = this.props;\n\n        const requiredIcon = (\n            <StyledSpan style={styles.required} aria-hidden={true}>\n                {\" \"}\n                *\n            </StyledSpan>\n        );\n\n        return (\n            <React.Fragment>\n                <LabelMedium\n                    style={styles.label}\n                    tag=\"label\"\n                    htmlFor={id && `${id}-field`}\n                    testId={testId && `${testId}-label`}\n                >\n                    {label}\n                    {required && requiredIcon}\n                </LabelMedium>\n                <Strut size={Spacing.xxxSmall_4} />\n            </React.Fragment>\n        );\n    }\n\n    maybeRenderDescription(): React.ReactNode | null | undefined {\n        const {description, testId} = this.props;\n\n        if (!description) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <LabelSmall\n                    style={styles.description}\n                    testId={testId && `${testId}-description`}\n                >\n                    {description}\n                </LabelSmall>\n                <Strut size={Spacing.xxxSmall_4} />\n            </React.Fragment>\n        );\n    }\n\n    maybeRenderError(): React.ReactNode | null | undefined {\n        const {error, id, testId} = this.props;\n\n        if (!error) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <Strut size={Spacing.small_12} />\n                <LabelSmall\n                    style={styles.error}\n                    role=\"alert\"\n                    id={id && `${id}-error`}\n                    testId={testId && `${testId}-error`}\n                >\n                    {error}\n                </LabelSmall>\n            </React.Fragment>\n        );\n    }\n\n    render(): React.ReactNode {\n        const {field, style} = this.props;\n\n        return (\n            <View style={style}>\n                {this.renderLabel()}\n                {this.maybeRenderDescription()}\n                <Strut size={Spacing.xSmall_8} />\n                {field}\n                {this.maybeRenderError()}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    label: {\n        color: Color.offBlack,\n    },\n    description: {\n        color: Color.offBlack64,\n    },\n    error: {\n        color: Color.red,\n    },\n    required: {\n        color: Color.red,\n    },\n});\n","import * as React from \"react\";\n\nimport {IDProvider, StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport FieldHeading from \"./field-heading\";\nimport TextField, {TextFieldType} from \"./text-field\";\n\ntype WithForwardRef = {\n    forwardedRef: React.ForwardedRef<HTMLInputElement>;\n};\n\ntype Props = {\n    /**\n     * An optional unique identifier for the TextField.\n     * If no id is specified, a unique id will be auto-generated.\n     */\n    id?: string;\n    /**\n     * Determines the type of input. Defaults to text.\n     */\n    type: TextFieldType;\n    /**\n     * Provide a label for the TextField.\n     */\n    label: React.ReactNode;\n    /**\n     * Provide a description for the TextField.\n     */\n    description?: React.ReactNode;\n    /**\n     * The input value.\n     */\n    value: string;\n    /**\n     * Makes a read-only input field that cannot be focused. Defaults to false.\n     */\n    disabled: boolean;\n    /**\n     * Whether this field is required to to continue, or the error message to\n     * render if this field is left blank.\n     *\n     * This can be a boolean or a string.\n     *\n     * String:\n     * Please pass in a translated string to use as the error message that will\n     * render if the user leaves this field blank. If this field is required,\n     * and a string is not passed in, a default untranslated string will render\n     * upon error.\n     * Note: The string will not be used if a `validate` prop is passed in.\n     *\n     * Example message: i18n._(\"A password is required to log in.\")\n     *\n     * Boolean:\n     * True/false indicating whether this field is required. Please do not pass\n     * in `true` if possible - pass in the error string instead.\n     * If `true` is passed, and a `validate` prop is not passed, that means\n     * there is no corresponding message and the default untranlsated message\n     * will be used.\n     */\n    required?: boolean | string;\n    /**\n     * Identifies the element or elements that describes this text field.\n     */\n    ariaDescribedby?: string | undefined;\n    /**\n     * Provide a validation for the input value.\n     * Return a string error message or null | void for a valid input.\n     */\n    validate?: (value: string) => string | null | undefined;\n    /**\n     * Called when the TextField input is validated.\n     */\n    onValidate?: (errorMessage?: string | null | undefined) => unknown;\n    /**\n     * Called when the value has changed.\n     */\n    onChange: (newValue: string) => unknown;\n    /**\n     * Called when a key is pressed.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been focused.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been blurred.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n    /**\n     * Provide hints or examples of what to enter.\n     */\n    placeholder?: string;\n    /**\n     * Change the field‚Äôs sub-components to fit a dark background.\n     */\n    light: boolean;\n    /**\n     * Custom styles for the container.\n     *\n     * Note: This style is passed to the field heading container\n     * due to scenarios where we would like to set a specific\n     * width for the text field. If we apply the style directly\n     * to the text field, the container would not be affected.\n     * For example, setting text field to \"width: 50%\" would not\n     * affect the container since text field is a child of the container.\n     * In this case, the container would maintain its width ocuppying\n     * unnecessary space when the text field is smaller.\n     */\n    style?: StyleType;\n    /**\n     * Optional test ID for e2e testing.\n     */\n    testId?: string;\n    /**\n     * Specifies if the TextField is read-only.\n     */\n    readOnly?: boolean;\n    /**\n     * Specifies if the TextField allows autocomplete.\n     */\n    autoComplete?: string;\n};\n\ntype PropsWithForwardRef = Props & WithForwardRef;\n\ntype DefaultProps = {\n    type: PropsWithForwardRef[\"type\"];\n    disabled: PropsWithForwardRef[\"disabled\"];\n    light: PropsWithForwardRef[\"light\"];\n};\n\ntype State = {\n    /**\n     * Displayed when the validation fails.\n     */\n    error: string | null | undefined;\n    /**\n     * The user focuses on the textfield.\n     */\n    focused: boolean;\n};\n\n/**\n * A LabeledTextField is an element used to accept a single line of text\n * from the user paired with a label, description, and error field elements.\n */\nclass LabeledTextField extends React.Component<PropsWithForwardRef, State> {\n    static defaultProps: DefaultProps = {\n        type: \"text\",\n        disabled: false,\n        light: false,\n    };\n\n    constructor(props: PropsWithForwardRef) {\n        super(props);\n        this.state = {\n            error: null,\n            focused: false,\n        };\n    }\n\n    handleValidate: (errorMessage?: string | null | undefined) => unknown = (\n        errorMessage,\n    ) => {\n        const {onValidate} = this.props;\n        this.setState({error: errorMessage}, () => {\n            if (onValidate) {\n                onValidate(errorMessage);\n            }\n        });\n    };\n\n    handleFocus: (event: React.FocusEvent<HTMLInputElement>) => unknown = (\n        event,\n    ) => {\n        const {onFocus} = this.props;\n        this.setState({focused: true}, () => {\n            if (onFocus) {\n                onFocus(event);\n            }\n        });\n    };\n\n    handleBlur: (event: React.FocusEvent<HTMLInputElement>) => unknown = (\n        event,\n    ) => {\n        const {onBlur} = this.props;\n        this.setState({focused: false}, () => {\n            if (onBlur) {\n                onBlur(event);\n            }\n        });\n    };\n\n    render(): React.ReactNode {\n        const {\n            id,\n            type,\n            label,\n            description,\n            value,\n            disabled,\n            required,\n            validate,\n            onChange,\n            onKeyDown,\n            placeholder,\n            light,\n            style,\n            testId,\n            readOnly,\n            autoComplete,\n            forwardedRef,\n            ariaDescribedby,\n        } = this.props;\n\n        return (\n            <IDProvider id={id} scope=\"labeled-text-field\">\n                {(uniqueId) => (\n                    <FieldHeading\n                        id={uniqueId}\n                        testId={testId}\n                        style={style}\n                        field={\n                            <TextField\n                                id={`${uniqueId}-field`}\n                                aria-describedby={\n                                    ariaDescribedby\n                                        ? ariaDescribedby\n                                        : `${uniqueId}-error`\n                                }\n                                aria-invalid={\n                                    this.state.error ? \"true\" : \"false\"\n                                }\n                                aria-required={required ? \"true\" : \"false\"}\n                                required={required}\n                                testId={testId && `${testId}-field`}\n                                type={type}\n                                value={value}\n                                placeholder={placeholder}\n                                disabled={disabled}\n                                validate={validate}\n                                onValidate={this.handleValidate}\n                                onChange={onChange}\n                                onKeyDown={onKeyDown}\n                                onFocus={this.handleFocus}\n                                onBlur={this.handleBlur}\n                                light={light}\n                                readOnly={readOnly}\n                                autoComplete={autoComplete}\n                                ref={forwardedRef}\n                            />\n                        }\n                        label={label}\n                        description={description}\n                        required={!!required}\n                        error={(!this.state.focused && this.state.error) || \"\"}\n                    />\n                )}\n            </IDProvider>\n        );\n    }\n}\n\ntype ExportProps = Omit<\n    JSX.LibraryManagedAttributes<\n        typeof LabeledTextField,\n        React.ComponentProps<typeof LabeledTextField>\n    >,\n    \"forwardedRef\"\n>;\n\n/**\n * A LabeledTextField is an element used to accept a single line of text\n * from the user paired with a label, description, and error field elements.\n *\n * ### Usage\n *\n * ```jsx\n * import {LabeledTextField} from \"@khanacademy/wonder-blocks-form\";\n *\n * const [value, setValue] = React.useState(\"\");\n *\n * <LabeledTextField\n *     label=\"Label\"\n *     description=\"Hello, this is the description for this field\"\n *     placeholder=\"Placeholder\"\n *     value={value}\n *     onChange={setValue}\n * />\n * ```\n */\n\nexport default React.forwardRef<HTMLInputElement, ExportProps>((props, ref) => (\n    <LabeledTextField {...props} forwardedRef={ref} />\n)) as React.ForwardRefExoticComponent<\n    ExportProps & React.RefAttributes<HTMLInputElement>\n>;\n"],"names":["Checkbox","React.forwardRef","props","ref","disabled","error","jsx","ChoiceInternal","Checkbox$1","Choice","checked","onChange","value","variant","remainingProps","ChoiceComponent","variant2","Radio","Choice$1","styles","StyleSheet","Spacing","Color","StyledFieldset","addStyle","StyledLegend","CheckboxGroup","children","label","description","errorMessage","groupName","selectedValues","style","testId","handleChange","changedValue","originalCheckedState","index","updatedSelection","allChildren","React.Children","jsxs","View","LabelMedium","LabelSmall","Strut","child","style2","React.cloneElement","CheckboxGroup$1","RadioGroup","selectedValue","RadioGroup$1","defaultErrorMessage","StyledInput","TextField","React.Component","newValue","validate","onValidate","required","maybeError","event","onFocus","onBlur","id","type","onKeyDown","placeholder","light","readOnly","autoFocus","autoComplete","forwardedRef","otherProps","typographyStyles","mix","fade","StyledSpan","FieldHeading","requiredIcon","React.Fragment","field","LabeledTextField","ariaDescribedby","IDProvider","uniqueId"],"mappings":"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"}