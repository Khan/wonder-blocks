{"version":3,"file":"breadcrumbs-item-25bba318.js","sources":["../../packages/wonder-blocks-breadcrumbs/src/components/breadcrumbs.tsx","../../packages/wonder-blocks-breadcrumbs/src/components/breadcrumbs-item.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport type {AriaProps} from \"@khanacademy/wonder-blocks-core\";\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport BreadcrumbsItem from \"./breadcrumbs-item\";\n\ntype Props = AriaProps & {\n    /**\n     * This is the content for the collection of Breadcrumbs\n     */\n    children:\n        | Array<\n              React.ReactElement<React.ComponentProps<typeof BreadcrumbsItem>>\n          >\n        | React.ReactElement<React.ComponentProps<typeof BreadcrumbsItem>>;\n    /**\n     * Accessible label for the breadcrumbs.\n     */\n    \"aria-label\"?: string;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\nconst StyledList = addStyle(\"ol\");\n\n/**\n * A breadcrumb trail consists of a list of links to the parent pages\n * of the current page in hierarchical order. It helps users find their\n * place within a website or web application.\n * Breadcrumbs are often placed horizontally before a page's main content.\n *\n * The Breadcrumbs component will have the following structure:\n *\n * 1. Breadcrumbs Item: Represents a section within the page.\n * 2. Separator: Adds a separator between each item.\n *\n * NOTE: `<BreadcrumbsItem />` only accepts two element types:\n *\n * 1. `string`\n * 2. `<Link />`\n *\n * ## Usage\n *\n * ```jsx\n * import {\n *     Breadcrumbs,\n *     BreadcrumbsItem\n * } from \"@khanacademy/wonder-blocks-breadcrumbs\";\n *\n * <Breadcrumbs>\n *     <BreadcrumbsItem>\n *         <Link href=\"\">Course</Link>\n *     </BreadcrumbsItem>\n *     <BreadcrumbsItem>\n *         <Link href=\"\">Unit</Link>\n *     </BreadcrumbsItem>\n *     <BreadcrumbsItem>\n *         Lesson\n *     </BreadcrumbsItem>\n * </Breadcrumbs>\n * ```\n */\nconst Breadcrumbs = React.forwardRef(\n    (props: Props, ref: React.ForwardedRef<HTMLElement>) => {\n        const {\n            \"aria-label\": ariaLabel = \"Breadcrumbs\",\n            children,\n            testId,\n            ...otherProps\n        } = props;\n\n        // using React.Children allows to deal with opaque data structures\n        // e.g. children = 'string' vs children = []\n        const lastChildIndex = React.Children.count(children) - 1;\n\n        return (\n            <nav\n                {...otherProps}\n                aria-label={ariaLabel}\n                data-test-id={testId}\n                ref={ref}\n            >\n                <StyledList style={styles.container}>\n                    {React.Children.map(children, (item, index) => {\n                        const isLastChild = index === lastChildIndex;\n\n                        return React.cloneElement(item, {\n                            ...item.props,\n                            showSeparator: !isLastChild,\n                            [\"aria-current\"]: isLastChild ? \"page\" : undefined,\n                        });\n                    })}\n                </StyledList>\n            </nav>\n        );\n    },\n);\n\nconst styles = StyleSheet.create({\n    container: {\n        display: \"flex\",\n        listStyle: \"none\",\n        margin: 0,\n        padding: 0,\n        overflow: \"hidden\",\n    },\n});\n\nexport default Breadcrumbs;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport type {AriaProps} from \"@khanacademy/wonder-blocks-core\";\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport Link from \"@khanacademy/wonder-blocks-link\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\ntype Props = AriaProps & {\n    /**\n     * This is the content for the collection of Breadcrumbs\n     */\n    children: string | React.ReactElement<React.ComponentProps<typeof Link>>;\n    /**\n     * When true, the separator is shown; otherwise, the separator is not shown.\n     * Note: This is only for use by the Breadcrumbs component!!\n     * @ignore\n     */\n    showSeparator?: boolean;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\nconst StyledListItem = addStyle(\"li\");\nconst StyledSvg = addStyle(\"svg\");\n\n/**\n * The BreadcrumbsItem represents an individual item in the breadcrumbs list.\n */\nconst BreadcrumbsItem = React.forwardRef(\n    (props: Props, ref: React.ForwardedRef<HTMLLIElement>) => {\n        const {children, showSeparator, testId, ...otherProps} = props;\n\n        /**\n         * Renders a separator after the content\n         * It draws a circular bullet point using an SVG circle shape\n         */\n        const _renderSeparator = (): React.ReactNode => {\n            return (\n                <StyledSvg\n                    style={styles.separator}\n                    width={16}\n                    height={16}\n                    viewBox=\"0 0 16 16\"\n                    aria-hidden={true}\n                >\n                    <circle cx=\"8\" cy=\"9\" r=\"1.5\" />\n                </StyledSvg>\n            );\n        };\n\n        return (\n            <StyledListItem\n                {...otherProps}\n                style={styles.item}\n                data-test-id={testId}\n                ref={ref}\n            >\n                {children}\n                {showSeparator && _renderSeparator()}\n            </StyledListItem>\n        );\n    },\n);\n\nconst styles = StyleSheet.create({\n    item: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginRight: Spacing.xxxSmall_4,\n    },\n\n    separator: {\n        marginLeft: Spacing.xxxSmall_4,\n    },\n});\n\nexport default BreadcrumbsItem;\n"],"names":["StyledList","addStyle","Breadcrumbs","React.forwardRef","props","ref","ariaLabel","children","testId","otherProps","lastChildIndex","React.Children","jsx","styles","item","index","isLastChild","React.cloneElement","StyleSheet","StyledListItem","StyledSvg","BreadcrumbsItem","showSeparator","_renderSeparator","jsxs","Spacing"],"mappings":"gMA0BA,MAAAA,EAAAC,EAAA,IAAA,EAuCAC,EAAAC,EAAA,WAA0B,CAAAC,EAAAC,IAAA,CAElB,KAAA,CAAM,aAAAC,EAAA,cACwB,SAAAC,EAC1B,OAAAC,EACA,GAAAC,CACG,EAAAL,EAKPM,EAAAC,EAAA,SAAA,MAAAJ,CAAA,EAAA,EAEA,OAAAK,EACI,MAAC,CAAA,GAAAH,EACO,aAAAH,EACQ,eAAAE,EACE,IAAAH,EACd,SAAAO,EAAAZ,EAAA,CAAA,MAAAa,EAAA,UAAA,SAAAF,EAAA,SAAA,IAAAJ,EAAA,CAAAO,EAAAC,IAAA,CAIQ,MAAAC,EAAAD,IAAAL,EAEA,OAAAO,EAAAA,aAAAH,EAAA,CAAgC,GAAAA,EAAA,MACpB,cAAA,CAAAE,EACQ,eAAAA,EAAA,OAAA,MACyB,CAAA,CAC5C,CAAA,EAAA,CAET,CAAA,CACJ,CAGZ,EAEAH,EAAAK,EAAA,WAAA,OAAA,CAAiC,UAAA,CAClB,QAAA,OACE,UAAA,OACE,OAAA,EACH,QAAA,EACC,SAAA,QACC,CAElB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sxECpFA,MAAAC,EAAAlB,EAAA,IAAA,EACAmB,EAAAnB,EAAA,KAAA,EAKAoB,EAAAlB,EAAA,WAA8B,CAAAC,EAAAC,IAAA,CAEtB,KAAA,CAAA,SAAAE,EAAA,cAAAe,EAAA,OAAAd,EAAA,GAAAC,CAAA,EAAAL,EAMAmB,EAAA,IACIX,EACIQ,EAAC,CAAA,MAAAP,EAAA,UACiB,MAAA,GACP,OAAA,GACC,QAAA,YACA,cAAA,GACK,SAAAD,EAAA,SAAA,CAAA,GAAA,IAAA,GAAA,IAAA,EAAA,MAAA,CAEiB,CAAA,EAK1C,OAAAY,EACIL,EAAC,CAAA,GAAAV,EACO,MAAAI,EAAA,KACU,eAAAL,EACA,IAAAH,EACd,SAAA,CAECE,EAAAe,GAAAC,EAAA,CACkC,CAAA,CAAA,CACvC,CAGZ,EAEAV,EAAAK,EAAA,WAAA,OAAA,CAAiC,KAAA,CACvB,QAAA,OACO,WAAA,SACG,eAAA,SACI,YAAAO,EAAA,UACK,EACzB,UAAA,CAEW,WAAAA,EAAA,UACa,CAE5B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}