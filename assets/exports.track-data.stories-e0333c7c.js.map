{"version":3,"file":"exports.track-data.stories-e0333c7c.js","sources":["../../__docs__/wonder-blocks-data/exports.track-data.stories.mdx"],"sourcesContent":["import {Meta} from \"@storybook/blocks\";\nimport {TrackData} from \"@khanacademy/wonder-blocks-data\";\n\n<Meta\n    title=\"Data / Exports / TrackData\"\n    component={TrackData}\n    parameters={{\n        chromatic: {\n            disableSnapshot: true,\n        },\n    }}\n/>\n\n# TrackData\n\nThe `TrackData` component is a server-side only component. It should be used as\na parent to the components whose data requests you want to fulfill during\nserver-side rendering.\n\n#### Client-side behavior\n\nIf used outside of server-side mode (as set using `Server.setServerSide`), this\ncomponent will throw, as demonstrated below.\n\n```jsx\nimport {Body, BodyMonospace} from \"@khanacademy/wonder-blocks-typography\";\nimport {Server, View} from \"@khanacademy/wonder-blocks-core\";\nimport {TrackData} from \"@khanacademy/wonder-blocks-data\";\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    static getDerivedStateFromError(error) {\n        return {error: error.message};\n    }\n\n    render() {\n        if (typeof jest !== \"undefined\") {\n            /**\n             * The snapshot test just sees the error getting thrown, not the\n             * awesome error boundary, so we have to hack around it to keep\n             * this live example, but not get test failures.\n             */\n            return \"Sorry, no snapshot for you\";\n        }\n\n        if (this.state.error) {\n            return <View>{this.state.error}</View>;\n        }\n        return this.props.children;\n    }\n}\n\n<ErrorBoundary>\n    <View>\n        <TrackData>\n            <Body>\n                This only renders if we're in server-side mode and the page hot\n                reloaded\n            </Body>\n        </TrackData>\n    </View>\n</ErrorBoundary>;\n```\n\n#### Server-side behavior\n\nWhen used server-side, this component tracks any data requests made through\nthe `Data` component during a render cycle. This data can then be obtained\nusing the `fetchTrackedRequests` method. The data can then be used in an\nadditional render cycle to render with that data.\n\n```jsx\nimport {Body, BodyMonospace} from \"@khanacademy/wonder-blocks-typography\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport Button from \"@khanacademy/wonder-blocks-button\";\nimport {Server, View} from \"@khanacademy/wonder-blocks-core\";\nimport {\n    Data,\n    TrackData,\n    fetchTrackedRequests,\n} from \"@khanacademy/wonder-blocks-data\";\n\nconst myPretendHandler = () =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"DATA!\"), 3000));\n\nclass Example extends React.Component {\n    constructor() {\n        super();\n        /**\n         * For this demonstration, we need to hack the return of isServerSide solely\n         * for the scope of this component.\n         */\n        this.state = {};\n    }\n\n    static getDerivedStateFromError(error) {\n        return {error};\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n    }\n\n    setClientMode() {\n        window.location.reload();\n    }\n\n    setServerMode() {\n        Server.setServerSide();\n        this.setState({refresh: Date.now(), error: null});\n    }\n\n    _renderErrorOrContent() {\n        if (typeof jest !== \"undefined\") {\n            /**\n             * The snapshot test just sees the error getting thrown, not the\n             * awesome error boundary, so we have to hack around it to keep\n             * this live example, but not get test failures.\n             */\n            return \"Sorry, no snapshot for you\";\n        }\n\n        if (this.state.error) {\n            return (\n                <React.Fragment>\n                    <Strut size={Spacing.small_12} />\n                    <Body>\n                        We can't show you anything useful in client-side mode\n                    </Body>\n                </React.Fragment>\n            );\n        }\n\n        const data = this.state.data\n            ? JSON.stringify(this.state.data, undefined, \"  \")\n            : \"Data requested...\";\n\n        return (\n            <React.Fragment>\n                <Strut size={Spacing.small_12} />\n                <TrackData>\n                    <Data\n                        handler={myPretendHandler}\n                        requestId=\"TRACK_DATA_EXAMPLE\"\n                    >\n                        {(result) => (\n                            <View>\n                                <BodyMonospace>{`Loading: ${\n                                    result.status === \"loading\"\n                                }`}</BodyMonospace>\n                                <BodyMonospace>{`Data: ${JSON.stringify(\n                                    result.data,\n                                )}`}</BodyMonospace>\n                            </View>\n                        )}\n                    </Data>\n                </TrackData>\n                <Strut size={Spacing.small_12} />\n                <View>\n                    <Body>\n                        The above components requested data, but we're\n                        server-side, so all that happened is we tracked the\n                        request. In this example, we've also called\n                        `fetchTrackedRequests` to fetch that tracked data.\n                    </Body>\n                    <Strut size={Spacing.small_12} />\n                    <Body>\n                        In about 3 seconds, it will appear below. Notice that\n                        when it does, the above still doesn't update. That's\n                        because during SSR, the data is not updated in the\n                        rendered tree.\n                    </Body>\n                    <Strut size={Spacing.small_12} />\n                    <BodyMonospace>{data}</BodyMonospace>\n                </View>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        try {\n            return (\n                <View key={this.state.refresh}>\n                    {Server.isServerSide() ? (\n                        <React.Fragment>\n                            <Button\n                                kind={\"secondary\"}\n                                onClick={() => this.setClientMode()}\n                            >\n                                Back to Client-side Mode (reloads page)\n                            </Button>\n                            <Strut size={Spacing.small_12} />\n                            <Button\n                                kind={\"secondary\"}\n                                onClick={() => this.setServerMode()}\n                            >\n                                Re-mount\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        <Button\n                            kind={\"primary\"}\n                            onClick={() => this.setServerMode()}\n                        >\n                            Enable Server-side Mode\n                        </Button>\n                    )}\n                    {this._renderErrorOrContent()}\n                </View>\n            );\n        } finally {\n            if (!this.state.data && Server.isServerSide()) {\n                setTimeout(\n                    () =>\n                        fetchTrackedRequests().then((data) => {\n                            if (this._mounted) {\n                                this.setState({data});\n                            }\n                        }),\n                    0,\n                );\n            }\n        }\n    }\n}\n\n<Example />;\n```\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","TrackData","MDXContent","MDXLayout","__page","componentMeta","__namedExportsOrder"],"mappings":"qoBAMA,SAASA,EAAkBC,EAAO,CAChC,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,KAAM,OACN,GAAI,KACJ,IAAK,KACN,EAAEC,EAAoB,EAAEF,EAAM,UAAU,EACzC,OAAoBG,EAAMC,EAAW,CACnC,SAAU,CAAcC,EAAKC,EAAM,CACjC,MAAO,6BACP,UAAWC,EACX,WAAY,CACV,UAAW,CACT,gBAAiB,EAClB,CACF,CACF,CAAA,EAAG;AAAA,EAAmBF,EAAKJ,EAAY,GAAI,CAC1C,GAAI,YACJ,SAAU,WACX,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC,OAAqBI,EAAKJ,EAAY,KAAM,CACrD,SAAU,WACX,CAAA,EAAG;AAAA;AAAA,uBAAqK,CAC1K,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,GAAI,CAC1C,GAAI,uBACJ,SAAU,sBACX,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC,qDAAmEI,EAAKJ,EAAY,KAAM,CACnG,SAAU,sBACX,CAAA,EAAG;AAAA,6CAAuD,CAC5D,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,IAAK,CAC3C,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,UAAW,eACX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAClB,CAAO,CACF,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,GAAI,CAC1C,GAAI,uBACJ,SAAU,sBACX,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC;AAAA,MAAkGI,EAAKJ,EAAY,KAAM,CAClI,SAAU,MACX,CAAA,EAAG;AAAA,YAA6FI,EAAKJ,EAAY,KAAM,CACtH,SAAU,sBACX,CAAA,EAAG;AAAA,kDAA6F,CAClG,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,IAAK,CAC3C,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,UAAW,elB,CAAO,CACP,CAAK,CAAC,CACN,CAAG,CACH,CACA,SAASO,EAAWR,EAAQ,GAAI,CAC9B,KAAM,CACJ,QAASS,CACb,EAAM,OAAO,OAAO,CAAE,EAAEP,EAAkB,EAAIF,EAAM,UAAU,EAC5D,OAAOS,EAAyBJ,EAAKI,EAAW,CAC9C,GAAGT,EACH,SAAuBK,EAAKN,EAAmB,CAC7C,GAAGC,CACT,CAAK,CACL,CAAG,EAAID,EAAkBC,CAAK,CAC9B,CAEY,MAACU,EAAS,IAAM,CAC1B,MAAM,IAAI,MAAM,iBAAiB,CACnC,EACAA,EAAO,WAAa,CAClB,SAAU,EACZ,EACK,MAACC,EAAgB,CACpB,MAAO,6BACP,WAAY,CACV,UAAW,CACT,gBAAiB,EAClB,CACF,EACD,UAAWJ,EACX,KAAM,CAAC,aAAa,EACpB,eAAgB,CAAC,QAAQ,CAC3B,EACAI,EAAc,WAAaA,EAAc,YAAc,GACvDA,EAAc,WAAW,KAAO,CAC9B,GAAIA,EAAc,WAAW,MAAQ,GACrC,KAAMH,CACR,EAC4B,MAAAI,EAAA,CAAA,QAAA"}