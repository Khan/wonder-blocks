{"version":3,"file":"compact-cell.argtypes-ad65c4dc.js","sources":["../../packages/wonder-blocks-cell/src/components/internal/common.ts","../../packages/wonder-blocks-cell/src/components/internal/cell-core.tsx","../../packages/wonder-blocks-cell/src/components/compact-cell.tsx","../../packages/wonder-blocks-cell/src/components/detail-cell.tsx","../../__docs__/wonder-blocks-cell/compact-cell.argtypes.tsx"],"sourcesContent":["import {StyleSheet} from \"aphrodite\";\n\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport type {HorizontalRuleVariant} from \"../../util/types\";\n\nexport const CellMeasurements = {\n    cellMinHeight: Spacing.xxLarge_48,\n\n    /**\n     * The cell wrapper's gap.\n     */\n    cellPadding: {\n        paddingVertical: Spacing.small_12,\n        paddingHorizontal: Spacing.medium_16,\n    },\n\n    /**\n     * The DetailCell wrapper's gap.\n     */\n    detailCellPadding: {\n        paddingVertical: Spacing.medium_16,\n        paddingHorizontal: Spacing.medium_16,\n    },\n\n    /**\n     * The horizontal spacing between the left and right accessory.\n     */\n    accessoryHorizontalSpacing: Spacing.medium_16,\n} as const;\n\n/**\n * Gets the horizontalRule style based on the variant.\n * @param {HorizontalRuleVariant} horizontalRule The variant of the horizontal\n * rule.\n * @returns A styled horizontal rule.\n */\nexport const getHorizontalRuleStyles = (\n    horizontalRule: HorizontalRuleVariant,\n): StyleType => {\n    switch (horizontalRule) {\n        case \"inset\":\n            return [styles.horizontalRule, styles.horizontalRuleInset];\n        case \"full-width\":\n            return styles.horizontalRule;\n        case \"none\":\n            return {};\n    }\n};\n\nconst styles = StyleSheet.create({\n    horizontalRule: {\n        position: \"relative\",\n        \":after\": {\n            width: \"100%\",\n            content: \"''\",\n            position: \"absolute\",\n            // align to the bottom of the cell\n            bottom: 0,\n            // align border to the right of the cell\n            right: 0,\n            height: Spacing.xxxxSmall_2,\n            boxShadow: `inset 0px -1px 0px ${Color.offBlack8}`,\n        },\n    },\n\n    horizontalRuleInset: {\n        \":after\": {\n            // Inset doesn't include the left padding of the cell.\n            width: `calc(100% - ${CellMeasurements.cellPadding.paddingHorizontal}px)`,\n        },\n    },\n});\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport Clickable from \"@khanacademy/wonder-blocks-clickable\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport Color, {fade} from \"@khanacademy/wonder-blocks-color\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {ClickableState} from \"@khanacademy/wonder-blocks-clickable\";\nimport {CellMeasurements, getHorizontalRuleStyles} from \"./common\";\n\nimport type {CellProps} from \"../../util/types\";\n\ntype LeftAccessoryProps = {\n    leftAccessory?: CellProps[\"leftAccessory\"];\n    leftAccessoryStyle?: CellProps[\"leftAccessoryStyle\"];\n    disabled?: CellProps[\"disabled\"];\n};\n\n/**\n * Left Accessories can be defined using WB components such as Icon, IconButton,\n * or it can even be used for a custom node/component if needed.\n */\nconst LeftAccessory = ({\n    leftAccessory,\n    leftAccessoryStyle,\n    disabled,\n}: LeftAccessoryProps): React.ReactElement => {\n    if (!leftAccessory) {\n        // @ts-expect-error [FEI-5019] - TS2322 - Type 'null' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n        return null;\n    }\n\n    return (\n        <>\n            <View\n                style={[\n                    styles.accessory,\n                    disabled && styles.accessoryDisabled,\n                    {...leftAccessoryStyle},\n                ]}\n            >\n                {leftAccessory}\n            </View>\n            <Strut size={CellMeasurements.accessoryHorizontalSpacing} />\n        </>\n    );\n};\n\ntype RightAccessoryProps = {\n    rightAccessory?: CellProps[\"rightAccessory\"];\n    rightAccessoryStyle?: CellProps[\"rightAccessoryStyle\"];\n    active?: CellProps[\"active\"];\n    disabled?: CellProps[\"disabled\"];\n};\n\n/**\n * Right Accessories can be defined using WB components such as Icon,\n * IconButton, or it can even be used for a custom node/component if needed.\n */\nconst RightAccessory = ({\n    rightAccessory,\n    rightAccessoryStyle,\n    active,\n    disabled,\n}: RightAccessoryProps): React.ReactElement => {\n    if (!rightAccessory) {\n        // @ts-expect-error [FEI-5019] - TS2322 - Type 'null' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n        return null;\n    }\n\n    return (\n        <>\n            <Strut size={CellMeasurements.accessoryHorizontalSpacing} />\n            <View\n                style={[\n                    styles.accessory,\n                    styles.accessoryRight,\n                    disabled && styles.accessoryDisabled,\n                    {...rightAccessoryStyle},\n                    active && styles.accessoryActive,\n                ]}\n            >\n                {rightAccessory}\n            </View>\n        </>\n    );\n};\n\ntype CellCoreProps = Partial<Omit<CellProps, \"title\">> & {\n    /**\n     * The content of the cell.\n     */\n    children: React.ReactNode;\n    /**\n     * The optional styles applied to the inner wrapper.\n     *\n     * Note: This is not intended to be used externally, only used directly\n     * within the package scope.\n     */\n    innerStyle?: StyleType;\n};\n\n/**\n * CellCore is the base cell wrapper. It's used as the skeleton/layout that is\n * used by CompactCell and DetailCell (and any other variants).\n *\n * Both variants share how they render their accessories, and the main\n * responsibility of this component is to render the contents that are passed in\n * (using the `children` prop).\n */\nconst CellCore = (props: CellCoreProps): React.ReactElement => {\n    const {\n        active,\n        children,\n        disabled,\n        href,\n        horizontalRule = \"inset\",\n        leftAccessory = undefined,\n        leftAccessoryStyle = undefined,\n        onClick,\n        rightAccessory = undefined,\n        rightAccessoryStyle = undefined,\n        style,\n        testId,\n        \"aria-label\": ariaLabel,\n        innerStyle,\n        target,\n    } = props;\n\n    const renderCell = (eventState?: ClickableState): React.ReactElement => {\n        const horizontalRuleStyles = getHorizontalRuleStyles(horizontalRule);\n\n        return (\n            <View\n                style={[\n                    styles.wrapper,\n                    // focused applied to the main wrapper to make the border\n                    // outline part of the wrapper\n                    eventState?.focused && styles.focused,\n                ]}\n                aria-current={active ? \"true\" : undefined}\n            >\n                <View\n                    style={[\n                        styles.innerWrapper,\n                        innerStyle,\n                        // custom styles\n                        style,\n                        horizontalRuleStyles,\n                        disabled && styles.disabled,\n                        active && styles.active,\n                        // other states applied to the inner wrapper to blend\n                        // the background color properly\n                        !disabled && eventState?.hovered && styles.hovered,\n                        // active + hovered\n                        active && eventState?.hovered && styles.activeHovered,\n                        !disabled && eventState?.pressed && styles.pressed,\n                        // active + pressed\n                        !disabled &&\n                            active &&\n                            eventState?.pressed &&\n                            styles.activePressed,\n                    ]}\n                >\n                    {/* Left accessory */}\n                    <LeftAccessory\n                        leftAccessory={leftAccessory}\n                        leftAccessoryStyle={leftAccessoryStyle}\n                        disabled={disabled}\n                    />\n\n                    {/* Cell contents */}\n                    <View style={styles.content} testId={testId}>\n                        {children}\n                    </View>\n\n                    {/* Right accessory */}\n                    <RightAccessory\n                        rightAccessory={rightAccessory}\n                        rightAccessoryStyle={rightAccessoryStyle}\n                        active={active}\n                        disabled={disabled}\n                    />\n                </View>\n            </View>\n        );\n    };\n\n    // Pressable cell.\n    if (onClick || href) {\n        return (\n            <Clickable\n                disabled={disabled}\n                onClick={onClick}\n                href={href}\n                hideDefaultFocusRing={true}\n                aria-label={ariaLabel ? ariaLabel : undefined}\n                target={target}\n            >\n                {(eventState) => renderCell(eventState)}\n            </Clickable>\n        );\n    }\n\n    // No click event attached, so just render the cell as-is.\n    return renderCell();\n};\n\nconst styles = StyleSheet.create({\n    wrapper: {\n        background: Color.white,\n        color: Color.offBlack,\n        minHeight: CellMeasurements.cellMinHeight,\n        textAlign: \"left\",\n    },\n\n    innerWrapper: {\n        padding: `${CellMeasurements.cellPadding.paddingVertical}px ${CellMeasurements.cellPadding.paddingHorizontal}px`,\n        flexDirection: \"row\",\n        flex: 1,\n    },\n\n    content: {\n        alignSelf: \"center\",\n        // Expand the content to fill the available space.\n        flex: 1,\n        overflowWrap: \"break-word\",\n    },\n\n    accessory: {\n        // Use content width by default.\n        minWidth: \"auto\",\n        // Horizontal alignment of the accessory.\n        alignItems: \"center\",\n        // Vertical alignment.\n        alignSelf: \"center\",\n    },\n\n    accessoryRight: {\n        // The right accessory will have this color by default. Unless the\n        // accessory element overrides that color internally.\n        color: Color.offBlack64,\n    },\n\n    /**\n     * States\n     */\n    hovered: {\n        background: Color.offBlack8,\n    },\n\n    // Handling the focus ring internally because clickable doesn't support\n    // rounded focus ring.\n    focused: {\n        borderRadius: Spacing.xxxSmall_4,\n        outline: `solid ${Spacing.xxxxSmall_2}px ${Color.blue}`,\n        // The focus ring is not visible when there are stacked cells.\n        // Using outlineOffset to display the focus ring inside the cell.\n        outlineOffset: -Spacing.xxxxSmall_2,\n        // To hide the internal corners of the cell.\n        overflow: \"hidden\",\n    },\n\n    pressed: {\n        background: Color.offBlack16,\n    },\n\n    active: {\n        background: fade(Color.blue, 0.08),\n        color: Color.blue,\n    },\n\n    activeHovered: {\n        background: fade(Color.blue, 0.16),\n    },\n\n    activePressed: {\n        background: fade(Color.blue, 0.24),\n    },\n\n    disabled: {\n        color: Color.offBlack32,\n        \":hover\": {\n            cursor: \"not-allowed\",\n        },\n    },\n\n    accessoryActive: {\n        color: Color.blue,\n    },\n\n    accessoryDisabled: {\n        color: Color.offBlack,\n        opacity: 0.32,\n    },\n});\n\nexport default CellCore;\n","import * as React from \"react\";\n\nimport {LabelMedium} from \"@khanacademy/wonder-blocks-typography\";\n\nimport CellCore from \"./internal/cell-core\";\n\nimport type {CellProps} from \"../util/types\";\n\n/**\n * `CompactCell` is the simplest form of the Cell. It is a compacted-height Cell\n * with limited subviews and accessories. Typically they represent additional\n * info or selection lists. It has a minimum height of 48px and a non-bold\n * title. It does not have subtitles or a progress bar, and in general it has\n * less vertical space around text and accessories.\n *\n * ### Usage\n *\n * ```jsx\n * import {CompactCell} from \"@khanacademy/wonder-blocks-cell\";\n *\n * <CompactCell\n *  title=\"Compact cell\"\n *  rightAccessory={<Icon icon={icons.caretRight} size=\"medium\" />}\n * />\n * ```\n */\nconst CompactCell = function (props: CellProps): React.ReactElement {\n    const {title, ...coreProps} = props;\n\n    return (\n        <CellCore {...coreProps}>\n            {typeof title === \"string\" ? (\n                <LabelMedium>{title}</LabelMedium>\n            ) : (\n                title\n            )}\n        </CellCore>\n    );\n};\n\nexport default CompactCell;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {Strut} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {LabelSmall, LabelMedium} from \"@khanacademy/wonder-blocks-typography\";\n\nimport CellCore from \"./internal/cell-core\";\nimport {CellMeasurements} from \"./internal/common\";\n\nimport type {CellProps, TypographyText} from \"../util/types\";\n\ntype SubtitleProps = {\n    subtitle?: TypographyText;\n    /**\n     * If true, the subtitle will use the alpha color defined in the parent\n     * component/element.\n     */\n    disabled?: boolean;\n};\n\nconst Subtitle = ({subtitle, disabled}: SubtitleProps): React.ReactElement => {\n    if (!subtitle) {\n        // @ts-expect-error [FEI-5019] - TS2322 - Type 'null' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n        return null;\n    }\n\n    if (typeof subtitle === \"string\") {\n        return (\n            <LabelSmall style={!disabled && styles.subtitle}>\n                {subtitle}\n            </LabelSmall>\n        );\n    }\n\n    return subtitle;\n};\n\ntype DetailCellProps = CellProps & {\n    /**\n     * You can either provide a string or a custom node Typography element (or\n     * nothing at all). Both a string or a custom node Typography element will\n     * occupy the “Subtitle1” area of the Cell.\n     */\n    subtitle1?: TypographyText;\n    /**\n     * You can either provide a string or a custom node Typography element (or\n     * nothing at all). Both a string or a custom node Typography element will\n     * occupy the “Subtitle2” area of the Cell.\n     */\n    subtitle2?: TypographyText;\n};\n\n/**\n * This is a variant of CompactCell that allows adding subtitles, before and\n * after the cell title. They typically represent an item that can be\n * clicked/tapped to view more complex details. They vary in height depending on\n * the presence or absence of subtitles, and they allow for a wide range of\n * functionality depending on which accessories are active.\n *\n * ### Usage\n *\n * ```jsx\n * import {DetailCell} from \"@khanacademy/wonder-blocks-cell\";\n *\n * <DetailCell\n *  leftAccessory={<Icon icon={icons.contentVideo} size=\"medium\" />}\n *  subtitle1=\"Subtitle 1\"\n *  title=\"Detail cell\"\n *  subtitle1=\"Subtitle 2\"\n *  rightAccessory={<Icon icon={icons.caretRight} size=\"medium\" />}\n * />\n * ```\n */\nconst DetailCell = function (props: DetailCellProps): React.ReactElement {\n    const {title, subtitle1, subtitle2, ...coreProps} = props;\n\n    return (\n        <CellCore {...coreProps} innerStyle={styles.innerWrapper}>\n            <Subtitle subtitle={subtitle1} disabled={coreProps.disabled} />\n            {subtitle1 && <Strut size={Spacing.xxxxSmall_2} />}\n            {typeof title === \"string\" ? (\n                <LabelMedium>{title}</LabelMedium>\n            ) : (\n                title\n            )}\n            {/* Add a vertical spacing between the title and the subtitle */}\n            {subtitle2 && <Strut size={Spacing.xxxxSmall_2} />}\n            <Subtitle subtitle={subtitle2} disabled={coreProps.disabled} />\n        </CellCore>\n    );\n};\n\nconst styles = StyleSheet.create({\n    subtitle: {\n        color: Color.offBlack64,\n    },\n\n    // This is to override the default padding of the CellCore innerWrapper.\n    innerWrapper: {\n        padding: `${CellMeasurements.detailCellPadding.paddingVertical}px ${CellMeasurements.detailCellPadding.paddingHorizontal}px`,\n    },\n});\n\nexport default DetailCell;\n","import * as React from \"react\";\nimport type {InputType} from \"@storybook/csf\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport Icon, {icons} from \"@khanacademy/wonder-blocks-icon\";\nimport {LabelSmall, LabelXSmall} from \"@khanacademy/wonder-blocks-typography\";\n\n/**\n * Some pre-defined accessory examples to use in our stories.\n */\nexport const AccessoryMappings = {\n    withContentArticle: (\n        <Icon icon={icons.contentArticle} size=\"medium\" />\n    ) as React.ReactElement<React.ComponentProps<typeof Icon>>,\n    withContentVideo: (\n        <Icon icon={icons.contentVideo} size=\"medium\" />\n    ) as React.ReactElement<React.ComponentProps<typeof Icon>>,\n    withCaret: (\n        <Icon icon={icons.caretRight} size=\"medium\" />\n    ) as React.ReactElement<React.ComponentProps<typeof Icon>>,\n    withText: (<LabelSmall>26.3 GB</LabelSmall>) as React.ReactElement<\n        React.ComponentProps<typeof LabelSmall>\n    >,\n    withIconText: (\n        <View style={{alignItems: \"center\"}}>\n            <Icon icon={icons.info} size=\"small\" />\n            <LabelXSmall>Info</LabelXSmall>\n        </View>\n    ) as React.ReactElement<React.ComponentProps<typeof View>>,\n    withImage: (\n        <img src=\"./avatar.png\" alt=\"ItemAvatar\" width={48} height={48} />\n    ) as React.ReactElement<React.ComponentProps<\"img\">>,\n} as const;\n\nexport default {\n    title: {\n        description:\n            \"The title / main content of the cell. You can either provide a string or a Typography component. If a string is provided, typography defaults to `LabelLarge`.\",\n        type: {\n            name: \"union\",\n            value: [\n                {name: \"string\"},\n                {name: \"other\", value: \"React.ReactElement<Typography>\"},\n            ],\n            required: true,\n        },\n        table: {\n            type: {\n                summary: \"TypographyText\",\n                detail: \"string | React.Element<Typography>\",\n            },\n        },\n    },\n    leftAccessory: {\n        description: `If provided, this adds a left accessory to the cell. Left Accessories can be defined using WB components such as Icon, IconButton, or it can even be used for a custom node/component if needed. What ever is passed in will occupy the \"LeftAccessory” area of the Cell.`,\n        control: {type: \"select\"},\n        options: Object.keys(AccessoryMappings) as Array<React.ReactNode>,\n        mapping: AccessoryMappings,\n        table: {\n            category: \"Layout\",\n            type: {\n                summary: \"React.Node\",\n                detail: \"By default it uses a free width and its default alignment is center (for both vertical and horizontal).\",\n            },\n        },\n    },\n    leftAccessoryStyle: {\n        description: `Optional custom styles applied to the leftAccessory wrapper. For example, it can be used to set a custom minWidth or a custom alignment.`,\n        table: {\n            category: \"Styling\",\n            type: {\n                summary: \"AccessoryStyle\",\n                detail: \"NOTE: leftAccessoryStyle can only be used if leftAccessory is set.\",\n            },\n        },\n    },\n    rightAccessory: {\n        description: `If provided, this adds a right accessory to the cell. Right Accessories can be defined using WB components such as Icon, IconButton, or it can even be used for a custom node/component if needed. What ever is passed in will occupy the “RightAccessory” area of the Cell.`,\n        control: {type: \"select\"},\n        options: Object.keys(AccessoryMappings) as Array<React.ReactNode>,\n        mapping: AccessoryMappings,\n        table: {\n            category: \"Layout\",\n            type: {\n                summary: \"React.Node\",\n                detail: \"By default it uses a free width and its default alignment is center (for both vertical and horizontal).\",\n            },\n        },\n    },\n    rightAccessoryStyle: {\n        description: `Optional custom styles applied to the rightAccessory wrapper. For example, it can be used to set a custom minWidth or a custom alignment.`,\n        table: {\n            category: \"Styling\",\n            type: {\n                summary: \"AccessoryStyle\",\n                detail: \"NOTE: rightAccessoryStyle can only be used if rightAccessory is set.\",\n            },\n        },\n    },\n    horizontalRule: {\n        description:\n            \"Adds a horizontal rule at the bottom of the cell that can be used to separate cells within groups such as lists. Defaults to `inset`.\",\n        defaultValue: \"inset\",\n        options: [\"inset\", \"full-width\", \"none\"],\n        control: {type: \"select\"},\n        table: {\n            category: \"Layout\",\n            type: {\n                summary: \"inset | full-width | none\",\n            },\n        },\n    },\n    style: {\n        description: \"Optional custom styles.\",\n        control: {type: \"object\"},\n        table: {\n            category: \"Styling\",\n            type: {\n                summary: \"StyleType\",\n            },\n        },\n    },\n    testId: {\n        description: \"Test ID used for e2e testing.\",\n        control: {type: \"text\"},\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n    },\n    href: {\n        description:\n            \"Optional href which Cell should direct to, uses client-side routing by default if react-router is present.\",\n        control: {type: \"text\"},\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"string\",\n            },\n        },\n    },\n    onClick: {\n        action: \"clicked\",\n        description: `Called when the cell is clicked.\n        If not provided, the Cell can’t be hovered and/or pressed (highlighted on\n    hover).\n        `,\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(e: SyntheticEvent<>) => mixed\",\n            },\n        },\n    },\n    disabled: {\n        description: \"Whether the cell is disabled.\",\n        control: {\n            type: \"boolean\",\n        },\n        defaultValue: false,\n        table: {\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    active: {\n        description: \"Whether the cell is active (or currently selected).\",\n        control: {\n            type: \"boolean\",\n        },\n        defaultValue: false,\n        table: {\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    /**\n     * Accessibility\n     */\n    ariaLabel: {\n        name: \"aria-label\",\n        control: {\n            type: \"string\",\n        },\n        description: \"Used to announce the cell's content to screen readers.\",\n        table: {\n            category: \"Accessibility\",\n            type: {\n                summary: \"string\",\n                detail: `aria-label should be specially used when the cell is pressable so screen readers can announce the link when the user is focused on it.`,\n            },\n        },\n    },\n} satisfies Record<string, InputType>;\n"],"names":["CellMeasurements","Spacing","getHorizontalRuleStyles","horizontalRule","styles","StyleSheet","Color","LeftAccessory","leftAccessory","leftAccessoryStyle","disabled","jsxs","Fragment","jsx","View","Strut","RightAccessory","rightAccessory","rightAccessoryStyle","active","CellCore","props","children","href","onClick","style","testId","ariaLabel","innerStyle","target","renderCell","eventState","horizontalRuleStyles","Clickable","fade","CompactCell","title","coreProps","LabelMedium","CompactCell$1","Subtitle","subtitle","LabelSmall","DetailCell","subtitle1","subtitle2","DetailCell$1","AccessoryMappings","Icon","icons.contentArticle","icons.contentVideo","icons.caretRight","icons.info","LabelXSmall","CompactCellArgTypes"],"mappings":"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"}