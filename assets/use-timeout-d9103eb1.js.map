{"version":3,"file":"use-timeout-d9103eb1.js","sources":["../../packages/wonder-blocks-timing/src/hooks/use-timeout.ts"],"sourcesContent":["import {useEffect} from \"react\";\n\nimport {useUpdatingRef} from \"./internal/use-updating-ref\";\n\n/**\n * A simple hook for using `setTimeout`.\n *\n * @param action called after `timeoutMs` when `active` is true\n * @param timeoutMs the duration after which `action` is called\n * @param active whether or not the interval is active\n */\nexport function useTimeout(\n    action: () => unknown,\n    timeoutMs: number,\n    active: boolean,\n) {\n    // We using a ref instead of a callback for `action` to avoid resetting\n    // the interval whenever the `action` changes.\n    const actionRef = useUpdatingRef(action);\n\n    useEffect(() => {\n        if (active) {\n            const timeoutId = setTimeout(() => {\n                actionRef.current();\n            }, timeoutMs);\n\n            return () => {\n                clearTimeout(timeoutId);\n            };\n        }\n        // actionRef isn't actually required, but react-hooks/exhaustive-deps\n        // doesn't recognize it as a ref and thus complains if it isn't in the\n        // deps list.  It isn't a big deal though since the value ofactionRef\n        // never changes (only its contents do).\n    }, [timeoutMs, active, actionRef]);\n}\n"],"names":["useTimeout","action","timeoutMs","active","actionRef","useUpdatingRef","useEffect","timeoutId"],"mappings":"2FAWgB,SAAAA,EACZC,EACAC,EACAC,EACF,CAGQ,MAAAC,EAAYC,EAAeJ,CAAM,EAEvCK,EAAAA,UAAU,IAAM,CACZ,GAAIH,EAAQ,CACF,MAAAI,EAAY,WAAW,IAAM,CAC/BH,EAAU,QAAQ,GACnBF,CAAS,EAEZ,MAAO,IAAM,CACT,aAAaK,CAAS,CAAA,CAE9B,CAKD,EAAA,CAACL,EAAWC,EAAQC,CAAS,CAAC,CACrC"}