import{a as m}from"./jsx-runtime-309e447d.js";import{r as l}from"./index-9f32f44c.js";import{S as a}from"./index-f641b98f.js";import{V as p,l as S}from"./render-state-root-891c0d56.js";const u=a.large_24,h={small:{query:"(max-width: 767px)",totalColumns:4,gutterWidth:a.medium_16,marginWidth:a.medium_16},medium:{query:"(min-width: 768px) and (max-width: 1023px)",totalColumns:8,gutterWidth:a.xLarge_32,marginWidth:a.large_24},large:{query:"(min-width: 1024px)",totalColumns:12,gutterWidth:a.xLarge_32,marginWidth:u,maxWidth:1120+u*2}},f={large:{query:"(min-width: 1px)",totalColumns:12,gutterWidth:a.xLarge_32,marginWidth:a.medium_16}},_={small:{query:"(max-width: 767px)",totalColumns:4,gutterWidth:a.medium_16,marginWidth:a.medium_16},large:{query:"(min-width: 768px)",totalColumns:12,gutterWidth:a.xLarge_32,marginWidth:a.xxLarge_48}},x={ssrSize:"large",mediaSpec:h},y=l.createContext(x);y.displayName="MediaLayoutContext";const w=y,b=[...Object.values(h).map(t=>t.query),...Object.values(f).map(t=>t.query),...Object.values(_).map(t=>t.query)],d={},L="large";class M extends l.Component{constructor(r){super(r),this.state={size:void 0},this.cleanupThunks=[]}componentDidMount(){const r=Object.entries(this.props.mediaSpec);for(const[e,n]of r){const i=d[n.query];if(!i)continue;const o=s=>{s.matches&&this.setState({size:e})};i.addListener(o),this.cleanupThunks.push(()=>i.removeListener(o))}}componentWillUnmount(){this.cleanupThunks.forEach(r=>r())}getCurrentSize(r){if(this.state.size)return this.state.size;{const e=Object.entries(this.props.mediaSpec);for(const[n,i]of e)if(d[i.query].matches)return n}return L}isServerSide(){return typeof window>"u"||!window.matchMedia}getMockStyleSheet(r){const{styleSheets:e}=this.props,n={};if(!e)return n;for(const i of Object.keys(e)){const o=e[i];if(o)for(const s of Object.keys(o))Object.prototype.hasOwnProperty.call(n,s)||(n[s]=[e.all&&e.all[s],r==="small"&&[e.mdOrSmaller&&e.mdOrSmaller[s],e.small&&e.small[s]],r==="medium"&&[e.mdOrSmaller&&e.mdOrSmaller[s],e.mdOrLarger&&e.mdOrLarger[s],e.medium&&e.medium[s]],r==="large"&&[e.mdOrLarger&&e.mdOrLarger[s],e.large&&e.large[s]]])}return n}render(){const{children:r,mediaSpec:e,ssrSize:n,overrideSize:i}=this.props;if(!this.isServerSide())for(const c of b.filter(g=>!d[g]))d[c]=window.matchMedia(c);const o=i||this.isServerSide()&&n||this.getCurrentSize(e),s=this.getMockStyleSheet(o);return r({mediaSize:o,mediaSpec:e,styles:s})}}class E extends l.Component{render(){return m(w.Consumer,{children:({overrideSize:r,ssrSize:e,mediaSpec:n})=>m(M,{...this.props,overrideSize:r,ssrSize:e,mediaSpec:n})})}}try{medialayout.displayName="medialayout",medialayout.__docgenInfo={description:'***NOTE: The MediaLayout component is being deprecated. Do not use this!!***\n\nMediaLayout is a container component that accepts a `styleSheets` object,\nwhose keys are media sizes. It listens for changes to the current media\nsize and passes the current `mediaSize`, `mediaSpec`, and `styles` to\n`children`, which is a render function taking those three values as an\nobject.\n\nValid keys for the `styleSheets` object are (in order of precedence):\n- `small`, `medium`, `large`\n- `mdOrSmaller`, `mdOrLarger`\n- `all`\n\n`MediaLayout` will merge style rules from multiple styles that match the\ncurrent media query, e.g. `"(min-width: 1024px)"`.\n\nThe `mediaSpec` is an object with one or more of the following keys:\n`small`, `medium`, or `large`. Each value contains the following data:\n- `query: string` e.g. "(min-width: 1024px)"\n- `totalColumns: number`\n- `gutterWidth: number`\n- `marginWidth: number`\n- `maxWidth: number`',displayName:"medialayout",props:{children:{defaultValue:null,description:`The contents to display. Alternatively, a function can be specified
that takes three arguments and should return some nodes to display.

  - mediaSize: The current size of the viewport (small/medium/large)
  - mediaSpec: The current spec being used to manage the selection of
               the mediaSize.
  - styles: An Aphrodite stylesheet representing the current
                 stylesheet for this mediaSize (as specified in the
                 styleSheets prop).`,name:"children",required:!1,type:{name:"((arg1: { mediaSize: MediaSize; mediaSpec: MediaSpec; styles: MockStyleSheet; }) => ReactNode) & ReactNode"}},styleSheets:{defaultValue:null,description:`Aphrodite stylesheets to pass through to the styles prop. The
stylesheets to render is based on the media size. "all" is always
rendered.`,name:"styleSheets",required:!1,type:{name:"{ all?: any; mdOrLarger?: any; mdOrSmaller?: any; small?: any; medium?: any; large?: any; }"}}}}}catch{}class A extends l.Component{render(){const{style:r}=this.props;return m(p,{"aria-hidden":"true",style:[q.grow,r]})}}const q=S.StyleSheet.create({grow:{flexGrow:1}});try{spring.displayName="spring",spring.__docgenInfo={description:`Expands to fill space between sibling components.

Assumes parent is a View.`,displayName:"spring",props:{style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"any"}}}}}catch{}class j extends l.Component{render(){const{size:r,style:e}=this.props;return m(p,{"aria-hidden":"true",style:[O(r),e]})}}const O=t=>({width:t,MsFlexBasis:t,MsFlexPreferredSize:t,WebkitFlexBasis:t,flexBasis:t,flexShrink:0});try{strut.displayName="strut",strut.__docgenInfo={description:`A component for inserting fixed space between components.

Assumes parent is a View.`,displayName:"strut",props:{size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"any"}}}}}catch{}export{E as M,j as S,A as a,w as b,_ as c};
//# sourceMappingURL=strut-c6011196.js.map
