import{M as b,C as s,b as a}from"./index-35e12253.js";import{l as w,V as o}from"./render-state-root-891c0d56.js";import{B as n}from"./button-b2794e32.js";import"./index-9f32f44c.js";import{a as t,j as r,F as g}from"./jsx-runtime-309e447d.js";import{u as h}from"./index-506666d7.js";import"./iframe-97aa1d91.js";import"../sb-preview/runtime.js";import"./chunk-6P7RB4HF-938b085e.js";import"./index-d475d2ea.js";import"./_commonjsHelpers-de833af9.js";import"./index-9c2d1831.js";import"./inheritsLoose-9eefaa95.js";import"./assertThisInitialized-081f9914.js";import"./index-4733a090.js";import"./_baseIsEqual-976d9d82.js";import"./uniq-944679ca.js";import"./index-356e4a49.js";import"./clickable-8a7f284d.js";import"./index-8d47fad6.js";import"./index-f641b98f.js";import"./footnote-761d2bcc.js";import"./icon-a4f17d53.js";const i=w.StyleSheet.create({column:{alignItems:"flex-start"},row:{flexDirection:"row"},gap:{height:16},button:{marginRight:10},buttonMinWidth:{marginRight:10,minWidth:144}});function d(l){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},h(),l.components);return r(g,{children:[t(b,{title:"Button / Best practices",component:n,parameters:{previewTabs:{canvas:{hidden:!0}},viewMode:"docs",chromatic:{disableSnapshot:!0}}}),`
`,t(e.h2,{id:"best-practices",children:"Best Practices"}),`
`,t(e.h3,{id:"layout",children:"Layout"}),`
`,t(e.p,{children:`In vertical layouts, buttons will stretch horizontally to fill the available
space. This is probably not what you want unless you're on a very narrow
screen.`}),`
`,t(s,{children:t(a,{name:"Full-bleed button",children:t(o,{children:t(n,{children:"Label"})})})}),`
`,t(e.p,{children:"This can be corrected by applying appropriate flex styles to the container."}),`
`,t(s,{children:t(a,{name:"Buttons in rows",children:r(o,{children:[t(o,{style:i.row,children:t(n,{children:"Button in a row"})}),t(o,{style:i.gap}),t(o,{style:i.column,children:t(n,{children:"Button in a column"})})]})})}),`
`,t(e.h3,{id:"usign-minwidth-for-internationalization",children:"Usign minWidth for internationalization"}),`
`,r(e.p,{children:["Layouts often specify a specific width of button. When implementing such designs use ",t(e.code,{children:"minWidth"})," instead of ",t(e.code,{children:"width"}),". ",t(e.code,{children:"minWidth"})," allows the button to resize to fit the content whereas ",t(e.code,{children:"width"}),' does not. This is important for international sites since sometimes strings for UI elements can be much longer in other languages. Both of the buttons below have a "natural" width of ',t(e.code,{children:"144px"}),". The one on the right is wider but it accommodates the full string instead of wrapping it."]}),`
`,t(s,{children:t(a,{name:"Using minWidth",children:r(o,{style:i.row,children:[t(n,{style:i.buttonMinWidth,kind:"secondary",children:t(e.p,{children:"label"})}),t(n,{style:i.buttonMinWidth,children:t(e.p,{children:"label in a different language"})})]})})}),`
`,t(e.h3,{id:"truncating-text",children:"Truncating text"}),`
`,t(e.p,{children:`If the parent container of the button doesn't have enough room to accommodate
the width of the button, the text will truncate. This should ideally never
happen, but it's sometimes a necessary fallback.`}),`
`,t(s,{children:t(a,{name:"Truncating text",children:r(o,{style:{flexDirection:"row",width:300},children:[t(n,{style:i.buttonMinWidth,kind:"secondary",children:t(e.p,{children:"label"})}),t(n,{style:i.buttonMinWidth,children:t(e.p,{children:"label too long for the parent container"})})]})})})]})}function f(l={}){const{wrapper:e}=Object.assign({},h(),l.components);return e?t(e,{...l,children:t(d,{...l})}):d(l)}const u=()=>t(o,{children:t(n,{children:"Label"})});u.storyName="Full-bleed button";u.parameters={storySource:{source:'<View><Button>{"Label"}</Button></View>'}};const p=()=>r(o,{children:[t(o,{style:i.row,children:t(n,{children:"Button in a row"})}),t(o,{style:i.gap}),t(o,{style:i.column,children:t(n,{children:"Button in a column"})})]});p.storyName="Buttons in rows";p.parameters={storySource:{source:'<View><View style={styles.row}><Button>{"Button in a row"}</Button></View><View style={styles.gap} /><View style={styles.column}><Button>{"Button in a column"}</Button></View></View>'}};const m=()=>r(o,{style:i.row,children:[t(n,{style:i.buttonMinWidth,kind:"secondary",children:t("p",{children:"label"})}),t(n,{style:i.buttonMinWidth,children:t("p",{children:"label in a different language"})})]});m.storyName="Using minWidth";m.parameters={storySource:{source:'<View style={styles.row}><Button style={styles.buttonMinWidth} kind="secondary"><p>{"label"}</p></Button><Button style={styles.buttonMinWidth}><p>{"label in a different language"}</p></Button></View>'}};const y=()=>r(o,{style:{flexDirection:"row",width:300},children:[t(n,{style:i.buttonMinWidth,kind:"secondary",children:t("p",{children:"label"})}),t(n,{style:i.buttonMinWidth,children:t("p",{children:"label too long for the parent container"})})]});y.storyName="Truncating text";y.parameters={storySource:{source:`<View style={{
  flexDirection: "row",
  width: 300
}}><Button style={styles.buttonMinWidth} kind="secondary"><p>{"label"}</p></Button><Button style={styles.buttonMinWidth}><p>{"label too long for the parent container"}</p></Button></View>`}};const c={title:"Button / Best practices",parameters:{previewTabs:{canvas:{hidden:!0}},viewMode:"docs",chromatic:{disableSnapshot:!0}},component:n,tags:["stories-mdx"],includeStories:["fullBleedButton","buttonsInRows","usingMinWidth","truncatingText"]};c.parameters=c.parameters||{};c.parameters.docs={...c.parameters.docs||{},page:f};const P=["styles","fullBleedButton","buttonsInRows","usingMinWidth","truncatingText"];export{P as __namedExportsOrder,p as buttonsInRows,c as default,u as fullBleedButton,i as styles,y as truncatingText,m as usingMinWidth};
//# sourceMappingURL=best-practices.stories-e3219790.js.map
