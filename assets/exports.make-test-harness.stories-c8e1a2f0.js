import{M as p}from"./index-35e12253.js";import{a as t,j as n,F as i}from"./jsx-runtime-309e447d.js";import{u as o}from"./index-506666d7.js";import"./iframe-97aa1d91.js";import"../sb-preview/runtime.js";import"./chunk-6P7RB4HF-938b085e.js";import"./index-d475d2ea.js";import"./index-9f32f44c.js";import"./_commonjsHelpers-de833af9.js";import"./index-9c2d1831.js";import"./inheritsLoose-9eefaa95.js";import"./assertThisInitialized-081f9914.js";import"./index-4733a090.js";import"./_baseIsEqual-976d9d82.js";import"./uniq-944679ca.js";import"./index-356e4a49.js";function r(s){const e=Object.assign({h1:"h1",pre:"pre",code:"code",p:"p",a:"a"},o(),s.components);return n(i,{children:[t(p,{title:"Testing / Test Harness / Exports / makeTestHarness()",parameters:{chromatic:{disableSnapshot:!0}}}),`
`,t(e.h1,{id:"maketestharness",children:"makeTestHarness()"}),`
`,t(e.pre,{children:t(e.code,{className:"language-ts",children:`makeTestHarness<TAdapters: TestHarnessAdapters>(
    adapters: TAdapters,
    defaultConfigs: TestHarnessConfigs<TAdapters>,
): (<-TProps, +Instance = mixed>(
    Component: React.AbstractComponent<TProps, Instance>,
    configs?: $Shape<TestHarnessConfigs<TAdapters>>,
) => React.AbstractComponent<TProps, Instance>);
`})}),`
`,n(e.p,{children:["This method takes a set of adapters (such as ",t(e.a,{href:"/docs/testing-test-harness-exports-harnessadapters--page",children:t(e.code,{children:"harnessAdapters.DefaultAdapters"})}),") and a set of default configurations for those adapters (such as ",t(e.a,{href:"/docs/testing-test-harness-exports-harnessadapters--page",children:t(e.code,{children:"harnessAdapters.DefaultConfigs"})}),"), and returns a function that can be called to create a component that applys those adapters with those default configs, or overrides to those configs, around another component."]}),`
`,t(e.p,{children:"The returned method will ensure refs are forwarded to the harnessed component, and the component the method returns will have the same props as the component it is harnessing."}),`
`,n(e.p,{children:["The harnessed component can be used in unit tests, such as in Jest, to reduce boilerplate needed to setup the test case. It can also be used as a a wrapper component when defining a fixture for a component in the Wonder Blocks Testing ",t(e.a,{href:"/docs/testing-fixtures-overview--page",children:"Fixtures framework"}),"."]})]})}function c(s={}){const{wrapper:e}=Object.assign({},o(),s.components);return e?t(e,{...s,children:t(r,{...s})}):r(s)}const d=()=>{throw new Error("Docs-only story")};d.parameters={docsOnly:!0};const a={title:"Testing / Test Harness / Exports / makeTestHarness()",parameters:{chromatic:{disableSnapshot:!0}},tags:["stories-mdx"],includeStories:["__page"]};a.parameters=a.parameters||{};a.parameters.docs={...a.parameters.docs||{},page:c};const D=["__page"];export{D as __namedExportsOrder,d as __page,a as default};
//# sourceMappingURL=exports.make-test-harness.stories-c8e1a2f0.js.map
