{"version":3,"file":"strut-c6011196.js","sources":["../../packages/wonder-blocks-layout/src/util/specs.ts","../../packages/wonder-blocks-layout/src/components/media-layout-context.ts","../../packages/wonder-blocks-layout/src/components/media-layout.tsx","../../packages/wonder-blocks-layout/src/components/spring.tsx","../../packages/wonder-blocks-layout/src/components/strut.tsx"],"sourcesContent":["import Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {MediaSize, MediaSpec} from \"./types\";\n\n// All possible valid media sizes\nexport const VALID_MEDIA_SIZES: Array<MediaSize> = [\"small\", \"medium\", \"large\"];\n\nconst mediaDefaultSpecLargeMarginWidth = Spacing.large_24;\n\n// The default spec for media layout, currently available in\n// three different settings (roughly mobile, tablet, and desktop).\nexport const MEDIA_DEFAULT_SPEC: MediaSpec = {\n    small: {\n        query: \"(max-width: 767px)\",\n        totalColumns: 4,\n        gutterWidth: Spacing.medium_16,\n        marginWidth: Spacing.medium_16,\n    },\n    medium: {\n        query: \"(min-width: 768px) and (max-width: 1023px)\",\n        totalColumns: 8,\n        gutterWidth: Spacing.xLarge_32,\n        marginWidth: Spacing.large_24,\n    },\n    large: {\n        query: \"(min-width: 1024px)\",\n        totalColumns: 12,\n        gutterWidth: Spacing.xLarge_32,\n        marginWidth: mediaDefaultSpecLargeMarginWidth,\n        maxWidth: 1120 + mediaDefaultSpecLargeMarginWidth * 2,\n    },\n};\n\n// Used for internal tools\nexport const MEDIA_INTERNAL_SPEC: MediaSpec = {\n    large: {\n        query: \"(min-width: 1px)\",\n        totalColumns: 12,\n        gutterWidth: Spacing.xLarge_32,\n        marginWidth: Spacing.medium_16,\n    },\n};\n\n// The default used for modals\nexport const MEDIA_MODAL_SPEC: MediaSpec = {\n    small: {\n        query: \"(max-width: 767px)\",\n        totalColumns: 4,\n        gutterWidth: Spacing.medium_16,\n        marginWidth: Spacing.medium_16,\n    },\n    large: {\n        query: \"(min-width: 768px)\",\n        totalColumns: 12,\n        gutterWidth: Spacing.xLarge_32,\n        marginWidth: Spacing.xxLarge_48,\n    },\n};\n","import * as React from \"react\";\n\nimport {MEDIA_DEFAULT_SPEC} from \"../util/specs\";\nimport type {MediaSize, MediaSpec} from \"../util/types\";\n\nexport type Context = {\n    /**\n     * Force the MediaLayout to be a particular size (ignoring the actual\n     * dimensions of the viewport).\n     */\n    overrideSize?: MediaSize;\n    /**\n     * Set the size of the MediaLayout to be rendered when doing SSR\n     * (Server-Side Rendering) of the component.  Defaults to \"large\".\n     */\n    ssrSize: MediaSize;\n    /**\n     * If you wish to use a different set of layout sizes you can specify them as\n     * part of the `mediaSpec` property. The Core package exports a couple of the\n     * most commonly used ones:\n     *\n     *  **Default Layout Spec (`MEDIA_DEFAULT_SPEC`)**\n     *\n     * | Size   | Columns | Gutter | Margin | Breakpoint                                                                                                                         |\n     * | ------ | ------- | ------ | ------ | ---------------------------------------------------------------------------------------------------------------------------------- |\n     * | small  | 4       | 16px   | 16px   | `max-width: 767px`                                                                                                                 |\n     * | medium | 8       | 32px   | 24px   | `min-width: 768px and max-width: 1023px`                                                                                           |\n     * | large  | 12      | 32px   | 24px   | `min-width: 1024px` (maximum content width: `1120px`, after which the margins will continue to expand and content remain centered) |\n     *\n     * Additionally, the following layout size specs are also available:\n     *\n     * **Internal Tools (`MEDIA_INTERNAL_SPEC`)**\n     *\n     * | Size  | Columns | Gutter | Margin | Breakpoint                                   |\n     * | ----- | ------- | ------ | ------ | -------------------------------------------- |\n     * | large | 12      | 32px   | 16px   | `min-width: 1px` (No maximum content width.) |\n     *\n     * **12-Column Modal (`MEDIA_MODAL_SPEC`)**\n     *\n     * | Size  | Columns | Gutter | Margin | Breakpoint                                     |\n     * | ----- | ------- | ------ | ------ | ---------------------------------------------- |\n     * | small | 4       | 16px   | 16px   | `max-width: 767px`                             |\n     * | large | 12      | 32px   | 64px   | `min-width: 768px` (No maximum content width.) |\n     */\n    mediaSpec: MediaSpec;\n};\n\nconst defaultContext: Context = {\n    ssrSize: \"large\",\n    mediaSpec: MEDIA_DEFAULT_SPEC,\n};\n\nconst MediaLayoutContext = React.createContext<Context>(\n    defaultContext,\n) as React.Context<Context>;\nMediaLayoutContext.displayName = \"MediaLayoutContext\";\n\nexport default MediaLayoutContext;\n","import * as React from \"react\";\nimport type {StyleDeclaration} from \"aphrodite\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport MediaLayoutContext from \"./media-layout-context\";\nimport type {MediaSize, MediaSpec} from \"../util/types\";\nimport type {Context} from \"./media-layout-context\";\nimport {\n    MEDIA_DEFAULT_SPEC,\n    MEDIA_INTERNAL_SPEC,\n    MEDIA_MODAL_SPEC,\n} from \"../util/specs\";\n\nconst queries = [\n    ...Object.values(MEDIA_DEFAULT_SPEC).map((spec: any) => spec.query),\n    ...Object.values(MEDIA_INTERNAL_SPEC).map((spec: any) => spec.query),\n    ...Object.values(MEDIA_MODAL_SPEC).map((spec: any) => spec.query),\n];\n\nconst mediaQueryLists: {\n    [key: string]: MediaQueryList;\n} = {};\n\nexport type MockStyleSheet = Record<string, StyleType>;\n\ntype Props = {\n    /**\n     * The contents to display. Alternatively, a function can be specified\n     * that takes three arguments and should return some nodes to display.\n     *\n     *   - mediaSize: The current size of the viewport (small/medium/large)\n     *   - mediaSpec: The current spec being used to manage the selection of\n     *                the mediaSize.\n     *   - styles: An Aphrodite stylesheet representing the current\n     *                  stylesheet for this mediaSize (as specified in the\n     *                  styleSheets prop).\n     */\n    children: (arg1: {\n        mediaSize: MediaSize;\n        mediaSpec: MediaSpec;\n        styles: MockStyleSheet;\n    }) => React.ReactNode;\n    /**\n     * Aphrodite stylesheets to pass through to the styles prop. The\n     * stylesheets to render is based on the media size. \"all\" is always\n     * rendered.\n     */\n    styleSheets?: {\n        all?: StyleDeclaration;\n        mdOrLarger?: StyleDeclaration;\n        mdOrSmaller?: StyleDeclaration;\n        small?: StyleDeclaration;\n        medium?: StyleDeclaration;\n        large?: StyleDeclaration;\n    };\n};\n\ntype State = {\n    size?: MediaSize;\n};\n\n// If for some reason we're not able to resolve the current media size we\n// fall back to this state.\nconst DEFAULT_SIZE = \"large\";\n\ntype CombinedProps = Props & Context;\n\n/**\n * `MediaLayout` is responsible for changing the rendering of contents at\n * differently sized viewports.  `MediaLayoutContext.Provider` can be used\n * to specify different breakpoint configurations.  By default it uses\n * `MEDIA_DEFAULT_SPEC`.  See media-layout-context.js for additiional options.\n */\nclass MediaLayoutInternal extends React.Component<CombinedProps, State> {\n    // A collection of thunks that's used to clean up event listeners\n    // when the component is unmounted.\n    cleanupThunks: Array<() => void>;\n\n    constructor(props: CombinedProps) {\n        super(props);\n        this.state = {\n            size: undefined,\n        };\n        this.cleanupThunks = [];\n    }\n\n    componentDidMount() {\n        // TODO(WB-534): handle changes to mediaSpec prop\n        const entries: Array<\n            [\n                MediaSize,\n                {\n                    query: string;\n                },\n            ]\n        > = Object.entries(this.props.mediaSpec) as any;\n\n        for (const [size, spec] of entries) {\n            const mql = mediaQueryLists[spec.query];\n            // during SSR there are no MediaQueryLists\n            if (!mql) {\n                continue;\n            }\n            const listener = (e: MediaQueryListEvent) => {\n                if (e.matches) {\n                    this.setState({size});\n                }\n            };\n            mql.addListener(listener);\n            this.cleanupThunks.push(() => mql.removeListener(listener));\n        }\n    }\n\n    componentWillUnmount() {\n        // Remove our listeners.\n        this.cleanupThunks.forEach((cleaup) => cleaup());\n    }\n\n    getCurrentSize(spec: MediaSpec): MediaSize {\n        // If we have a state with the current size in it then we always want\n        // to use that. This will happen if the viewport changes sizes after\n        // we've already initialized.\n        if (this.state.size) {\n            return this.state.size;\n        } else {\n            const entries: Array<\n                [\n                    MediaSize,\n                    {\n                        query: string;\n                    },\n                ]\n            > = Object.entries(this.props.mediaSpec) as any;\n\n            for (const [size, spec] of entries) {\n                const mql = mediaQueryLists[spec.query];\n                if (mql.matches) {\n                    return size;\n                }\n            }\n        }\n\n        return DEFAULT_SIZE;\n    }\n\n    // We assume that we're running on the server (or, at least, an unsupported\n    // environment) if there is no window object or matchMedia function\n    // available.\n    isServerSide() {\n        return typeof window === \"undefined\" || !window.matchMedia;\n    }\n\n    // Generate a mock Aphrodite StyleSheet based upon the current mediaSize\n    // We do this by looking at all of the stylesheets specified in the\n    // styleSheets prop and then all of the individual styles. We merge the\n    // styles together\n    // TODO(WB-533): move to util.js to make it easier to test\n    getMockStyleSheet(mediaSize: MediaSize) {\n        const {styleSheets} = this.props;\n\n        const mockStyleSheet: MockStyleSheet = {};\n\n        // If no stylesheets were specified then we just return an empty object\n        if (!styleSheets) {\n            return mockStyleSheet;\n        }\n\n        // Go through all of the stylesheets that were specified\n        for (const styleSize of Object.keys(styleSheets)) {\n            // @ts-expect-error [FEI-5019] - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ all?: StyleDeclaration | undefined; mdOrLarger?: StyleDeclaration | undefined; mdOrSmaller?: StyleDeclaration | undefined; }'.\n            const styleSheet = styleSheets[styleSize];\n\n            if (!styleSheet) {\n                continue;\n            }\n\n            // And then through each key of each stylesheet\n            for (const name of Object.keys(styleSheet)) {\n                if (\n                    Object.prototype.hasOwnProperty.call(mockStyleSheet, name)\n                ) {\n                    continue;\n                }\n\n                // We create an entry that combines the values from all of\n                // the stylesheets together in least-specific to most-specific\n                // priority (thus small/medium/large styles will always have\n                // precedence over \"all\" or mdOrSmaller/mdOrLarger/etc.).\n                mockStyleSheet[name] = [\n                    styleSheets.all && styleSheets.all[name],\n                    mediaSize === \"small\" && [\n                        styleSheets.mdOrSmaller &&\n                            styleSheets.mdOrSmaller[name],\n                        styleSheets.small && styleSheets.small[name],\n                    ],\n                    mediaSize === \"medium\" && [\n                        styleSheets.mdOrSmaller &&\n                            styleSheets.mdOrSmaller[name],\n                        styleSheets.mdOrLarger && styleSheets.mdOrLarger[name],\n                        styleSheets.medium && styleSheets.medium[name],\n                    ],\n                    mediaSize === \"large\" && [\n                        styleSheets.mdOrLarger && styleSheets.mdOrLarger[name],\n                        styleSheets.large && styleSheets.large[name],\n                    ],\n                ];\n            }\n        }\n\n        return mockStyleSheet;\n    }\n\n    render(): React.ReactNode {\n        const {children, mediaSpec, ssrSize, overrideSize} = this.props;\n\n        // We need to create the MediaQueryLists during the first render in order\n        // to query whether any of them match.\n        if (!this.isServerSide()) {\n            for (const query of queries.filter(\n                (query) => !mediaQueryLists[query],\n            )) {\n                mediaQueryLists[query] = window.matchMedia(query);\n            }\n        }\n\n        // We need to figure out what the current media size is\n        // If an override has been specified, we use that.\n        // If we're rendering on the server then we use the default\n        // SSR rendering size.\n        // Otherwise we attempt to get the current size based on\n        // the current MediaSpec.\n        const mediaSize =\n            overrideSize ||\n            (this.isServerSide() && ssrSize) ||\n            this.getCurrentSize(mediaSpec);\n\n        // Generate a mock stylesheet\n        const styles = this.getMockStyleSheet(mediaSize);\n\n        return children({mediaSize, mediaSpec, styles});\n    }\n}\n\n/**\n * ***NOTE: The MediaLayout component is being deprecated. Do not use this!!***\n *\n * MediaLayout is a container component that accepts a `styleSheets` object,\n * whose keys are media sizes. It listens for changes to the current media\n * size and passes the current `mediaSize`, `mediaSpec`, and `styles` to\n * `children`, which is a render function taking those three values as an\n * object.\n *\n * Valid keys for the `styleSheets` object are (in order of precedence):\n * - `small`, `medium`, `large`\n * - `mdOrSmaller`, `mdOrLarger`\n * - `all`\n *\n * `MediaLayout` will merge style rules from multiple styles that match the\n * current media query, e.g. `\"(min-width: 1024px)\"`.\n *\n * The `mediaSpec` is an object with one or more of the following keys:\n * `small`, `medium`, or `large`. Each value contains the following data:\n * - `query: string` e.g. \"(min-width: 1024px)\"\n * - `totalColumns: number`\n * - `gutterWidth: number`\n * - `marginWidth: number`\n * - `maxWidth: number`\n */\nexport default class MediaLayout extends React.Component<Props> {\n    render(): React.ReactNode {\n        // We listen to the MediaLayoutContext to see what defaults we're\n        // being given (this can be overriden by wrapping this component in\n        // a MediaLayoutContext.Consumer).\n        return (\n            <MediaLayoutContext.Consumer>\n                {({overrideSize, ssrSize, mediaSpec}) => (\n                    <MediaLayoutInternal\n                        {...this.props}\n                        overrideSize={overrideSize}\n                        ssrSize={ssrSize}\n                        mediaSpec={mediaSpec}\n                    />\n                )}\n            </MediaLayoutContext.Consumer>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\ntype Props = {\n    style?: StyleType;\n};\n\n/**\n * Expands to fill space between sibling components.\n *\n * Assumes parent is a View.\n */\nexport default class Spring extends React.Component<Props> {\n    render(): React.ReactNode {\n        const {style} = this.props;\n        return <View aria-hidden=\"true\" style={[styles.grow, style]} />;\n    }\n}\n\nconst styles = StyleSheet.create({\n    grow: {\n        flexGrow: 1,\n    },\n});\n","import * as React from \"react\";\n\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\ntype Props = {\n    size: number;\n    style?: StyleType;\n};\n\n/**\n * A component for inserting fixed space between components.\n *\n * Assumes parent is a View.\n */\nexport default class Strut extends React.Component<Props> {\n    render(): React.ReactNode {\n        const {size, style} = this.props;\n        return <View aria-hidden=\"true\" style={[strutStyle(size), style]} />;\n    }\n}\n\nconst strutStyle = (size: number) => {\n    return {\n        width: size,\n        MsFlexBasis: size,\n        MsFlexPreferredSize: size,\n        WebkitFlexBasis: size,\n        flexBasis: size,\n        flexShrink: 0,\n    };\n};\n"],"names":["mediaDefaultSpecLargeMarginWidth","Spacing","MEDIA_DEFAULT_SPEC","MEDIA_INTERNAL_SPEC","MEDIA_MODAL_SPEC","defaultContext","MediaLayoutContext","React.createContext","MediaLayoutContext$1","queries","spec","mediaQueryLists","DEFAULT_SIZE","MediaLayoutInternal","React.Component","props","entries","size","mql","listener","e","cleaup","spec2","mediaSize","styleSheets","mockStyleSheet","styleSize","styleSheet","name","children","mediaSpec","ssrSize","overrideSize","query","query2","styles","MediaLayout","jsx","Spring","style","View","StyleSheet","Strut","strutStyle"],"mappings":"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"}