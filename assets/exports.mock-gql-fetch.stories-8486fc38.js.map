{"version":3,"file":"exports.mock-gql-fetch.stories-8486fc38.js","sources":["../../__docs__/wonder-blocks-testing/exports.mock-gql-fetch.stories.mdx"],"sourcesContent":["import {Meta} from \"@storybook/blocks\";\n\n<Meta\n    title=\"Testing / Mocking / Exports / mockGqlFetch()\"\n    parameters={{\n        chromatic: {\n            disableSnapshot: true,\n        },\n    }}\n/>\n\n# mockGqlFetch()\n\n```ts\nmockGqlFetch(): GqlFetchMockFn;\n```\n\nThe `mockGqlFetch` function provides an API to easily mock GraphQL responses for use with the [Wonder Blocks Data GraphQL API](/docs/data-graphql--page). It follows the similar patterns of `jest.fn()` and jest mocks whereby the returned value is both a proxy for the fetch function that is used by [`GqlRouter`](/docs/data-exports-gqlrouter--page) as well as an API for modifying the behavior of that function.\n\n# API\n\nBesides being a function that fits the [`GqlFetchFn`](/docs/data-types-gqlfetchfn--page) signature, the return value of `mockGqlFetch()` has an API to customize the behavior of that function. Used in conjunction with the [`RespondWith`](/docs/testing-mocking-exports-respondwith--page) API, this can create a variety of GraphQL responses for testing and stories.\n\n| Function            | Purpose                                                                                                                                            |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `mockOperation`     | When called, any GraphQL operation that matches the defined mock operation will respond with the given response.                                   |\n| `mockOperationOnce` | When called, the first GraphQL operation that matches the defined mock operation will respond with the given response. The mock is only used once. |\n\nBoth of these functions have the same signature:\n\n```ts\ntype GqlMockOperationFn = <\n    TData: {...},\n    TVariables: {...},\n    TContext: GqlContext,\n    TResponseData: GraphQLJson<TData>,\n>(\n    operation: GqlMockOperation<TData, TVariables, TContext>,\n    response: MockResponse<TResponseData>,\n) => GqlFetchMockFn;\n```\n\n# Operation Matching\n\nThe `matchOperation` parameter given to a `mockOperation` or `mockOperationOnce` function is a `GqlMockOperation` defining the actual GraphQL operation to be matched by the mock. The variables and context of the mocked operation change how the mock is matched against requests.\n\n```ts\ntype GqlMockOperation<\n    TData: {...},\n    TVariables: {...},\n    TContext: GqlContext,\n> = {|\n    operation: GqlOperation<TData, TVariables>,\n    variables?: TVariables,\n    context?: TContext,\n|};\n```\n\n1. When `matchOperation.operation` is present but `matchOperation.variables` and `matchOperation.context` are not, the mock will match any request for the\n   same operation, regardless of variables or context on the request.\n2. When `matchOperation.variables` is present but `matchOperation.context` is not, the mock will match any request for the same operation with matching variables, regardless of context on the request.\n3. When `matchOperation.context` is present but `matchOperation.variables` is not, the mock will match any request for the same operation with matching context, regardless of variables on the request.\n4. When `matchOperation.variables` and `matchOperation.context` are present, the mock will match any request for the same operation with matching variables and context.\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","MDXContent","MDXLayout","__page","componentMeta","__namedExportsOrder"],"mappings":"gjBAKA,SAASA,EAAkBC,EAAO,CAChC,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,IAAK,MACL,KAAM,OACN,EAAG,IACH,EAAG,IACH,MAAO,QACP,MAAO,QACP,GAAI,KACJ,GAAI,KACJ,MAAO,QACP,GAAI,KACJ,GAAI,KACJ,GAAI,IACL,EAAEC,EAAoB,EAAEF,EAAM,UAAU,EACzC,OAAoBG,EAAMC,EAAW,CACnC,SAAU,CAAcC,EAAKC,EAAM,CACjC,MAAO,+CACP,WAAY,CACV,UAAW,CACT,gBAAiB,EAClB,CACF,CACF,CAAA,EAAG;AAAA,EAAmBD,EAAKJ,EAAY,GAAI,CAC1C,GAAI,eACJ,SAAU,gBACX,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,IAAK,CAC3C,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,UAAW,cACX,SAAU;AAAA,CAClB,CAAO,CACF,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC,OAAqBI,EAAKJ,EAAY,KAAM,CACrD,SAAU,cACX,CAAA,EAAG,+EAA6FI,EAAKJ,EAAY,EAAG,CACnH,KAAM,2BACN,SAAU,gCACX,CAAA,EAAG,wCAAsDI,EAAKJ,EAAY,KAAM,CAC/E,SAAU,WACX,CAAA,EAAG,qGAAmHI,EAAKJ,EAAY,EAAG,CACzI,KAAM,qCACN,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,SAAU,WACpB,CAAS,CACF,CAAA,EAAG,iEAAiE,CACtE,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,GAAI,CAC1C,GAAI,MACJ,SAAU,KACX,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC,0CAAwDI,EAAKJ,EAAY,EAAG,CACrF,KAAM,oCACN,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,SAAU,YACpB,CAAS,CACF,CAAA,EAAG,mCAAiDI,EAAKJ,EAAY,KAAM,CAC1E,SAAU,gBACX,CAAA,EAAG,wFAAsGI,EAAKJ,EAAY,EAAG,CAC5H,KAAM,kDACN,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,SAAU,aACpB,CAAS,CACF,CAAA,EAAG,+EAA+E,CACpF,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,MAAO,CAC9C,SAAU,CAAcI,EAAKJ,EAAY,MAAO,CAC9C,SAAuBE,EAAMF,EAAY,GAAI,CAC3C,SAAU,CAAcI,EAAKJ,EAAY,GAAI,CAC3C,MAAO,OACP,SAAU,UACtB,CAAW,EAAgBI,EAAKJ,EAAY,GAAI,CACpC,MAAO,OACP,SAAU,SACtB,CAAW,CAAC,CACZ,CAAS,CACT,CAAO,EAAgBE,EAAMF,EAAY,MAAO,CACxC,SAAU,CAAcE,EAAMF,EAAY,GAAI,CAC5C,SAAU,CAAcI,EAAKJ,EAAY,GAAI,CAC3C,MAAO,OACP,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,SAAU,eACxB,CAAa,CACb,CAAW,EAAgBI,EAAKJ,EAAY,GAAI,CACpC,MAAO,OACP,SAAU,kHACtB,CAAW,CAAC,CACZ,CAAS,EAAgBE,EAAMF,EAAY,GAAI,CACrC,SAAU,CAAcI,EAAKJ,EAAY,GAAI,CAC3C,MAAO,OACP,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,SAAU,mBACxB,CAAa,CACb,CAAW,EAAgBI,EAAKJ,EAAY,GAAI,CACpC,MAAO,OACP,SAAU,oJACtB,CAAW,CAAC,CACZ,CAAS,CAAC,CACV,CAAO,CAAC,CACH,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,EAAG,CACzC,SAAU,kDACX,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,IAAK,CAC3C,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,UAAW,cACX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAClB,CAAO,CACF,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,GAAI,CAC1C,GAAI,qBACJ,SAAU,oBACX,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,EAAG,CAC1C,SAAU,CAAC,OAAqBI,EAAKJ,EAAY,KAAM,CACrD,SAAU,gBACX,CAAA,EAAG,yBAAuCI,EAAKJ,EAAY,KAAM,CAChE,SAAU,eACX,CAAA,EAAG,OAAqBI,EAAKJ,EAAY,KAAM,CAC9C,SAAU,mBACX,CAAA,EAAG,kBAAgCI,EAAKJ,EAAY,KAAM,CACzD,SAAU,kBACX,CAAA,EAAG,sKAAsK,CAC3K,CAAA,EAAG;AAAA,EAAmBI,EAAKJ,EAAY,IAAK,CAC3C,SAAuBI,EAAKJ,EAAY,KAAM,CAC5C,UAAW,cACX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAClB,CAAO,CACF,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,GAAI,CAC3C,SAAU,CAAC;AAAA,EAAmBE,EAAMF,EAAY,GAAI,CAClD,SAAU,CAAC,QAAsBI,EAAKJ,EAAY,KAAM,CACtD,SAAU,0BACX,CAAA,EAAG,mBAAiCI,EAAKJ,EAAY,KAAM,CAC1D,SAAU,0BACX,CAAA,EAAG,QAAsBI,EAAKJ,EAAY,KAAM,CAC/C,SAAU,wBACX,CAAA,EAAG;AAAA,mEAAuH,CAC5H,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,GAAI,CAC3C,SAAU,CAAC,QAAsBI,EAAKJ,EAAY,KAAM,CACtD,SAAU,0BACX,CAAA,EAAG,mBAAiCI,EAAKJ,EAAY,KAAM,CAC1D,SAAU,wBACX,CAAA,EAAG,gIAAgI,CACrI,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,GAAI,CAC3C,SAAU,CAAC,QAAsBI,EAAKJ,EAAY,KAAM,CACtD,SAAU,wBACX,CAAA,EAAG,mBAAiCI,EAAKJ,EAAY,KAAM,CAC1D,SAAU,0BACX,CAAA,EAAG,gIAAgI,CACrI,CAAA,EAAG;AAAA,EAAmBE,EAAMF,EAAY,GAAI,CAC3C,SAAU,CAAC,QAAsBI,EAAKJ,EAAY,KAAM,CACtD,SAAU,0BACX,CAAA,EAAG,QAAsBI,EAAKJ,EAAY,KAAM,CAC/C,SAAU,wBACX,CAAA,EAAG,2GAA2G,CAChH,CAAA,EAAG;AAAA,CAAI,CACd,CAAK,CAAC,CACN,CAAG,CACH,CACA,SAASM,EAAWP,EAAQ,GAAI,CAC9B,KAAM,CACJ,QAASQ,CACb,EAAM,OAAO,OAAO,CAAE,EAAEN,EAAkB,EAAIF,EAAM,UAAU,EAC5D,OAAOQ,EAAyBH,EAAKG,EAAW,CAC9C,GAAGR,EACH,SAAuBK,EAAKN,EAAmB,CAC7C,GAAGC,CACT,CAAK,CACL,CAAG,EAAID,EAAkBC,CAAK,CAC9B,CAEY,MAACS,EAAS,IAAM,CAC1B,MAAM,IAAI,MAAM,iBAAiB,CACnC,EACAA,EAAO,WAAa,CAClB,SAAU,EACZ,EACK,MAACC,EAAgB,CACpB,MAAO,+CACP,WAAY,CACV,UAAW,CACT,gBAAiB,EAClB,CACF,EACD,KAAM,CAAC,aAAa,EACpB,eAAgB,CAAC,QAAQ,CAC3B,EACAA,EAAc,WAAaA,EAAc,YAAc,GACvDA,EAAc,WAAW,KAAO,CAC9B,GAAIA,EAAc,WAAW,MAAQ,GACrC,KAAMH,CACR,EAC4B,MAAAI,EAAA,CAAA,QAAA"}