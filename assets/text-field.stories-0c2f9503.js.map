{"version":3,"file":"text-field.stories-0c2f9503.js","sources":["../../__docs__/wonder-blocks-form/text-field.argtypes.ts"],"sourcesContent":["import type {InputType} from \"@storybook/csf\";\n\nexport default {\n    id: {\n        description: \"The unique identifier for the input.\",\n        type: {name: \"string\", required: true},\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n        control: {\n            type: \"text\",\n        },\n    },\n\n    type: {\n        description:\n            \"Determines the type of input. Defaults to text. This may change the appearance or type of characters allowed.\",\n        table: {\n            type: {\n                summary: `\"text\" | \"password\" | \"email\" | \"number\" | \"tel\"`,\n            },\n            defaultValue: {\n                summary: \"text\",\n            },\n        },\n        options: [\"text\", \"password\", \"email\", \"number\", \"tel\"],\n        control: {\n            type: \"select\",\n        },\n    },\n\n    value: {\n        description: \"The input value.\",\n        type: {name: \"string\", required: true},\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n        control: {type: \"text\"},\n    },\n\n    autoComplete: {\n        description: \"Specifies if the input field allows autocomplete.\",\n        table: {\n            type: {\n                summary: \"string\",\n                detail: `There is a large number of options, including \"on\", \"off\", \"username\", \"current-password\", and many others.`,\n            },\n        },\n        control: {\n            type: \"text\",\n        },\n    },\n\n    disabled: {\n        description: \"Makes a read-only input field that cannot be focused.\",\n        table: {\n            type: {\n                summary: \"boolean\",\n            },\n            defaultValue: {\n                summary: \"false\",\n            },\n        },\n        control: {\n            type: \"boolean\",\n        },\n    },\n\n    light: {\n        description:\n            \"Change the default focus ring color to fit a dark background.\",\n        table: {\n            type: {\n                summary: \"boolean\",\n            },\n            defaultValue: {\n                summary: \"false\",\n            },\n        },\n        control: {\n            type: \"boolean\",\n        },\n    },\n\n    required: {\n        description:\n            \"Whether this field is required to to continue, or the error message to render if this field is left blank. Pass in a message instead of `true` if possible.\",\n        table: {\n            type: {\n                summary: \"boolean | string\",\n                detail: \"The string will not be used if a `validate` prop is passed in.\",\n            },\n        },\n        control: {\n            type: \"null\",\n        },\n    },\n\n    placeholder: {\n        description: \"Provide hints or examples of what to enter.\",\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n        control: {\n            type: \"text\",\n        },\n    },\n\n    readOnly: {\n        description: \"Specifies if the input field is read-only.\",\n        table: {\n            type: {\n                summary: \"boolean\",\n            },\n        },\n        control: {\n            type: \"boolean\",\n        },\n    },\n\n    style: {\n        description: \"Custom styles for the input.\",\n        table: {\n            type: {\n                summary: \"StyleType\",\n            },\n        },\n    },\n\n    testId: {\n        description: \"Optional test ID for e2e testing.\",\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n        control: {\n            type: \"text\",\n        },\n    },\n\n    validate: {\n        description:\n            \"Provide a validation for the input value. Return a string error message or null | void for a valid input.\",\n        table: {\n            type: {\n                summary: \"(value: string) => ?string\",\n            },\n        },\n        control: {\n            type: \"null\",\n        },\n    },\n\n    /**\n     * Events\n     */\n    onValidate: {\n        description: \"Called right after the TextField input is validated.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(errorMessage: ?string) => mixed\",\n            },\n        },\n    },\n\n    onChange: {\n        description:\n            \"Called when the value has changed. Use this in conjunction with the `value` prop to update the string rendered in the input field.\",\n        type: {\n            name: \"other\",\n            value: \"(newValue: string) => mixed\",\n            required: true,\n        },\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(newValue: string) => mixed\",\n            },\n        },\n    },\n\n    onKeyDown: {\n        action: \"keyDown\",\n        description: \"Called when a key is pressed.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary:\n                    \"(event: SyntheticKeyboardEvent<HTMLInputElement>) => mixed\",\n            },\n        },\n    },\n\n    onFocus: {\n        action: \"focus\",\n        description: \"Called when the element has been focused.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary:\n                    \"(event: SyntheticFocusEvent<HTMLInputElement>) => mixed\",\n            },\n        },\n    },\n\n    onBlur: {\n        action: \"blur\",\n        description: \"Called when the element has been blurred.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary:\n                    \"(event: SyntheticFocusEvent<HTMLInputElement>) => mixed\",\n            },\n        },\n    },\n} satisfies Record<string, InputType>;\n"],"names":["TextFieldArgTypes"],"mappings":"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"}