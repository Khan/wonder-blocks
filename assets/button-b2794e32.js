import{a as s,j as G}from"./jsx-runtime-309e447d.js";import{r as C}from"./index-9f32f44c.js";import{L as H,c as j,i as J,g as Q}from"./clickable-8a7f284d.js";import{V as X,a as A,l as _}from"./render-state-root-891c0d56.js";import{L as Z,a as ee}from"./footnote-761d2bcc.js";import{C as E,S as w,m as M,f as ae,a as O}from"./index-f641b98f.js";import{I as te}from"./icon-a4f17d53.js";const ne={xsmall:16,small:24,medium:48,large:96},re={xsmall:"M7.237.741C7.165.393 6.95.154 6.656.053A1.01 1.01 0 0 0 6.18.01c-.053.009-.053.009-.087.017C2.553.949 0 4.214 0 7.91 0 12.36 3.598 16 8 16c4.4 0 8-3.647 8-8.112a1.02 1.02 0 0 0-.118-.423.877.877 0 0 0-.808-.48.909.909 0 0 0-.81.46c-.09.151-.13.296-.146.455-.08 3.493-2.737 6.207-6.118 6.207-3.41 0-6.118-2.74-6.118-6.196 0-2.843 1.936-5.291 4.644-6.022.1-.028.224-.082.352-.177a.928.928 0 0 0 .36-.97z",small:"M10.598.943c-.093-.449-.362-.748-.732-.875a1.314 1.314 0 0 0-.723-.033C3.83 1.417 0 6.317 0 11.864 0 18.538 5.398 24 12 24c6.598 0 12-5.471 12-12.16a1.333 1.333 0 0 0-.154-.548c-.193-.368-.544-.606-1.023-.606-.472 0-.825.229-1.035.585-.117.2-.169.39-.189.582-.124 5.472-4.294 9.73-9.599 9.73-5.349 0-9.599-4.3-9.599-9.72 0-4.46 3.036-8.299 7.28-9.444.127-.036.291-.107.458-.232.373-.28.57-.711.46-1.244z",medium:"M44.19 23.455a1.91 1.91 0 1 1 3.801 0h.003c.004.18.006.363.006.545 0 13.255-10.745 24-24 24S0 37.255 0 24 10.745 0 24 0c.182 0 .364.002.545.006V.01a1.91 1.91 0 1 1 0 3.801v.015A20.564 20.564 0 0 0 24 3.818C12.854 3.818 3.818 12.854 3.818 24c0 11.146 9.036 20.182 20.182 20.182 11.146 0 20.182-9.036 20.182-20.182 0-.182-.003-.364-.007-.545h.015z",large:"M88.38 46.91a3.818 3.818 0 1 1 7.602 0h.006c.008.362.012.725.012 1.09 0 26.51-21.49 48-48 48S0 74.51 0 48 21.49 0 48 0c.365 0 .728.004 1.09.012v.005a3.818 3.818 0 1 1 0 7.602v.032c-.362-.01-.725-.015-1.09-.015C25.708 7.636 7.636 25.708 7.636 48c0 22.292 18.072 40.364 40.364 40.364 22.292 0 40.364-18.072 40.364-40.364 0-.365-.005-.728-.015-1.09h.032z"},B={light:E.white,dark:E.offBlack16},ie=A("path");class U extends C.Component{render(){const{size:u,light:e,style:c,testId:g}=this.props,i=ne[u],n=re[u],m=e?B.light:B.dark,h=s("svg",{xmlns:"http://www.w3.org/2000/svg",width:i,height:i,viewBox:`0 0 ${i} ${i}`,"data-test-id":g,children:s(ie,{style:[L.loadingSpinner,{fill:m}],fillRule:"nonzero",d:n})});return s(X,{style:[L.spinnerContainer,c],children:h})}}U.defaultProps={size:"large",light:!1};const le={"0%":{transform:"rotate(0deg)"},"50%":{transform:"rotate(180deg)"},"100%":{transform:"rotate(360deg)"}},L=_.StyleSheet.create({spinnerContainer:{justifyContent:"center"},loadingSpinner:{transformOrigin:"50% 50%",animationName:le,animationDuration:"1.1s",animationIterationCount:"infinite",animationTimingFunction:"linear"}});try{circularspinner.displayName="circularspinner",circularspinner.__docgenInfo={description:`A circular progress spinner. Used for indicating loading progress. Should
be used by default in most places where a loading indicator is needed.

### Usage

\`\`\`js
import {CircularSpinner} from "@khanacademy/wonder-blocks-progress-spinner";

<CircularSpinner />
\`\`\``,displayName:"circularspinner",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},size:{defaultValue:{value:"large"},description:`The size of the spinner. (large = 96px, medium = 48px, small = 24px,
xsmall = 16px)`,name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'},{value:'"xsmall"'}]}},light:{defaultValue:{value:"false"},description:`Should a light version of the spinner be shown?
(To be used on a dark background.)`,name:"light",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"Any (optional) styling to apply to the spinner container.",name:"style",required:!1,type:{name:"any"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}}}}}catch{}const oe=A("a"),se=A("button"),ue=A(H),de=C.forwardRef((t,u)=>{const e=c=>{const{children:g,skipClientNav:i,color:n,disabled:m,focused:h,hovered:l,href:b=void 0,kind:d="primary",light:r=!1,pressed:o,size:a="medium",style:y,testId:f,type:V=void 0,spinner:I,icon:q,id:k,waiting:z,...D}=t,S=n==="destructive"?O.controlDestructive:O.controlDefault,T=q?(a==="small"?16:24)+8:0,v=ce(S,d,r,T,a),x=I||m,P=[p.shared,x&&p.disabled,q&&p.withIcon,v.default,x&&v.disabled,d!=="tertiary"&&!x&&(o?v.active:(l||h)&&v.focus),d==="tertiary"&&!o&&h&&[v.focus,x&&v.disabledFocus],a==="small"&&p.small,a==="large"&&p.large],R={"data-test-id":f,id:k,role:"button",style:[P,y],...D},F=a==="small"?Z:ee,$=a==="small"?"small":"medium",K=s(F,{style:[p.text,a==="large"&&p.largeText,I&&p.hiddenText,d==="tertiary"&&p.textWithFocus,d==="tertiary"&&!x&&(o?[v.hover,v.active]:l&&v.hover)],testId:f?`${f}-inner-label`:void 0,children:g}),Y={medium:"small",small:"xsmall",large:"medium"},W=G(C.Fragment,{children:[q&&s(te,{size:$,color:"currentColor",icon:q,style:p.icon,"aria-hidden":"true",testId:f?`${f}-icon`:void 0}),K,I&&s(U,{style:p.spinner,size:Y[a],light:d==="primary",testId:`${f||"button"}-spinner`})]});return b&&!x?c&&!i&&J(b)?s(ue,{...R,to:b,ref:u,children:W}):s(oe,{...R,href:b,ref:u,children:W}):s(se,{type:V||"button",...R,"aria-disabled":x,ref:u,children:W})};return s(j.Consumer,{children:c=>e(c)})}),p=_.StyleSheet.create({shared:{position:"relative",display:"inline-flex",alignItems:"center",justifyContent:"center",height:40,paddingTop:0,paddingBottom:0,paddingLeft:16,paddingRight:16,border:"none",borderRadius:4,cursor:"pointer",outline:"none",textDecoration:"none",boxSizing:"border-box",touchAction:"manipulation",userSelect:"none",":focus":{WebkitTapHighlightColor:"rgba(0,0,0,0)"}},withIcon:{paddingLeft:12},disabled:{cursor:"auto"},small:{height:32},large:{borderRadius:w.xxSmall_6,height:56},text:{alignItems:"center",fontWeight:"bold",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",display:"inline-block",pointerEvents:"none"},largeText:{fontSize:18,lineHeight:"20px"},textWithFocus:{position:"relative"},hiddenText:{visibility:"hidden"},spinner:{position:"absolute"},icon:{paddingRight:w.xSmall_8}}),N={},ce=(t,u,e,c,g)=>{const i=t+u+e.toString()+c.toString()+g;if(N[i])return N[i];const{white:n,white50:m,white64:h,offBlack32:l,offBlack50:b,darkBlue:d}=E,r=M(ae(t,.32),n),o=M(l,t),a=g==="large"?w.xLarge_32:w.medium_16;let y={};if(u==="primary")y={default:{background:e?n:t,color:e?t:n,paddingLeft:a,paddingRight:a},focus:{boxShadow:`0 0 0 1px ${e?d:n}, 0 0 0 3px ${e?n:t}`},active:{boxShadow:`0 0 0 1px ${e?d:n}, 0 0 0 3px ${e?r:o}`,background:e?r:o,color:e?o:r},disabled:{background:e?r:l,color:e?t:h,cursor:"default",":focus":{boxShadow:`0 0 0 1px ${e?l:n}, 0 0 0 3px ${e?r:l}`}}};else if(u==="secondary")y={default:{background:"none",color:e?n:t,borderColor:e?m:b,borderStyle:"solid",borderWidth:1,paddingLeft:a,paddingRight:a},focus:{background:e?"transparent":n,borderColor:e?n:t,borderWidth:2,paddingLeft:a-1,paddingRight:a-1},active:{background:e?o:r,color:e?r:o,borderColor:e?r:o,borderWidth:2,paddingLeft:a-1,paddingRight:a-1},disabled:{color:e?m:l,borderColor:e?r:l,cursor:"default",":focus":{borderColor:e?m:l,borderWidth:2,paddingLeft:a-1,paddingRight:a-1}}};else if(u==="tertiary")y={default:{background:"none",color:e?n:t,paddingLeft:0,paddingRight:0},hover:{":after":{content:"''",position:"absolute",height:2,width:"100%",right:0,bottom:0,background:e?n:t,borderRadius:2}},focus:{":after":{content:"''",position:"absolute",width:`calc(100% + ${w.xxxSmall_4}px)`,height:`calc(100% - ${w.xxxSmall_4}px)`,borderStyle:"solid",borderColor:e?n:t,borderWidth:w.xxxxSmall_2,borderRadius:w.xxxSmall_4}},active:{color:e?r:o,":after":{height:1,background:e?r:o}},disabled:{color:e?r:l,cursor:"default"},disabledFocus:{":after":{borderColor:e?m:l}}};else throw new Error("Button kind not recognized");return N[i]=_.StyleSheet.create(y),N[i]};try{buttoncore.displayName="buttoncore",buttoncore.__docgenInfo={description:"",displayName:"buttoncore",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},children:{defaultValue:null,description:"Text to appear on the button.",name:"children",required:!0,type:{name:"string"}},icon:{defaultValue:null,description:"An icon, displayed to the left of the title.",name:"icon",required:!1,type:{name:"IconAsset"}},spinner:{defaultValue:null,description:`If true, replaces the contents with a spinner.

Note: setting this prop to \`true\` will disable the button.

TODO(kevinb): support spinner + light once we have designs`,name:"spinner",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The color of the button, either blue or red.",name:"color",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"destructive"'}]}},kind:{defaultValue:null,description:`The kind of the button, either primary, secondary, or tertiary.

In default state:

- Primary buttons have background colors
- Secondary buttons have a border and no background color
- Tertiary buttons have no background or border`,name:"kind",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"tertiary"'}]}},light:{defaultValue:null,description:`Whether the button is on a dark/colored background.

Sets primary button background color to white, and secondary and
tertiary button title to color.`,name:"light",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:`The size of the button. "medium" = height: 40; "small" = height: 32;
"large" = height: 56;`,name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},disabled:{defaultValue:null,description:"Whether the button is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"An optional id attribute.",name:"id",required:!1,type:{name:"string"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:'Specifies the type of relationship between the current document and the\nlinked document. Should only be used when `href` is specified. This\ndefaults to "noopener noreferrer" when `target="_blank"`, but can be\noverridden by setting this prop to something else.',name:"rel",required:!1,type:{name:"string"}},target:{defaultValue:null,description:"A target destination window for a link to open in. Should only be used\nwhen `href` is specified.\n\nTODO(WB-1262): only allow this prop when `href` is also set.t",name:"target",required:!1,type:{name:"enum",value:[{value:'"_blank"'}]}},tabIndex:{defaultValue:null,description:"Set the tabindex attribute on the rendered element.",name:"tabIndex",required:!1,type:{name:"number"}},skipClientNav:{defaultValue:null,description:`Whether to avoid using client-side navigation.

If the URL passed to href is local to the client-side, e.g.
/math/algebra/eval-exprs, then it tries to use react-router-dom's Link
component which handles the client-side navigation. You can set
\`skipClientNav\` to true avoid using client-side nav entirely.

NOTE: All URLs containing a protocol are considered external, e.g.
https://khanacademy.org/math/algebra/eval-exprs will trigger a full
page reload.`,name:"skipClientNav",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"Optional custom styles.",name:"style",required:!1,type:{name:"any"}},href:{defaultValue:null,description:"URL to navigate to.",name:"href",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"Used for buttons within <form>s.",name:"type",required:!1,type:{name:"enum",value:[{value:'"submit"'}]}},className:{defaultValue:null,description:"Adds CSS classes to the Button.",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:`Function to call when button is clicked.

This callback should be used for running synchronous code, like
dispatching a Redux action. For asynchronous code see the
beforeNav and safeWithNav props. It should NOT be used to redirect
to a different URL.

Note: onClick is optional if href is present, but must be defined if
href is not`,name:"onClick",required:!1,type:{name:"((e: SyntheticEvent<Element, Event>) => unknown) & ((e: SyntheticEvent<Element, Event>) => unknown)"}},beforeNav:{defaultValue:null,description:`Run async code before navigating. If the promise returned rejects then
navigation will not occur.

If both safeWithNav and beforeNav are provided, beforeNav will be run
first and safeWithNav will only be run if beforeNav does not reject.

WARNING: Do not use with \`type="submit"\`.`,name:"beforeNav",required:!1,type:{name:"(() => Promise<unknown>)"}},safeWithNav:{defaultValue:null,description:`Run async code in the background while client-side navigating. If the
browser does a full page load navigation, the callback promise must be
settled before the navigation will occur. Errors are ignored so that
navigation is guaranteed to succeed.

WARNING: Do not use with \`type="submit"\`.`,name:"safeWithNav",required:!1,type:{name:"(() => Promise<unknown>)"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!0,type:{name:"(e: MouseEvent<Element, MouseEvent>) => unknown"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!0,type:{name:"() => unknown"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!0,type:{name:"() => unknown"}},onMouseUp:{defaultValue:null,description:"",name:"onMouseUp",required:!0,type:{name:"(e: MouseEvent<Element, MouseEvent>) => unknown"}},onTouchStart:{defaultValue:null,description:"",name:"onTouchStart",required:!0,type:{name:"() => unknown"}},onTouchEnd:{defaultValue:null,description:"",name:"onTouchEnd",required:!0,type:{name:"() => unknown"}},onTouchCancel:{defaultValue:null,description:"",name:"onTouchCancel",required:!0,type:{name:"() => unknown"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!0,type:{name:"(e: KeyboardEvent<Element>) => unknown"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!0,type:{name:"(e: KeyboardEvent<Element>) => unknown"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!0,type:{name:"(e: FocusEvent<Element, Element>) => unknown"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!0,type:{name:"(e: FocusEvent<Element, Element>) => unknown"}},hovered:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"hovered",required:!0,type:{name:"boolean"}},focused:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"focused",required:!0,type:{name:"boolean"}},pressed:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"pressed",required:!0,type:{name:"boolean"}},waiting:{defaultValue:null,description:`When we're waiting for beforeNav or safeWithNav to complete an async
action, this will be true.

NOTE: We only wait for safeWithNav to complete when doing a full page
load navigation.`,name:"waiting",required:!0,type:{name:"boolean"}}}}}catch{}const me=C.forwardRef((t,u)=>{const{href:e=void 0,type:c=void 0,children:g,skipClientNav:i,onClick:n,beforeNav:m=void 0,safeWithNav:h=void 0,tabIndex:l,target:b,rel:d,color:r="default",kind:o="primary",light:a=!1,size:y="medium",disabled:f=!1,spinner:V=!1,...I}=t,q=k=>{const z=Q(e,i,k),D=(S,T)=>s(de,{...I,...S,...T,disabled:f,spinner:V||S.waiting,color:r,kind:o,light:a,size:y,skipClientNav:i,href:e,target:b,type:c,tabIndex:l,ref:u,children:g});return m?s(z,{disabled:V||f,href:e,role:"button",type:c,onClick:n,beforeNav:m,safeWithNav:h,rel:d,children:D}):s(z,{disabled:V||f,href:e,role:"button",type:c,onClick:n,safeWithNav:h,target:b,rel:d,children:D})};return s(j.Consumer,{children:k=>q(k)})}),we=me;try{button.displayName="button",button.__docgenInfo={description:`Reusable button component.

Consisting of a [\`ClickableBehavior\`](#clickablebehavior) surrounding a
\`ButtonCore\`. \`ClickableBehavior\` handles interactions and state changes.
\`ButtonCore\` is a stateless component which displays the different states
the \`Button\` can take.

### Usage

\`\`\`jsx
import Button from "@khanacademy/wonder-blocks-button";

<Button
    onClick={(e) => console.log("Hello, world!")}
>
    Hello, world!
</Button>
\`\`\``,displayName:"button",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},children:{defaultValue:null,description:"Text to appear on the button.",name:"children",required:!0,type:{name:"string"}},icon:{defaultValue:null,description:"An icon, displayed to the left of the title.",name:"icon",required:!1,type:{name:"IconAsset"}},spinner:{defaultValue:null,description:`If true, replaces the contents with a spinner.

Note: setting this prop to \`true\` will disable the button.

TODO(kevinb): support spinner + light once we have designs`,name:"spinner",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The color of the button, either blue or red.",name:"color",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"destructive"'}]}},kind:{defaultValue:null,description:`The kind of the button, either primary, secondary, or tertiary.

In default state:

- Primary buttons have background colors
- Secondary buttons have a border and no background color
- Tertiary buttons have no background or border`,name:"kind",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"tertiary"'}]}},light:{defaultValue:null,description:`Whether the button is on a dark/colored background.

Sets primary button background color to white, and secondary and
tertiary button title to color.`,name:"light",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:`The size of the button. "medium" = height: 40; "small" = height: 32;
"large" = height: 56;`,name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},disabled:{defaultValue:null,description:"Whether the button is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"An optional id attribute.",name:"id",required:!1,type:{name:"string"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:'Specifies the type of relationship between the current document and the\nlinked document. Should only be used when `href` is specified. This\ndefaults to "noopener noreferrer" when `target="_blank"`, but can be\noverridden by setting this prop to something else.',name:"rel",required:!1,type:{name:"string"}},target:{defaultValue:null,description:"A target destination window for a link to open in. Should only be used\nwhen `href` is specified.\n\nTODO(WB-1262): only allow this prop when `href` is also set.t",name:"target",required:!1,type:{name:"enum",value:[{value:'"_blank"'}]}},tabIndex:{defaultValue:null,description:"Set the tabindex attribute on the rendered element.",name:"tabIndex",required:!1,type:{name:"number"}},skipClientNav:{defaultValue:null,description:`Whether to avoid using client-side navigation.

If the URL passed to href is local to the client-side, e.g.
/math/algebra/eval-exprs, then it tries to use react-router-dom's Link
component which handles the client-side navigation. You can set
\`skipClientNav\` to true avoid using client-side nav entirely.

NOTE: All URLs containing a protocol are considered external, e.g.
https://khanacademy.org/math/algebra/eval-exprs will trigger a full
page reload.`,name:"skipClientNav",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"Optional custom styles.",name:"style",required:!1,type:{name:"any"}},href:{defaultValue:null,description:"URL to navigate to.",name:"href",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"Used for buttons within <form>s.",name:"type",required:!1,type:{name:"enum",value:[{value:'"submit"'}]}},className:{defaultValue:null,description:"Adds CSS classes to the Button.",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:`Function to call when button is clicked.

This callback should be used for running synchronous code, like
dispatching a Redux action. For asynchronous code see the
beforeNav and safeWithNav props. It should NOT be used to redirect
to a different URL.

Note: onClick is optional if href is present, but must be defined if
href is not`,name:"onClick",required:!1,type:{name:"((e: SyntheticEvent<Element, Event>) => unknown)"}},beforeNav:{defaultValue:null,description:`Run async code before navigating. If the promise returned rejects then
navigation will not occur.

If both safeWithNav and beforeNav are provided, beforeNav will be run
first and safeWithNav will only be run if beforeNav does not reject.

WARNING: Do not use with \`type="submit"\`.`,name:"beforeNav",required:!1,type:{name:"(() => Promise<unknown>)"}},safeWithNav:{defaultValue:null,description:`Run async code in the background while client-side navigating. If the
browser does a full page load navigation, the callback promise must be
settled before the navigation will occur. Errors are ignored so that
navigation is guaranteed to succeed.

WARNING: Do not use with \`type="submit"\`.`,name:"safeWithNav",required:!1,type:{name:"(() => Promise<unknown>)"}}}}}catch{}export{we as B,U as C};
//# sourceMappingURL=button-b2794e32.js.map
