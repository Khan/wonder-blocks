import{M as s}from"./index-35e12253.js";import{a as t,j as o,F as c}from"./jsx-runtime-309e447d.js";import{u as i}from"./index-506666d7.js";import"./iframe-97aa1d91.js";import"../sb-preview/runtime.js";import"./chunk-6P7RB4HF-938b085e.js";import"./index-d475d2ea.js";import"./index-9f32f44c.js";import"./_commonjsHelpers-de833af9.js";import"./index-9c2d1831.js";import"./inheritsLoose-9eefaa95.js";import"./assertThisInitialized-081f9914.js";import"./index-4733a090.js";import"./_baseIsEqual-976d9d82.js";import"./uniq-944679ca.js";import"./index-356e4a49.js";function a(r){const e=Object.assign({h1:"h1",p:"p",a:"a",code:"code",h2:"h2",pre:"pre"},i(),r.components);return o(c,{children:[t(s,{title:"Data / GraphQL",parameters:{chromatic:{disableSnapshot:!0}}}),`
`,t(e.h1,{id:"graphql-in-wonder-blocks-data",children:"GraphQL in Wonder Blocks Data"}),`
`,o(e.p,{children:["Wonder Blocks Data provides some utility types and functionality to assist in performing GraphQL requests. To use them, your React app should include the ",t(e.a,{href:"/docs/data-exports-gqlrouter--page",children:t(e.code,{children:"GqlRouter"})})," component to specify the method responsible for actually making the GraphQL requests, as well as any default context that requests should include."]}),`
`,o(e.p,{children:["The ",t(e.a,{href:"/docs/data-exports-gqlrouter--page",children:t(e.code,{children:"GqlRouter"})})," component uses React context to convey this information to the ",t(e.a,{href:"/docs/data-exports-usegql--page",children:t(e.code,{children:"useGql"})})," hook, which provides a wrapper to the fetch function, allowing for simplified invocation of requests that can merge context changes with the default context as well as only provide context and variables when needed."]}),`
`,t(e.h2,{id:"testing",children:"Testing"}),`
`,o(e.p,{children:["By using the ",t(e.a,{href:"/docs/data-exports-gqlrouter--page",children:t(e.code,{children:"GqlRouter"})})," in combination with the ",t(e.a,{href:"/docs/testing-exports-mockgqlfetch",children:t(e.code,{children:"mockGqlFetch()"})})," API from Wonder Blocks Testing, you can easily mock your GraphQL responses in tests and stories."]}),`
`,t(e.pre,{children:t(e.code,{className:"language-tsx",children:`const mockFetch = mockGqlFetch()
    .mockOperation(...);

<GqlRouter fetch={mockFetch} defaultContext={{}}>
    <MyComponent />
</GqlRouter>
`})}),`
`,t(e.h2,{id:"server-side-rendering-and-hydration-of-graphql",children:"Server-side rendering and hydration of GraphQL"}),`
`,o(e.p,{children:["Server-side rendering and hydration of GraphQL data can be achieved by combining the ",t(e.a,{href:"/docs/data-exports-usegql--page",children:t(e.code,{children:"useGql"})})," hook with the ",t(e.a,{href:"/docs/data-exports/usehydrationeffect--page",children:t(e.code,{children:"useHydrationEffect"})})," hook."]}),`
`,o(e.p,{children:["More details about server-side rendering with Wonder Blocks Data can be found in the ",t(e.a,{href:"/docs/data-server-side-rendering-and-hydration--page",children:"relevant overview section"}),"."]})]})}function d(r={}){const{wrapper:e}=Object.assign({},i(),r.components);return e?t(e,{...r,children:t(a,{...r})}):a(r)}const h=()=>{throw new Error("Docs-only story")};h.parameters={docsOnly:!0};const n={title:"Data / GraphQL",parameters:{chromatic:{disableSnapshot:!0}},tags:["stories-mdx"],includeStories:["__page"]};n.parameters=n.parameters||{};n.parameters.docs={...n.parameters.docs||{},page:d};const L=["__page"];export{L as __namedExportsOrder,h as __page,n as default};
//# sourceMappingURL=_overview_graphql.stories-f95c63ce.js.map
