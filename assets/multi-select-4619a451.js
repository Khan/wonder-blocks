import{a as m,j as X}from"./jsx-runtime-309e447d.js";import{r as y}from"./index-9f32f44c.js";import{r as W}from"./index-9c2d1831.js";import{a as H,l as T,V as L}from"./render-state-root-891c0d56.js";import{S as k,m as C,f as z,C as D,a as ra}from"./index-f641b98f.js";import{c as le,a as la}from"./footnote-761d2bcc.js";import{i as sa,c as Pe,L as oa,g as ye,a as da}from"./clickable-8a7f284d.js";import{I as se}from"./icon-a4f17d53.js";import{n as ua,o as Le}from"./icon-assets-a0b49981.js";import{S as ca}from"./strut-c6011196.js";import{S as pa}from"./search-field-66099b8d.js";import{w as We}from"./with-action-scheduler-7e779422.js";import{_ as ma,a as ha}from"./inheritsLoose-9eefaa95.js";import{_ as Ce}from"./assertThisInitialized-081f9914.js";import{m as fa,P as ba}from"./maybe-get-portal-mounted-modal-host-element-fbe11998.js";import"./one-pane-dialog-da34165b.js";const P={tab:9,enter:13,escape:27,space:32,up:38,down:40},Be={marginTop:k.xSmall_8,marginBottom:k.xSmall_8},$e={minHeight:100},F=40,je=9,Ue=9,O={clearSearch:"Clear search",filter:"Filter",noResults:"No results",selectNoneLabel:"Select none",selectAllLabel:s=>`Select all (${s})`,noneSelected:"0 items",someSelected:s=>`${s} items`,allSelected:"All items"},{blue:de,white:ue,offBlack:va,offBlack32:De}=D,ga=H("a"),ya=H("button"),wa=H(oa);class U extends y.Component{static isClassOf(e){return e&&e.type&&e.type.__IS_ACTION_ITEM__}renderClickableBehavior(e){const{skipClientNav:a,disabled:t,href:n,target:i,indent:l,label:o,lang:d,onClick:p,role:g,style:I,testId:x}=this.props,w=ye(n,a,e);return m(w,{disabled:t,onClick:p,href:n,role:g,target:i,children:(h,r)=>{const{pressed:u,hovered:c,focused:f}=h,b=[B.shared,t&&B.disabled,!t&&(u?B.active:(c||f)&&B.focus),I],q={"data-test-id":x,disabled:t,role:g,style:[b],...r},v=m(y.Fragment,{children:m(le,{lang:d,style:[l&&B.indent,B.label],children:o})});return n&&!t?e&&!a&&sa(n)?m(wa,{...q,to:n,children:v}):m(ga,{...q,href:n,target:i,children:v}):m(ya,{type:"button",...q,disabled:t,children:v})}})}render(){return m(Pe.Consumer,{children:e=>this.renderClickableBehavior(e)})}}U.defaultProps={disabled:!1,indent:!1,role:"menuitem"};U.__IS_ACTION_ITEM__=!0;const B=T.StyleSheet.create({shared:{background:ue,color:va,textDecoration:"none",border:"none",outline:"none",flexDirection:"row",alignItems:"center",display:"flex",height:F,minHeight:F,paddingLeft:k.medium_16,paddingRight:k.medium_16,touchAction:"manipulation"},label:{whiteSpace:"nowrap",userSelect:"none"},indent:{marginLeft:k.medium_16},focus:{color:ue,background:de},active:{color:C(z(de,.32),ue),background:C(De,de)},disabled:{color:De,cursor:"default"}});try{actionitem.displayName="actionitem",actionitem.__docgenInfo={description:`The action item trigger actions, such as navigating to a different page or
opening a modal. Supply the href and/or onClick props. Used as a child of
ActionMenu.`,displayName:"actionitem",props:{label:{defaultValue:null,description:"Display text of the action item.",name:"label",required:!0,type:{name:"string"}},disabled:{defaultValue:{value:"false"},description:"Whether this action item is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},href:{defaultValue:null,description:`URL to navigate to.

Note: Either href or onClick must be defined`,name:"href",required:!1,type:{name:"string"}},lang:{defaultValue:null,description:`Optional attribute to indicate to the Screen Reader which language the
item text is in.`,name:"lang",required:!1,type:{name:"string"}},target:{defaultValue:null,description:"A target destination window for a link to open in.\n\nTODO(WB-1262): only allow this prop when `href` is also set.t",name:"target",required:!1,type:{name:"enum",value:[{value:'"_blank"'}]}},skipClientNav:{defaultValue:null,description:`Whether to avoid using client-side navigation.

If the URL passed to href is local to the client-side, e.g.
/math/algebra/eval-exprs, then it tries to use react-router-dom's Link
component which handles the client-side navigation. You can set
\`skipClientNav\` to true avoid using client-side nav entirely.

NOTE: All URLs containing a protocol are considered external, e.g.
https://khanacademy.org/math/algebra/eval-exprs will trigger a full
page reload.`,name:"skipClientNav",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:`Function to call when button is clicked.

This callback should be used for things like marking BigBingo
conversions. It should NOT be used to redirect to a different URL or to
prevent navigation via e.preventDefault(). The event passed to this
handler will have its preventDefault() and stopPropagation() methods
stubbed out.

Note: onClick is optional if href is present, but must be defined if
href is not`,name:"onClick",required:!1,type:{name:"(() => unknown)"}},indent:{defaultValue:{value:"false"},description:`Whether this item should be indented to have menu items left-align in
text when an ActionItem is used in the same menu as items that have
checks or checkboxes. Auto-populated by menu.
@ignore`,name:"indent",required:!1,type:{name:"boolean"}},role:{defaultValue:{value:"menuitem"},description:'Aria role to use, defaults to "menuitem".',name:"role",required:!1,type:{name:"enum",value:[{value:'"menuitem"'},{value:'"option"'}]}},style:{defaultValue:null,description:`In case we use react-window, this needs to be added in order to inject
styles to calculate the position
@ignore`,name:"style",required:!1,type:{name:"any"}}}}}catch{}const{offBlack:xa,offBlack32:Ia,white:Va}=D,qa=function(s){const{disabled:e,selected:a,pressed:t,hovered:n,focused:i}=s;return m(se,{icon:ua,size:"small",color:e?Ia:t||n||i?Va:xa,style:[Oe.bounds,!a&&Oe.hide]})},Sa=qa,Oe=T.StyleSheet.create({bounds:{minHeight:16,minWidth:16},hide:{visibility:"hidden"}});try{check.displayName="check",check.__docgenInfo={description:"The check component used by OptionItem.",displayName:"check",props:{disabled:{defaultValue:null,description:"Whether option item is disabled.",name:"disabled",required:!0,type:{name:"boolean"}},selected:{defaultValue:null,description:"Whether option item is selected.",name:"selected",required:!0,type:{name:"boolean"}},pressed:{defaultValue:null,description:"Whether option item is pressed.",name:"pressed",required:!0,type:{name:"boolean"}},hovered:{defaultValue:null,description:"Whether option item is hovered.",name:"hovered",required:!0,type:{name:"boolean"}},focused:{defaultValue:null,description:"Whether option item is focused.",name:"focused",required:!0,type:{name:"boolean"}}}}}catch{}const ka={small:"M11.263 4.324a1 1 0 1 1 1.474 1.352l-5.5 6a1 1 0 0 1-1.505-.036l-2.5-3a1 1 0 1 1 1.536-1.28L6.536 9.48l4.727-5.157z"},{blue:ce,white:Te,offBlack16:Ca,offBlack32:_e,offBlack50:Da,offWhite:He}=D,Oa=function(s){const{disabled:e,selected:a,pressed:t,hovered:n,focused:i}=s,l=C(_e,ce),o=t||n||i,d=e?He:a&&!o?ce:Te,p=e?_e:o?t?l:ce:Te;return m(L,{style:[Q.checkbox,(o||a&&!e)&&Q.noBorder,e&&Q.disabledCheckbox,{backgroundColor:d}],children:a&&m(se,{icon:ka,size:"small",color:p,style:[e&&a&&Q.disabledCheckFormatting]})})},Ta=Oa,Q=T.StyleSheet.create({checkbox:{minHeight:16,minWidth:16,borderRadius:3,borderWidth:1,borderStyle:"solid",borderColor:Da},noBorder:{borderWidth:0},disabledCheckbox:{borderColor:Ca,backgroundColor:He},disabledCheckFormatting:{position:"absolute",top:-1,left:-1}});try{checkbox.displayName="checkbox",checkbox.__docgenInfo={description:"The checkbox component used by OptionItem.",displayName:"checkbox",props:{disabled:{defaultValue:null,description:"Whether option item is disabled.",name:"disabled",required:!0,type:{name:"boolean"}},selected:{defaultValue:null,description:"Whether option item is selected.",name:"selected",required:!0,type:{name:"boolean"}},pressed:{defaultValue:null,description:"Whether option item is pressed.",name:"pressed",required:!0,type:{name:"boolean"}},hovered:{defaultValue:null,description:"Whether option item is hovered.",name:"hovered",required:!0,type:{name:"boolean"}},focused:{defaultValue:null,description:"Whether option item is focused.",name:"focused",required:!0,type:{name:"boolean"}}}}}catch{}class J extends y.Component{constructor(){super(...arguments),this.handleClick=()=>{const{onClick:e,onToggle:a,value:t}=this.props;a(t),e&&e()}}static isClassOf(e){return e&&e.type&&e.type.__IS_OPTION_ITEM__}getCheckComponent(){return this.props.variant==="check"?Sa:Ta}render(){const{disabled:e,label:a,role:t,selected:n,testId:i,style:l,value:o,onClick:d,onToggle:p,variant:g,...I}=this.props,x=ye(),w=this.getCheckComponent();return m(x,{disabled:e,onClick:this.handleClick,role:t,tabIndex:0,children:(h,r)=>{const{pressed:u,hovered:c,focused:f}=h,b=[Y.itemContainer,u?Y.active:(c||f)&&Y.focus,e&&Y.disabled,l];return X(L,{...I,testId:i,style:b,"aria-selected":n?"true":"false",role:t,...r,children:[m(w,{disabled:e,selected:n,pressed:u,hovered:c,focused:f}),m(le,{style:Y.label,children:a})]})}})}}J.defaultProps={disabled:!1,onToggle:()=>{},role:"option",selected:!1};J.__IS_OPTION_ITEM__=!0;const{blue:pe,white:ee,offBlack:_a,offBlack32:Re}=D,Y=T.StyleSheet.create({itemContainer:{flexDirection:"row",background:ee,color:_a,alignItems:"center",height:F,minHeight:F,border:0,outline:0,paddingLeft:k.xSmall_8,paddingRight:k.medium_16,whiteSpace:"nowrap",cursor:"default"},focus:{color:ee,background:pe},active:{color:C(z(pe,.32),ee),background:C(Re,pe)},disabled:{color:Re,background:ee},label:{whiteSpace:"nowrap",userSelect:"none",marginLeft:k.xSmall_8,overflow:"hidden",textOverflow:"ellipsis"},hide:{visibility:"hidden"}});try{optionitem.displayName="optionitem",optionitem.__docgenInfo={description:`For option items that can be selected in a dropdown, selection denoted either
with a check ✔️ or a checkbox ☑️. Use as children in SingleSelect or
MultiSelect.`,displayName:"optionitem",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:{value:"option"},description:'Aria role to use, defaults to "option".',name:"role",required:!1,type:{name:"enum",value:[{value:'"menuitem"'},{value:'"option"'}]}},label:{defaultValue:null,description:"Display text of the option item.",name:"label",required:!0,type:{name:"string"}},value:{defaultValue:null,description:`Value of the item, used as a key of sorts for the parent to manage its
items, because label/display text may be identical for some selects. This
is the value passed back when the item is selected.`,name:"value",required:!0,type:{name:"string"}},disabled:{defaultValue:{value:"false"},description:"Whether this option item is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Optional user-supplied callback when this item is called.",name:"onClick",required:!1,type:{name:"(() => unknown)"}},onToggle:{defaultValue:{value:"() => void 0"},description:`Callback for when this item is pressed to change its selection state.
Passes value of the item. Auto-populated by menu or select.
@ignore`,name:"onToggle",required:!1,type:{name:"(value: string) => unknown"}},selected:{defaultValue:{value:"false"},description:`Whether this item is selected. Auto-populated by menu or select.
@ignore`,name:"selected",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},variant:{defaultValue:null,description:`Whether the item should show a check or checkbox to indicate selection
state. Auto-populated by menu or select.
@ignore`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"checkbox"'},{value:'"check"'}]}},style:{defaultValue:null,description:`In case we use react-window, this needs to be added in order to inject
styles to calculate the position
@ignore`,name:"style",required:!1,type:{name:"any"}}}}}catch{}class E extends y.Component{static isClassOf(e){return e&&e.type&&e.type.__IS_SEPARATOR_ITEM__}render(){return m(L,{style:[Ra.separator,this.props.style],"aria-hidden":"true"})}}E.__IS_SEPARATOR_ITEM__=!0;const Ra=T.StyleSheet.create({separator:{boxShadow:`0 -1px ${D.offBlack16}`,height:1,minHeight:1,marginTop:k.xxxSmall_4,marginBottom:k.xxxSmall_4}});try{separatoritem.displayName="separatoritem",separatoritem.__docgenInfo={description:"A separator used in a dropdown menu.",displayName:"separatoritem",props:{style:{defaultValue:null,description:`In case we use react-window, this needs to be added in order to inject
styles to calculate the position
@ignore`,name:"style",required:!1,type:{name:"any"}}}}}catch{}class re extends y.Component{constructor(){super(...arguments),this.getTestIdFromProps=e=>e.testId||e["data-test-id"]}renderAnchorChildren(e,a){const{disabled:t,testId:n,text:i}=this.props,l=this.props.children({...e,text:i}),o=l.props,d=this.getTestIdFromProps(o);return y.cloneElement(l,{...a,disabled:t,onClick:o.onClick?p=>{o.onClick(p),a.onClick(p)}:a.onClick,"data-test-id":d||n})}render(){return m(da,{onClick:this.props.onClick,disabled:this.props.disabled,children:(e,a)=>this.renderAnchorChildren(e,a)})}}re.defaultProps={disabled:!1};const we=re;try{re.displayName="DropdownOpener",re.__docgenInfo={description:"",displayName:"DropdownOpener",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},children:{defaultValue:null,description:"The child function that returns the anchor the Dropdown will be activated\nby. This function takes two arguments:\n\n- `eventState`: allows the opener element to access pointer event state.\n- `text`: Passes the menu's text/label defined in the parent component.",name:"children",required:!1,type:{name:"((openerProps: OpenerProps) => ReactElement<any, string | JSXElementConstructor<any>>) & ReactNode"}},disabled:{defaultValue:{value:"false"},description:"Whether the opener is disabled. If disabled, disallows interaction.",name:"disabled",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Callback for when the opener is pressed.",name:"onClick",required:!0,type:{name:"(e: SyntheticEvent<Element, Event>) => unknown"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},text:{defaultValue:null,description:"Text for the opener that can be passed to the child as an argument.",name:"text",required:!0,type:{name:"string"}}}}}catch{}function Aa(s,e){if(s.length!==e.length)return!1;for(var a=0;a<s.length;a++)if(s[a]!==e[a])return!1;return!0}function me(s,e){e===void 0&&(e=Aa);var a,t=[],n,i=!1;function l(){for(var o=[],d=0;d<arguments.length;d++)o[d]=arguments[d];return i&&a===this&&e(o,t)||(n=s.apply(this,o),i=!0,a=this,t=o),n}return l}var Ma=typeof performance=="object"&&typeof performance.now=="function",Ae=Ma?function(){return performance.now()}:function(){return Date.now()};function Me(s){cancelAnimationFrame(s.id)}function za(s,e){var a=Ae();function t(){Ae()-a>=e?s.call(null):n.id=requestAnimationFrame(t)}var n={id:requestAnimationFrame(t)};return n}var $=null;function ze(s){if(s===void 0&&(s=!1),$===null||s){var e=document.createElement("div"),a=e.style;a.width="50px",a.height="50px",a.overflow="scroll",a.direction="rtl";var t=document.createElement("div"),n=t.style;return n.width="100px",n.height="100px",e.appendChild(t),document.body.appendChild(e),e.scrollLeft>0?$="positive-descending":(e.scrollLeft=1,e.scrollLeft===0?$="negative":$="positive-ascending"),document.body.removeChild(e),$}return $}var Ea=150,Na=function(e,a){return e};function Fa(s){var e,a=s.getItemOffset,t=s.getEstimatedTotalSize,n=s.getItemSize,i=s.getOffsetForIndexAndAlignment,l=s.getStartIndexForOffset,o=s.getStopIndexForStartIndex,d=s.initInstanceProps,p=s.shouldResetStyleCacheOnItemSizeChange,g=s.validateProps;return e=function(I){ma(x,I);function x(h){var r;return r=I.call(this,h)||this,r._instanceProps=d(r.props,Ce(r)),r._outerRef=void 0,r._resetIsScrollingTimeoutId=null,r.state={instance:Ce(r),isScrolling:!1,scrollDirection:"forward",scrollOffset:typeof r.props.initialScrollOffset=="number"?r.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},r._callOnItemsRendered=void 0,r._callOnItemsRendered=me(function(u,c,f,b){return r.props.onItemsRendered({overscanStartIndex:u,overscanStopIndex:c,visibleStartIndex:f,visibleStopIndex:b})}),r._callOnScroll=void 0,r._callOnScroll=me(function(u,c,f){return r.props.onScroll({scrollDirection:u,scrollOffset:c,scrollUpdateWasRequested:f})}),r._getItemStyle=void 0,r._getItemStyle=function(u){var c=r.props,f=c.direction,b=c.itemSize,q=c.layout,v=r._getItemStyleCache(p&&b,p&&q,p&&f),V;if(v.hasOwnProperty(u))V=v[u];else{var S=a(r.props,u,r._instanceProps),R=n(r.props,u,r._instanceProps),_=f==="horizontal"||q==="horizontal",G=f==="rtl",Z=_?S:0;v[u]=V={position:"absolute",left:G?void 0:Z,right:G?Z:void 0,top:_?0:S,height:_?"100%":R,width:_?R:"100%"}}return V},r._getItemStyleCache=void 0,r._getItemStyleCache=me(function(u,c,f){return{}}),r._onScrollHorizontal=function(u){var c=u.currentTarget,f=c.clientWidth,b=c.scrollLeft,q=c.scrollWidth;r.setState(function(v){if(v.scrollOffset===b)return null;var V=r.props.direction,S=b;if(V==="rtl")switch(ze()){case"negative":S=-b;break;case"positive-descending":S=q-f-b;break}return S=Math.max(0,Math.min(S,q-f)),{isScrolling:!0,scrollDirection:v.scrollOffset<b?"forward":"backward",scrollOffset:S,scrollUpdateWasRequested:!1}},r._resetIsScrollingDebounced)},r._onScrollVertical=function(u){var c=u.currentTarget,f=c.clientHeight,b=c.scrollHeight,q=c.scrollTop;r.setState(function(v){if(v.scrollOffset===q)return null;var V=Math.max(0,Math.min(q,b-f));return{isScrolling:!0,scrollDirection:v.scrollOffset<V?"forward":"backward",scrollOffset:V,scrollUpdateWasRequested:!1}},r._resetIsScrollingDebounced)},r._outerRefSetter=function(u){var c=r.props.outerRef;r._outerRef=u,typeof c=="function"?c(u):c!=null&&typeof c=="object"&&c.hasOwnProperty("current")&&(c.current=u)},r._resetIsScrollingDebounced=function(){r._resetIsScrollingTimeoutId!==null&&Me(r._resetIsScrollingTimeoutId),r._resetIsScrollingTimeoutId=za(r._resetIsScrolling,Ea)},r._resetIsScrolling=function(){r._resetIsScrollingTimeoutId=null,r.setState({isScrolling:!1},function(){r._getItemStyleCache(-1,null)})},r}x.getDerivedStateFromProps=function(r,u){return Pa(r,u),g(r),null};var w=x.prototype;return w.scrollTo=function(r){r=Math.max(0,r),this.setState(function(u){return u.scrollOffset===r?null:{scrollDirection:u.scrollOffset<r?"forward":"backward",scrollOffset:r,scrollUpdateWasRequested:!0}},this._resetIsScrollingDebounced)},w.scrollToItem=function(r,u){u===void 0&&(u="auto");var c=this.props.itemCount,f=this.state.scrollOffset;r=Math.max(0,Math.min(r,c-1)),this.scrollTo(i(this.props,r,u,f,this._instanceProps))},w.componentDidMount=function(){var r=this.props,u=r.direction,c=r.initialScrollOffset,f=r.layout;if(typeof c=="number"&&this._outerRef!=null){var b=this._outerRef;u==="horizontal"||f==="horizontal"?b.scrollLeft=c:b.scrollTop=c}this._callPropsCallbacks()},w.componentDidUpdate=function(){var r=this.props,u=r.direction,c=r.layout,f=this.state,b=f.scrollOffset,q=f.scrollUpdateWasRequested;if(q&&this._outerRef!=null){var v=this._outerRef;if(u==="horizontal"||c==="horizontal")if(u==="rtl")switch(ze()){case"negative":v.scrollLeft=-b;break;case"positive-ascending":v.scrollLeft=b;break;default:var V=v.clientWidth,S=v.scrollWidth;v.scrollLeft=S-V-b;break}else v.scrollLeft=b;else v.scrollTop=b}this._callPropsCallbacks()},w.componentWillUnmount=function(){this._resetIsScrollingTimeoutId!==null&&Me(this._resetIsScrollingTimeoutId)},w.render=function(){var r=this.props,u=r.children,c=r.className,f=r.direction,b=r.height,q=r.innerRef,v=r.innerElementType,V=r.innerTagName,S=r.itemCount,R=r.itemData,_=r.itemKey,G=_===void 0?Na:_,Z=r.layout,Ge=r.outerElementType,Ze=r.outerTagName,Qe=r.style,ea=r.useIsScrolling,aa=r.width,Ve=this.state.isScrolling,oe=f==="horizontal"||Z==="horizontal",ta=oe?this._onScrollHorizontal:this._onScrollVertical,qe=this._getRangeToRender(),na=qe[0],ia=qe[1],Se=[];if(S>0)for(var K=na;K<=ia;K++)Se.push(y.createElement(u,{data:R,key:G(K,R),index:K,isScrolling:ea?Ve:void 0,style:this._getItemStyle(K)}));var ke=t(this.props,this._instanceProps);return y.createElement(Ge||Ze||"div",{className:c,onScroll:ta,ref:this._outerRefSetter,style:ha({position:"relative",height:b,width:aa,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:f},Qe)},y.createElement(v||V||"div",{children:Se,ref:q,style:{height:oe?"100%":ke,pointerEvents:Ve?"none":void 0,width:oe?ke:"100%"}}))},w._callPropsCallbacks=function(){if(typeof this.props.onItemsRendered=="function"){var r=this.props.itemCount;if(r>0){var u=this._getRangeToRender(),c=u[0],f=u[1],b=u[2],q=u[3];this._callOnItemsRendered(c,f,b,q)}}if(typeof this.props.onScroll=="function"){var v=this.state,V=v.scrollDirection,S=v.scrollOffset,R=v.scrollUpdateWasRequested;this._callOnScroll(V,S,R)}},w._getRangeToRender=function(){var r=this.props,u=r.itemCount,c=r.overscanCount,f=this.state,b=f.isScrolling,q=f.scrollDirection,v=f.scrollOffset;if(u===0)return[0,0,0,0];var V=l(this.props,v,this._instanceProps),S=o(this.props,V,v,this._instanceProps),R=!b||q==="backward"?Math.max(1,c):1,_=!b||q==="forward"?Math.max(1,c):1;return[Math.max(0,V-R),Math.max(0,Math.min(u-1,S+_)),V,S]},x}(y.PureComponent),e.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},e}var Pa=function(e,a){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,a.instance},La=50,j=function(e,a,t){var n=e,i=n.itemSize,l=t.itemMetadataMap,o=t.lastMeasuredIndex;if(a>o){var d=0;if(o>=0){var p=l[o];d=p.offset+p.size}for(var g=o+1;g<=a;g++){var I=i(g);l[g]={offset:d,size:I},d+=I}t.lastMeasuredIndex=a}return l[a]},Wa=function(e,a,t){var n=a.itemMetadataMap,i=a.lastMeasuredIndex,l=i>0?n[i].offset:0;return l>=t?Ke(e,a,i,0,t):Ba(e,a,Math.max(0,i),t)},Ke=function(e,a,t,n,i){for(;n<=t;){var l=n+Math.floor((t-n)/2),o=j(e,l,a).offset;if(o===i)return l;o<i?n=l+1:o>i&&(t=l-1)}return n>0?n-1:0},Ba=function(e,a,t,n){for(var i=e.itemCount,l=1;t<i&&j(e,t,a).offset<n;)t+=l,l*=2;return Ke(e,a,Math.min(t,i-1),Math.floor(t/2),n)},Ee=function(e,a){var t=e.itemCount,n=a.itemMetadataMap,i=a.estimatedItemSize,l=a.lastMeasuredIndex,o=0;if(l>=t&&(l=t-1),l>=0){var d=n[l];o=d.offset+d.size}var p=t-l-1,g=p*i;return o+g},$a=Fa({getItemOffset:function(e,a,t){return j(e,a,t).offset},getItemSize:function(e,a,t){return t.itemMetadataMap[a].size},getEstimatedTotalSize:Ee,getOffsetForIndexAndAlignment:function(e,a,t,n,i){var l=e.direction,o=e.height,d=e.layout,p=e.width,g=l==="horizontal"||d==="horizontal",I=g?p:o,x=j(e,a,i),w=Ee(e,i),h=Math.max(0,Math.min(w-I,x.offset)),r=Math.max(0,x.offset-I+x.size);switch(t==="smart"&&(n>=r-I&&n<=h+I?t="auto":t="center"),t){case"start":return h;case"end":return r;case"center":return Math.round(r+(h-r)/2);case"auto":default:return n>=r&&n<=h?n:n<r?r:h}},getStartIndexForOffset:function(e,a,t){return Wa(e,t,a)},getStopIndexForStartIndex:function(e,a,t,n){for(var i=e.direction,l=e.height,o=e.itemCount,d=e.layout,p=e.width,g=i==="horizontal"||d==="horizontal",I=g?p:l,x=j(e,a,n),w=t+I,h=x.offset+x.size,r=a;r<o-1&&h<w;)r++,h+=j(e,r,n).size;return r},initInstanceProps:function(e,a){var t=e,n=t.estimatedItemSize,i={itemMetadataMap:{},estimatedItemSize:n||La,lastMeasuredIndex:-1};return a.resetAfterIndex=function(l,o){o===void 0&&(o=!0),i.lastMeasuredIndex=Math.min(i.lastMeasuredIndex,l-1),a._getItemStyleCache(-1),o&&a.forceUpdate()},i},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.itemSize}});class ja extends y.Component{render(){const{data:e,index:a,style:t}=this.props,n=e[a];if(E.isClassOf(n.component))return y.cloneElement(n.component,{style:t});{const{component:i,populatedProps:l,onClick:o,role:d,ref:p}=n;return y.cloneElement(i,{style:t,...l,key:a,onClick:o,ref:n.focusable&&p,role:d})}}}function be(s,e=0){return s.slice(0,je).reduce((a,t)=>E.isClassOf(t.component)?a+Ue:a+F,e)}function Ua(s,e){return T.StyleSheet.create({dropdownMenu:{minWidth:s,maxHeight:e}}).dropdownMenu}class Ha extends y.Component{constructor(e){super(e),this.getItemSize=a=>{const t=this.props.data[a];return E.isClassOf(t.component)?Ue:F},this.state={height:be(e.data),width:e.width}}componentDidMount(){const{schedule:e}=this.props;e.animationFrame(()=>{this.setWidth()})}componentDidUpdate(e){const{data:a,listRef:t}=this.props;e.data.length!==a.length&&(this.setHeight(),t&&t.current&&t.current.resetAfterIndex(1))}setWidth(){const e=W.findDOMNode(this),a=e==null?void 0:e.parentElement;if(a){const t=a.getBoundingClientRect().width;this.setState({width:t})}}setHeight(){const e=be(this.props.data);this.setState({height:e})}renderInitialItems(){const{data:e}=this.props,a=e.map(n=>n.component);return y.Children.toArray(a).filter(Boolean).sort((n,i)=>i.props.label&&n.props.label?i.props.label.length-n.props.label.length:-1).slice(0,je).map(n=>y.cloneElement(n,{style:{visibility:"hidden"}}))}renderVirtualizedList(e,a){const{data:t,listRef:n}=this.props;return m($a,{height:a,itemCount:t.length,itemSize:this.getItemSize,itemData:t,style:{overflowX:"hidden"},width:e,overscanCount:5,ref:n,children:ja})}render(){const{width:e,height:a}=this.state;return e==null?this.renderInitialItems():this.renderVirtualizedList(e,a)}}const Ka=We(Ha);try{dropdowncorevirtualized.displayName="dropdowncorevirtualized",dropdowncorevirtualized.__docgenInfo={description:"",displayName:"dropdowncorevirtualized",props:{data:{defaultValue:null,description:"The complete list of items that will be virtualized.",name:"data",required:!0,type:{name:"DropdownItem[]"}},width:{defaultValue:null,description:"An optional fixed width that will be passed to the react-window instance",name:"width",required:!1,type:{name:"number | null"}},listRef:{defaultValue:null,description:`The VariableSizeList ref that needs to be passed to access to
react-window's instance methods`,name:"listRef",required:!1,type:{name:"RefObject<VariableSizeList<any>>"}}}}}catch{}const Ya=[{name:"preventOverflow",options:{rootBoundary:"viewport",altAxis:!0,tether:!1}}],Ja=function({children:s,alignment:e="left",onPopperElement:a,referenceElement:t}){const n=fa(t)||document.querySelector("body");return n?W.createPortal(m(ba,{innerRef:i=>{i&&a&&a(i)},referenceElement:t,strategy:"fixed",placement:e==="left"?"bottom-start":"bottom-end",modifiers:Ya,children:({placement:i,ref:l,style:o,hasPopperEscaped:d,isReferenceHidden:p})=>m("div",{ref:l,style:o,"data-test-id":"dropdown-popper","data-placement":i,children:s(!!(d||p))})}),n):null};try{dropdownpopper.displayName="dropdownpopper",dropdownpopper.__docgenInfo={description:"A wrapper for PopperJS that renders the children inside a portal.",displayName:"dropdownpopper",props:{children:{defaultValue:null,description:"The children that will be wrapped by PopperJS.",name:"children",required:!0,type:{name:"(isReferenceHidden: boolean) => ReactNode"}},referenceElement:{defaultValue:null,description:"The reference element used to position the popper.",name:"referenceElement",required:!1,type:{name:"HTMLElement"}},alignment:{defaultValue:{value:"left"},description:`Whether this menu should be left-aligned or right-aligned with the
reference component. Defaults to left-aligned.`,name:"alignment",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}},onPopperElement:{defaultValue:null,description:`The popper's reference.
@see https://popper.js.org/react-popper/v2/render-props/#innerref`,name:"onPopperElement",required:!1,type:{name:"((popperElement?: HTMLElement | null) => unknown)"}},style:{defaultValue:null,description:"Styles that will be applied to the children.",name:"style",required:!1,type:{name:"any"}}}}}catch{}function Xa(s){return s.length===1||!/^[A-Z]/i.test(s)?s:""}function Ga(s,e){let a;return function(...n){const i=()=>{clearTimeout(a),s(...n)};clearTimeout(a),a=setTimeout(i,e)}}const Za=125,Qa=H("span"),Ye=class Je extends y.Component{constructor(e){super(e),this.searchFieldRef=y.createRef(),this.handleInteract=a=>{const{open:t,onOpenChanged:n}=this.props,i=a.target,l=W.findDOMNode(this);t&&l&&!l.contains(i)&&this.popperElement&&!this.popperElement.contains(i)&&n(!1)},this.handleKeyDown=a=>{const{enableTypeAhead:t,onOpenChanged:n,open:i,searchText:l}=this.props,o=a.which||a.keyCode;if(t&&Xa(a.key)&&(a.stopPropagation(),this.textSuggestion+=a.key,this.handleKeyDownDebounced(this.textSuggestion)),!i){if(o===P.down){a.preventDefault(),n(!0);return}return}switch(o){case P.tab:if(this.isSearchFieldFocused()&&l)return;this.restoreTabOrder(),n(!1);return;case P.space:if(this.isSearchFieldFocused())return;a.preventDefault();return;case P.up:a.preventDefault(),this.focusPreviousItem();return;case P.down:a.preventDefault(),this.focusNextItem();return}},this.handleKeyUp=a=>{const{onOpenChanged:t,open:n}=this.props;switch(a.which||a.keyCode){case P.space:if(this.isSearchFieldFocused())return;a.preventDefault();return;case P.escape:n&&(a.stopPropagation(),this.restoreTabOrder(),t(!1));return}},this.handleKeyDownDebounceResult=a=>{const t=this.props.items.filter(n=>n.focusable).findIndex(({component:n})=>{var l;return E.isClassOf(n)?!1:((l=n.props)==null?void 0:l.label.toLowerCase()).startsWith(a.toLowerCase())});if(t>=0){const n=!this.props.open;n&&this.props.onOpenChanged(!0),this.focusedIndex=t,this.scheduleToFocusCurrentItem(i=>{this.props.selectionType==="single"&&n&&i&&(i.click(),this.props.onOpenChanged(!1))})}this.textSuggestion=""},this.handleClickFocus=a=>{this.itemsClicked=!0,this.focusedIndex=a,this.focusedOriginalIndex=this.state.itemRefs[this.focusedIndex].originalIndex},this.handleDropdownMouseUp=a=>{a.nativeEvent.stopImmediatePropagation?a.nativeEvent.stopImmediatePropagation():a.stopPropagation()},this.handleItemClick=(a,t)=>{this.handleClickFocus(a),t.component.props.onClick&&t.component.props.onClick(),t.populatedProps.onClick&&t.populatedProps.onClick()},this.handleSearchTextChanged=a=>{const{onSearchTextChanged:t}=this.props;t&&t(a)},this.resetFocusedIndex(),this.state={prevItems:this.props.items,itemRefs:[],sameItemsFocusable:!1,labels:{noResults:O.noResults,someResults:O.someSelected,...e.labels}},this.virtualizedListRef=y.createRef(),this.handleKeyDownDebounced=Ga(this.handleKeyDownDebounceResult,500),this.textSuggestion=""}static sameItemsFocusable(e,a){if(e.length!==a.length)return!1;for(let t=0;t<e.length;t++)if(e[t].focusable!==a[t].focusable)return!1;return!0}static getDerivedStateFromProps(e,a){if(a.itemRefs.length===0&&e.open||!Je.sameItemsFocusable(a.prevItems,e.items)){const t=[];for(let n=0;n<e.items.length;n++)if(e.items[n].focusable){const i=y.createRef();t.push({ref:i,originalIndex:n})}return{itemRefs:t,prevItems:e.items,sameItemsFocusable:!1}}else return{prevItems:e.items,sameItemsFocusable:!0}}componentDidMount(){this.updateEventListeners(),this.maybeFocusInitialItem()}componentDidUpdate(e){const{open:a}=this.props;if(e.open!==a)this.updateEventListeners(),this.maybeFocusInitialItem();else if(a){const{itemRefs:t,sameItemsFocusable:n}=this.state;if(n)return;{const i=t.findIndex(l=>l.originalIndex===this.focusedOriginalIndex);i===-1?(this.focusedIndex=0,this.itemsClicked=!1,this.scheduleToFocusCurrentItem()):this.focusedIndex=i}this.props.labels!==e.labels&&this.setState({labels:{...this.state.labels,...this.props.labels}})}}componentWillUnmount(){this.removeEventListeners()}resetFocusedIndex(){const{initialFocusedIndex:e}=this.props;if(typeof e<"u")this.focusedIndex=e;else{if(this.hasSearchField()&&!this.isSearchFieldFocused())return this.focusSearchField();this.focusedIndex=0}}maybeFocusInitialItem(){const{autoFocus:e,open:a}=this.props;e&&(a?(this.resetFocusedIndex(),this.scheduleToFocusCurrentItem()):a||(this.itemsClicked=!1))}updateEventListeners(){this.props.open?this.addEventListeners():this.removeEventListeners()}addEventListeners(){document.addEventListener("mouseup",this.handleInteract),document.addEventListener("touchend",this.handleInteract)}removeEventListeners(){document.removeEventListener("mouseup",this.handleInteract),document.removeEventListener("touchend",this.handleInteract)}scheduleToFocusCurrentItem(e){this.shouldVirtualizeList()?this.props.schedule.animationFrame(()=>{this.focusCurrentItem(e)}):this.focusCurrentItem(e)}focusCurrentItem(e){const a=this.state.itemRefs[this.focusedIndex];if(a){this.virtualizedListRef.current&&this.virtualizedListRef.current.scrollToItem(a.originalIndex);const t=W.findDOMNode(a.ref.current);t&&(t.focus(),this.focusedOriginalIndex=a.originalIndex,e&&e(t))}}focusSearchField(){this.searchFieldRef.current&&this.searchFieldRef.current.focus()}hasSearchField(){return!!this.props.isFilterable}isSearchFieldFocused(){return this.hasSearchField()&&document.activeElement===this.searchFieldRef.current}focusPreviousItem(){if(this.focusedIndex===0){if(this.hasSearchField()&&!this.isSearchFieldFocused())return this.focusSearchField();this.focusedIndex=this.state.itemRefs.length-1}else this.focusedIndex-=1;this.scheduleToFocusCurrentItem()}focusNextItem(){if(this.focusedIndex===this.state.itemRefs.length-1){if(this.hasSearchField()&&!this.isSearchFieldFocused())return this.focusSearchField();this.focusedIndex=0}else this.focusedIndex+=1;this.scheduleToFocusCurrentItem()}restoreTabOrder(){this.props.openerElement&&this.props.openerElement.focus()}getItemRole(){const{role:e}=this.props;switch(e){case"listbox":return"option";case"menu":return"menuitem";default:throw new Error(`Expected "listbox" or "menu" for role, but receieved "${e}" instead.`)}}maybeRenderNoResults(){const{items:e,labels:{noResults:a}}=this.props;return e.length===0?m(le,{style:N.noResult,testId:"dropdown-core-no-results",children:a}):null}shouldVirtualizeList(){return this.props.items.length>Za}renderList(){let e=0;const a=this.getItemRole();return this.props.items.map((t,n)=>{if(E.isClassOf(t.component))return t.component;const{component:i,focusable:l,populatedProps:o}=t;l&&(e+=1);const d=e-1,p=this.state.itemRefs[d]?this.state.itemRefs[d].ref:null;return y.cloneElement(i,{...o,key:n,onClick:()=>{this.handleItemClick(d,t)},ref:l?p:null,role:a})})}parseVirtualizedItems(){let e=0;const a=this.getItemRole();return this.props.items.map((t,n)=>{!E.isClassOf(t.component)&&t.focusable&&(e+=1);const i=e-1;return{...t,role:a,ref:t.focusable&&this.state.itemRefs[i]?this.state.itemRefs[i].ref:null,onClick:()=>{this.handleItemClick(i,t)}}})}renderVirtualizedList(){const e=this.parseVirtualizedItems();return m(Ka,{data:e,listRef:this.virtualizedListRef})}renderSearchField(){const{searchText:e}=this.props,{labels:a}=this.state;return m(pa,{clearAriaLabel:a.clearSearch,onChange:this.handleSearchTextChanged,placeholder:a.filter,ref:this.searchFieldRef,style:N.searchInputStyle,value:e||""})}renderDropdownMenu(e,a){const{dropdownStyle:t,light:n,openerElement:i}=this.props,l=i&&window.getComputedStyle(i),o=l?l.getPropertyValue("width"):0,d=be(this.props.items);return X(L,{onMouseUp:this.handleDropdownMouseUp,style:[N.dropdown,n&&N.light,a&&N.hidden,t],testId:"dropdown-core-container",children:[this.props.isFilterable&&this.renderSearchField(),m(L,{role:this.props.role,style:[N.listboxOrMenu,Ua(o,d)],children:e}),this.maybeRenderNoResults()]})}renderDropdown(){const{alignment:e,openerElement:a}=this.props,t=this.shouldVirtualizeList()?this.renderVirtualizedList():this.renderList();return m(Ja,{alignment:e,onPopperElement:n=>{this.popperElement=n},referenceElement:a,children:n=>this.renderDropdownMenu(t,n)})}renderLiveRegion(){const{items:e,open:a}=this.props,{labels:t}=this.state,n=e.length;return m(Qa,{"aria-live":"polite","aria-atomic":"true","aria-relevant":"additions text",style:N.srOnly,"data-test-id":"dropdown-live-region",children:a&&t.someResults(n)})}render(){const{open:e,opener:a,style:t,className:n}=this.props;return X(L,{onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,style:[N.menuWrapper,t],className:n,children:[this.renderLiveRegion(),a,e&&this.renderDropdown()]})}};Ye.defaultProps={alignment:"left",autoFocus:!0,enableTypeAhead:!0,labels:{clearSearch:O.clearSearch,filter:O.filter,noResults:O.noResults,someResults:O.someSelected},light:!1,selectionType:"single"};let et=Ye;const N=T.StyleSheet.create({menuWrapper:{width:"fit-content"},dropdown:{backgroundColor:D.white,borderRadius:4,paddingTop:k.xxxSmall_4,paddingBottom:k.xxxSmall_4,border:`solid 1px ${D.offBlack16}`,boxShadow:`0px 8px 8px 0px ${z(D.offBlack,.1)}`},light:{border:"none"},listboxOrMenu:{overflowY:"auto"},hidden:{pointerEvents:"none",visibility:"hidden"},noResult:{color:D.offBlack64,alignSelf:"center",marginTop:k.xxSmall_6},searchInputStyle:{margin:k.xSmall_8,marginTop:k.xxxSmall_4,minHeight:"auto"},srOnly:{border:0,clip:"rect(0,0,0,0)",height:1,margin:-1,overflow:"hidden",padding:0,position:"absolute",width:1}}),xe=We(et),at=H("button");class tt extends y.Component{render(){const{children:e,disabled:a,focused:t,hovered:n,pressed:i,waiting:l,testId:o,opened:d,"aria-label":p,...g}=this.props,I=ra.controlDefault,x=nt(I),w=a,h=[he.shared,w&&he.disabled,x.default,w&&x.disabled,!w&&i&&x.active],r=m(la,{style:he.text,children:e});return X(at,{"aria-expanded":d?"true":"false","aria-haspopup":"menu","aria-label":p,disabled:w,style:h,type:"button",...g,"data-test-id":o,children:[m(L,{style:!w&&(n||t)&&x.focus,children:r}),m(ca,{size:k.xxxSmall_4}),m(se,{size:"small",color:"currentColor",icon:Le})]})}}const he=T.StyleSheet.create({shared:{position:"relative",display:"inline-flex",alignItems:"center",justifyContent:"center",height:F,border:"none",borderRadius:k.xxxSmall_4,cursor:"pointer",outline:"none",textDecoration:"none",boxSizing:"border-box",touchAction:"manipulation",":focus":{WebkitTapHighlightColor:"rgba(0,0,0,0)"}},disabled:{cursor:"auto"},small:{height:k.xLarge_32},text:{textAlign:"left",display:"inline-block",alignItems:"center",fontWeight:"bold",userSelect:"none",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",pointerEvents:"none"},hiddenText:{visibility:"hidden"},spinner:{position:"absolute"}}),ae={},nt=s=>{const e=s;if(ae[e])return ae[e];const{offBlack32:a}=D,t=C(a,s);let n={};return n={default:{background:"none",color:s},focus:{":after":{content:"''",position:"absolute",height:2,left:0,right:0,bottom:-1,background:"currentColor",borderRadius:2}},active:{color:t},disabled:{color:a,cursor:"default"}},ae[e]=T.StyleSheet.create(n),ae[e]};try{actionmenuopenercore.displayName="actionmenuopenercore",actionmenuopenercore.__docgenInfo={description:`Although this component shares a lot with ButtonCore there are a couple
of differences:
- the down caret icon appears on the right instead of the left
- the down caret icon is smaller that the one that would be used by ButtonCore`,displayName:"actionmenuopenercore",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},hovered:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"hovered",required:!0,type:{name:"boolean"}},focused:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"focused",required:!0,type:{name:"boolean"}},pressed:{defaultValue:null,description:`Whether the component is hovered.

See component documentation for more details.`,name:"pressed",required:!0,type:{name:"boolean"}},waiting:{defaultValue:null,description:`When we're waiting for beforeNav or safeWithNav to complete an async
action, this will be true.

NOTE: We only wait for safeWithNav to complete when doing a full page
load navigation.`,name:"waiting",required:!0,type:{name:"boolean"}},children:{defaultValue:null,description:"Display text for the opener.",name:"children",required:!1,type:{name:"string & ReactNode"}},disabled:{defaultValue:null,description:"Whether the opener is disabled. If disabled, disallows interaction.",name:"disabled",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},opened:{defaultValue:null,description:"Whether the dropdown is open.",name:"opened",required:!0,type:{name:"boolean"}}}}}catch{}class it extends y.Component{constructor(){super(...arguments),this.state={opened:!1},this.handleItemSelected=()=>{this.handleOpenChanged(!1),this.openerElement&&this.openerElement.focus()},this.handleOpenChanged=e=>{this.setState({opened:e}),this.props.onToggle&&this.props.onToggle(e)},this.handleOptionSelected=e=>{const{onChange:a,selectedValues:t}=this.props;if(!(!a||!t)){if(t.includes(e)){const n=t.indexOf(e),i=[...t.slice(0,n),...t.slice(n+1)];a(i)}else a([...t,e]);this.handleItemSelected()}},this.handleOpenerRef=e=>{this.openerElement=W.findDOMNode(e)},this.handleClick=e=>{this.handleOpenChanged(!this.state.opened)}}static getDerivedStateFromProps(e,a){return{opened:typeof e.opened=="boolean"?e.opened:a.opened}}getMenuItems(){const{children:e,selectedValues:a}=this.props,t=y.Children.toArray(e).filter(Boolean),n=t.some(i=>J.isClassOf(i));return t.map(i=>{const{value:l,disabled:o}=i.props,d={component:i,focusable:U.isClassOf(i)||J.isClassOf(i)?!o:!1,populatedProps:{}};return U.isClassOf(i)?{...d,populatedProps:{indent:n,onClick:this.handleItemSelected}}:J.isClassOf(i)?{...d,populatedProps:{onToggle:this.handleOptionSelected,selected:a?a.includes(l):!1,variant:"check"}}:d})}renderOpener(e){const{disabled:a,menuText:t,opener:n,testId:i}=this.props,{opened:l}=this.state;return m(we,{onClick:this.handleClick,disabled:e===0||a,text:t,ref:this.handleOpenerRef,testId:n?void 0:i,children:n||(o=>{const{text:d,...p}=o;return m(tt,{...p,disabled:a,opened:!!l,testId:i,children:t})})})}render(){const{alignment:e,dropdownStyle:a,style:t,className:n}=this.props,i=this.getMenuItems(),l=this.renderOpener(i.length);return m(xe,{role:"menu",style:t,className:n,opener:l,alignment:e,open:this.state.opened,items:i,openerElement:this.openerElement,onOpenChanged:this.handleOpenChanged,dropdownStyle:[rt.menuTopSpace,a]})}}it.defaultProps={alignment:"left",disabled:!1};const rt=T.StyleSheet.create({caret:{marginLeft:4},opener:{whiteSpace:"nowrap",userSelect:"none",overflow:"hidden",textOverflow:"ellipsis"},menuTopSpace:{top:-4}});try{actionmenu.displayName="actionmenu",actionmenu.__docgenInfo={description:`A menu that consists of various types of items.

## Usage

\`\`\`jsx
import {ActionMenu, ActionItem} from "@khanacademy/wonder-blocks-dropdown";

<ActionMenu menuText="Menu">
 <ActionItem href="/profile" label="Profile" />
 <ActionItem label="Settings" onClick={() => {}} />
</ActionMenu>
\`\`\``,displayName:"actionmenu",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},children:{defaultValue:null,description:"The items in this dropdown.",name:"children",required:!1,type:{name:"((Item | Item[]) & (boolean | ReactChild | ReactFragment | ReactPortal | null))"}},menuText:{defaultValue:null,description:"Text for the opener of this menu.",name:"menuText",required:!0,type:{name:"string"}},opened:{defaultValue:null,description:"Can be used to override the state of the ActionMenu by parent elements",name:"opened",required:!1,type:{name:"boolean"}},onToggle:{defaultValue:null,description:`In controlled mode, use this prop in case the parent needs to be notified
when the menu opens/closes.`,name:"onToggle",required:!1,type:{name:"((opened: boolean) => unknown)"}},onChange:{defaultValue:null,description:`A callback that returns items that are newly selected. Use only if this
menu contains select items (and make sure selectedValues is defined).`,name:"onChange",required:!1,type:{name:"((selectedItems: string[]) => unknown)"}},selectedValues:{defaultValue:null,description:`The values of the items that are currently selected. Use only if this
menu contains select items (and make sure onChange is defined).`,name:"selectedValues",required:!1,type:{name:"string[]"}},alignment:{defaultValue:{value:"left"},description:`Whether this menu should be left-aligned or right-aligned with the
opener component. Defaults to left-aligned.`,name:"alignment",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}},disabled:{defaultValue:{value:"false"},description:`Whether this component is disabled. A disabled dropdown may not be opened
and does not support interaction. Defaults to false.`,name:"disabled",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},dropdownStyle:{defaultValue:null,description:`Styling specific to the dropdown component that isn't part of the opener,
passed by the specific implementation of the dropdown menu,`,name:"dropdownStyle",required:!1,type:{name:"any"}},style:{defaultValue:null,description:"Optional styling for the entire dropdown component.",name:"style",required:!1,type:{name:"any"}},className:{defaultValue:null,description:"Optional CSS classes for the entire dropdown component.",name:"className",required:!1,type:{name:"string"}},opener:{defaultValue:null,description:`The child function that returns the anchor the ActionMenu will be
activated by. This function takes eventState, which allows the opener
element to access pointer event state.`,name:"opener",required:!1,type:{name:"((openerProps: OpenerProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}}}}}catch{}const lt=H("button"),{blue:M,white:A,white50:Ne,offBlack:Xe,offBlack16:Fe,offBlack32:ve,offBlack64:ge}=D;class Ie extends y.Component{constructor(){super(...arguments),this.handleClick=e=>{const{open:a}=this.props;this.props.onOpenChanged(!a)}}renderClickableBehavior(e){const{children:a,disabled:t,id:n,isPlaceholder:i,light:l,open:o,testId:d,onOpenChanged:p,...g}=this.props,I=ye(e);return m(I,{disabled:t,onClick:this.handleClick,children:(x,w)=>{const h=ot(l,i),{hovered:r,focused:u,pressed:c}=x,f=l?t||c?"currentColor":A:t?ve:ge,b=[fe.shared,h.default,t&&h.disabled,!t&&(c?h.active:(r||u)&&h.focus)];return X(lt,{...g,"aria-expanded":o?"true":"false","aria-haspopup":"listbox","data-test-id":d,disabled:t,id:n,style:b,type:"button",...w,children:[m(le,{style:fe.text,children:a||" "}),m(se,{icon:Le,color:f,size:"small",style:fe.caret,"aria-hidden":"true"})]})}})}render(){return m(Pe.Consumer,{children:e=>this.renderClickableBehavior(e)})}}Ie.defaultProps={disabled:!1,light:!1,isPlaceholder:!1};const st=4,fe=T.StyleSheet.create({shared:{position:"relative",display:"inline-flex",alignItems:"center",justifyContent:"space-between",color:Xe,height:F,paddingLeft:16,paddingRight:12,borderWidth:0,borderRadius:st,borderStyle:"solid",outline:"none",textDecoration:"none",boxSizing:"border-box",whiteSpace:"nowrap",touchAction:"manipulation"},text:{marginRight:k.xSmall_8,whiteSpace:"nowrap",userSelect:"none",overflow:"hidden",textOverflow:"ellipsis"},caret:{minWidth:16}}),te=16-1,ne=12-1,ie={},ot=(s,e)=>{const a=`${String(s)}-${String(e)}`;if(ie[a])return ie[a];let t={};return s?t={default:{background:"transparent",color:e?Ne:A,borderColor:Ne,borderWidth:1},focus:{borderColor:A,borderWidth:2,paddingLeft:te,paddingRight:ne},active:{paddingLeft:te,paddingRight:ne,borderColor:C(z(M,.32),A),borderWidth:2,color:e?C(z(A,.32),M):C(z(M,.32),A),backgroundColor:C(ve,M)},disabled:{borderColor:C(z(A,.32),M),color:C(z(A,.32),M),cursor:"auto"}}:t={default:{background:A,borderColor:Fe,borderWidth:1,color:e?ge:Xe},focus:{borderColor:M,borderWidth:2,paddingLeft:te,paddingRight:ne},active:{background:C(z(M,.32),A),borderColor:C(ve,M),borderWidth:2,paddingLeft:te,paddingRight:ne},disabled:{background:D.offWhite,borderColor:Fe,color:ge,cursor:"auto"}},ie[a]=T.StyleSheet.create(t),ie[a]};try{selectopener.displayName="selectopener",selectopener.__docgenInfo={description:"An opener that opens select boxes.",displayName:"selectopener",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},children:{defaultValue:null,description:"Display text in the SelectOpener.",name:"children",required:!1,type:{name:"string & ReactNode"}},disabled:{defaultValue:{value:"false"},description:`Whether the SelectOpener is disabled. If disabled, disallows interaction.
Default false.`,name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:`Auto-populated by parent. Used for accessibility purposes, where the label
id should match the field id.`,name:"id",required:!1,type:{name:"string"}},isPlaceholder:{defaultValue:{value:"false"},description:`Whether the displayed text is a placeholder, determined by the creator
of this component. A placeholder has more faded text colors and styles.`,name:"isPlaceholder",required:!1,type:{name:"boolean"}},light:{defaultValue:{value:"false"},description:`Whether to display the "light" version of this component instead, for
use when the item is used on a dark background.`,name:"light",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},onOpenChanged:{defaultValue:null,description:"Callback for when the SelectOpener is pressed.",name:"onOpenChanged",required:!0,type:{name:"(open: boolean) => unknown"}},open:{defaultValue:null,description:"Whether the dropdown is open.",name:"open",required:!0,type:{name:"boolean"}}}}}catch{}class dt extends y.Component{constructor(e){super(e),this.handleOpenChanged=a=>{this.setState({open:a,searchText:""}),this.props.onToggle&&this.props.onToggle(a)},this.handleToggle=a=>{a!==this.props.selectedValue&&this.props.onChange(a),this.state.open&&this.state.openerElement&&this.state.openerElement.focus(),this.setState({open:!1}),this.props.onToggle&&this.props.onToggle(!1)},this.mapOptionItemsToDropdownItems=a=>{let t=0;return this.selectedIndex=0,a.map(n=>{const{selectedValue:i}=this.props,{disabled:l,value:o}=n.props,d=i===o;return d&&(this.selectedIndex=t),l||(t+=1),{component:n,focusable:!l,populatedProps:{onToggle:this.handleToggle,selected:d,variant:"check"}}})},this.handleSearchTextChanged=a=>{this.setState({searchText:a})},this.handleOpenerRef=a=>{const t=W.findDOMNode(a);this.setState({openerElement:t})},this.handleClick=a=>{this.handleOpenChanged(!this.state.open)},this.selectedIndex=0,this.state={open:!1,searchText:""}}static getDerivedStateFromProps(e,a){return{open:typeof e.opened=="boolean"?e.opened:a.open}}filterChildren(e){const{searchText:a}=this.state,t=a.toLowerCase();return e.filter(({props:n})=>!a||n.label.toLowerCase().indexOf(t)>-1)}getMenuItems(e){const{isFilterable:a}=this.props;return this.mapOptionItemsToDropdownItems(a?this.filterChildren(e):e)}renderOpener(e){const{children:a,disabled:t,id:n,light:i,opener:l,placeholder:o,selectedValue:d,testId:p,alignment:g,autoFocus:I,dropdownStyle:x,enableTypeAhead:w,isFilterable:h,labels:r,onChange:u,onToggle:c,opened:f,style:b,className:q,...v}=this.props,V=y.Children.toArray(a).find(_=>_.props.value===d),S=V?V.props.label:o;return l?m(we,{onClick:this.handleClick,disabled:e===0||t,ref:this.handleOpenerRef,text:S,children:l}):m(Ie,{...v,disabled:e===0||t,id:n,isPlaceholder:!V,light:i,onOpenChanged:this.handleOpenChanged,open:this.state.open,ref:this.handleOpenerRef,testId:p,children:S})}render(){const{alignment:e,autoFocus:a,children:t,className:n,dropdownStyle:i,enableTypeAhead:l,isFilterable:o,labels:d,light:p,style:g}=this.props,{searchText:I}=this.state,x=y.Children.toArray(t).filter(Boolean),w=this.getMenuItems(x),h=this.renderOpener(x.length);return m(xe,{role:"listbox",selectionType:"single",alignment:e,autoFocus:a,enableTypeAhead:l,dropdownStyle:[o&&$e,Be,i],initialFocusedIndex:this.selectedIndex,items:w,light:p,onOpenChanged:this.handleOpenChanged,open:this.state.open,opener:h,openerElement:this.state.openerElement,style:g,className:n,isFilterable:o,onSearchTextChanged:o?this.handleSearchTextChanged:void 0,searchText:o?I:"",labels:d})}}dt.defaultProps={alignment:"left",autoFocus:!0,disabled:!1,enableTypeAhead:!0,light:!1,labels:{clearSearch:O.clearSearch,filter:O.filter,noResults:O.noResults,someResults:O.someSelected}};try{singleselect.displayName="singleselect",singleselect.__docgenInfo={description:`The single select allows the selection of one item. Clients are responsible
for keeping track of the selected item in the select.

The single select dropdown closes after the selection of an item. If the same
item is selected, there is no callback.

**NOTE:** If there are more than 125 items, the component automatically uses
[react-window](https://github.com/bvaughn/react-window) to improve
performance when rendering these elements and is capable of handling many
hundreds of items without performance problems.

## Usage
General usage

\`\`\`jsx
import {OptionItem, SingleSelect} from "@khanacademy/wonder-blocks-dropdown";

const [selectedValue, setSelectedValue] = React.useState("");

<SingleSelect placeholder="Choose a fruit" onChange={setSelectedValue} selectedValue={selectedValue}>
    <OptionItem label="Pear" value="pear" />
    <OptionItem label="Mango" value="mango" />
</SingleSelect>
\`\`\`

Mapping a list

\`\`\`jsx
import {OptionItem, SingleSelect} from "@khanacademy/wonder-blocks-dropdown";

const [selectedValue, setSelectedValue] = React.useState("");
const fruitArray = ["Apple", "Banana", "Orange", "Mango", "Pear"];

<SingleSelect
    placeholder="Choose a fruit"
    onChange={setSelectedValue}
    selectedValue={selectedValue}
>
    {fruitArray.map((value, index) => (
        <OptionItem key={index} value={value} label={value} />
    ))}
</SingleSelect>
\`\`\``,displayName:"singleselect",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},alignment:{defaultValue:{value:"left"},description:`Whether this dropdown should be left-aligned or right-aligned with the
opener component. Defaults to left-aligned.`,name:"alignment",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}},autoFocus:{defaultValue:{value:"true"},description:"Whether to auto focus an option. Defaults to true.",name:"autoFocus",required:!1,type:{name:"boolean"}},enableTypeAhead:{defaultValue:{value:"true"},description:`Whether to enable the type-ahead suggestions feature. Defaults to true.

This feature allows to navigate the listbox using the keyboard.
- Type a character: focus moves to the next item with a name that starts
  with the typed character.
- Type multiple characters in rapid succession: focus moves to the next
  item with a name that starts with the string of characters typed.

**NOTE:** Type-ahead is recommended for all listboxes, but there might be
some cases where it's not desirable (for example when using a \`TextField\`
as the opener element).`,name:"enableTypeAhead",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:`Whether this component is disabled. A disabled dropdown may not be opened
and does not support interaction. Defaults to false.`,name:"disabled",required:!1,type:{name:"boolean"}},light:{defaultValue:{value:"false"},description:`Whether to display the "light" version of this component instead, for
use when the component is used on a dark background.`,name:"light",required:!1,type:{name:"boolean"}},labels:{defaultValue:{value:`{
            clearSearch: defaultLabels.clearSearch,
            filter: defaultLabels.filter,
            noResults: defaultLabels.noResults,
            someResults: defaultLabels.someSelected,
        }`},description:"The object containing the custom labels used inside this component.",name:"labels",required:!1,type:{name:"SingleSelectLabels"}},children:{defaultValue:null,description:"The items in this select.",name:"children",required:!1,type:{name:"((false | ReactElement<Readonly<AriaAttributes> & Readonly<{ role?: AriaRole; }> & { label: string; value: string; disabled: boolean; ... 6 more ...; style?: any; }, string | JSXElementConstructor<...>> | null)[] & (boolean | ... 3 more ... | null)) | undefined"}},onChange:{defaultValue:null,description:`Callback for when the selection. Parameter is the value of the newly
selected item.`,name:"onChange",required:!0,type:{name:"(selectedValue: string) => unknown"}},opened:{defaultValue:null,description:"Can be used to override the state of the ActionMenu by parent elements",name:"opened",required:!1,type:{name:"boolean"}},onToggle:{defaultValue:null,description:`In controlled mode, use this prop in case the parent needs to be notified
when the menu opens/closes.`,name:"onToggle",required:!1,type:{name:"((opened: boolean) => unknown)"}},id:{defaultValue:null,description:"Unique identifier attached to the field control. If used, we need to\nguarantee that the ID is unique within everything rendered on a page.\nUsed to match `<label>` with `<button>` elements for screenreaders.",name:"id",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder for the opening component when there are no items selected.",name:"placeholder",required:!0,type:{name:"string"}},selectedValue:{defaultValue:null,description:"Value of the currently selected item.",name:"selectedValue",required:!1,type:{name:"string | null"}},style:{defaultValue:null,description:"Optional styling to add to the opener component wrapper.",name:"style",required:!1,type:{name:"any"}},className:{defaultValue:null,description:"Adds CSS classes to the opener component wrapper.",name:"className",required:!1,type:{name:"string"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}},dropdownStyle:{defaultValue:null,description:"Optional styling to add to the dropdown wrapper.",name:"dropdownStyle",required:!1,type:{name:"any"}},opener:{defaultValue:null,description:`The child function that returns the anchor the ActionMenu will be
activated by. This function takes eventState, which allows the opener
element to access pointer event state.`,name:"opener",required:!1,type:{name:"((openerProps: OpenerProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},isFilterable:{defaultValue:null,description:`When this is true, the dropdown body shows a search text input at the
top. The items will be filtered by the input.`,name:"isFilterable",required:!1,type:{name:"boolean"}}}}}catch{}class ut extends y.Component{constructor(e){super(e),this.handleOpenChanged=a=>{this.setState({open:a,searchText:"",lastSelectedValues:this.props.selectedValues}),this.props.onToggle&&this.props.onToggle(a)},this.handleToggle=a=>{const{onChange:t,selectedValues:n}=this.props;if(n.includes(a)){const i=n.indexOf(a),l=[...n.slice(0,i),...n.slice(i+1)];t(l)}else t([...n,a])},this.handleSelectAll=()=>{const{children:a,onChange:t}=this.props,n=y.Children.toArray(a).filter(Boolean).map(i=>i.props.value);t(n)},this.handleSelectNone=()=>{const{onChange:a}=this.props;a([])},this.mapOptionItemToDropdownItem=a=>{const{selectedValues:t}=this.props,{disabled:n,value:i}=a.props;return{component:a,focusable:!n,populatedProps:{onToggle:this.handleToggle,selected:t.includes(i),variant:"checkbox"}}},this.handleOpenerRef=a=>{const t=W.findDOMNode(a);this.setState({openerElement:t})},this.handleSearchTextChanged=a=>{this.setState({searchText:a})},this.handleClick=a=>{this.handleOpenChanged(!this.state.open)},this.state={open:!1,searchText:"",lastSelectedValues:[],labels:{...O,...e.labels}},this.labels={...O,...e.labels}}static getDerivedStateFromProps(e,a){return{open:typeof e.opened=="boolean"?e.opened:a.open}}componentDidUpdate(e){this.props.labels!==e.labels&&this.setState({labels:{...this.state.labels,...this.props.labels}})}getMenuText(e){const{implicitAllEnabled:a,selectedValues:t}=this.props,{noneSelected:n,someSelected:i,allSelected:l}=this.state.labels,o=a?l:n;switch(t.length){case 0:return o;case 1:const d=e.find(p=>p.props.value===t[0]);return d?d.props.label:o;case e.length:return l;default:return i(t.length)}}getShortcuts(e){const{selectedValues:a,shortcuts:t}=this.props,{selectAllLabel:n,selectNoneLabel:i}=this.state.labels;if(t&&!this.state.searchText){const l=e===a.length,o={component:m(U,{disabled:l,label:n(e),indent:!0,onClick:this.handleSelectAll}),focusable:!l,populatedProps:{}},d=a.length===0,p={component:m(U,{disabled:d,label:i,indent:!0,onClick:this.handleSelectNone}),focusable:!d,populatedProps:{}};return[o,p,{component:m(E,{},"shortcuts-separator"),focusable:!1,populatedProps:{}}]}else return[]}getMenuItems(e){const{isFilterable:a}=this.props;if(!a)return e.map(this.mapOptionItemToDropdownItem);const{searchText:t,lastSelectedValues:n}=this.state,i=t.toLowerCase(),l=e.filter(({props:g})=>!t||g.label.toLowerCase().indexOf(i)>-1),o=[],d=[];for(const g of l)n.includes(g.props.value)?o.push(g):d.push(g);const p=o.map(this.mapOptionItemToDropdownItem);return o.length&&d.length&&p.push({component:m(E,{},"selected-separator"),focusable:!1,populatedProps:{}}),[...p,...d.map(this.mapOptionItemToDropdownItem)]}renderOpener(e){const{disabled:a,id:t,light:n,opener:i,testId:l,alignment:o,dropdownStyle:d,implicitAllEnabled:p,isFilterable:g,labels:I,onChange:x,onToggle:w,opened:h,selectedValues:r,shortcuts:u,style:c,className:f,...b}=this.props,{noneSelected:q}=this.state.labels,v=this.getMenuText(e),V=e.length;return i?m(we,{onClick:this.handleClick,disabled:V===0||a,ref:this.handleOpenerRef,text:v,children:i}):m(Ie,{...b,disabled:V===0||a,id:t,isPlaceholder:v===q,light:n,onOpenChanged:this.handleOpenChanged,open:this.state.open,ref:this.handleOpenerRef,testId:l,children:v})}render(){const{alignment:e,light:a,style:t,className:n,dropdownStyle:i,children:l,isFilterable:o}=this.props,{open:d,searchText:p}=this.state,{clearSearch:g,filter:I,noResults:x,someSelected:w}=this.state.labels,h=y.Children.toArray(l).filter(Boolean),r=h.length,u=this.getMenuItems(h),c=this.renderOpener(h);return m(xe,{role:"listbox",alignment:e,dropdownStyle:[o&&$e,Be,i],isFilterable:o,items:[...this.getShortcuts(r),...u],light:a,onOpenChanged:this.handleOpenChanged,open:d,opener:c,openerElement:this.state.openerElement,selectionType:"multi",style:t,className:n,onSearchTextChanged:o?this.handleSearchTextChanged:void 0,searchText:o?p:"",labels:{clearSearch:g,filter:I,noResults:x,someResults:w}})}}ut.defaultProps={alignment:"left",disabled:!1,light:!1,shortcuts:!1,selectedValues:[]};try{multiselect.displayName="multiselect",multiselect.__docgenInfo={description:`A dropdown that consists of multiple selection items. This select allows
multiple options to be selected. Clients are responsible for keeping track
of the selected items.

The multi select stays open until closed by the user. The onChange callback
happens every time there is a change in the selection of the items.

## Usage

\`\`\`jsx
import {OptionItem, MultiSelect} from "@khanacademy/wonder-blocks-dropdown";

<MultiSelect onChange={setSelectedValues} selectedValues={selectedValues}>
 <OptionItem value="pear">Pear</OptionItem>
 <OptionItem value="mango">Mango</OptionItem>
</MultiSelect>
\`\`\``,displayName:"multiselect",props:{"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-atomic":{defaultValue:null,description:"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",name:"aria-atomic",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"inline"'},{value:'"list"'},{value:'"both"'}]}},"aria-busy":{defaultValue:null,description:"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",name:"aria-busy",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-checked":{defaultValue:null,description:`Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.`,name:"aria-checked",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-colcount":{defaultValue:null,description:`Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.`,name:"aria-colcount",required:!1,type:{name:"number"}},"aria-colindex":{defaultValue:null,description:`Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.`,name:"aria-colindex",required:!1,type:{name:"number"}},"aria-colspan":{defaultValue:null,description:`Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.`,name:"aria-colspan",required:!1,type:{name:"number"}},"aria-controls":{defaultValue:null,description:`Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.`,name:"aria-controls",required:!1,type:{name:"string"}},"aria-current":{defaultValue:null,description:"Indicates the element that represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time"'}},"aria-describedby":{defaultValue:null,description:`Identifies the element (or elements) that describes the object.
@see aria-labelledby`,name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:`Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.`,name:"aria-details",required:!1,type:{name:"string"}},"aria-disabled":{defaultValue:null,description:`Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.`,name:"aria-disabled",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-dropeffect":{defaultValue:null,description:`Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1`,name:"aria-dropeffect",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"copy"'},{value:'"execute"'},{value:'"link"'},{value:'"move"'},{value:'"popup"'}]}},"aria-errormessage":{defaultValue:null,description:`Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.`,name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-flowto":{defaultValue:null,description:`Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.`,name:"aria-flowto",required:!1,type:{name:"string"}},"aria-grabbed":{defaultValue:null,description:`Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,name:"aria-grabbed",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog"'}},"aria-hidden":{defaultValue:null,description:`Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.`,name:"aria-hidden",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-invalid":{defaultValue:null,description:`Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.`,name:"aria-invalid",required:!1,type:{name:'boolean | "false" | "true" | "grammar" | "spelling"'}},"aria-keyshortcuts":{defaultValue:null,description:"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",name:"aria-keyshortcuts",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:`Defines a string value that labels the current element.
@see aria-labelledby.`,name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:`Identifies the element (or elements) that labels the current element.
@see aria-describedby.`,name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-level":{defaultValue:null,description:"Defines the hierarchical level of an element within a structure.",name:"aria-level",required:!1,type:{name:"number"}},"aria-live":{defaultValue:null,description:"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",name:"aria-live",required:!1,type:{name:"enum",value:[{value:'"off"'},{value:'"assertive"'},{value:'"polite"'}]}},"aria-modal":{defaultValue:null,description:"Indicates whether an element is modal when displayed.",name:"aria-modal",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiline":{defaultValue:null,description:"Indicates whether a text box accepts multiple lines of input or only a single line.",name:"aria-multiline",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-multiselectable":{defaultValue:null,description:"Indicates that the user may select more than one item from the current selectable descendants.",name:"aria-multiselectable",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-orientation":{defaultValue:null,description:"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",name:"aria-orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},"aria-owns":{defaultValue:null,description:`Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.`,name:"aria-owns",required:!1,type:{name:"string"}},"aria-placeholder":{defaultValue:null,description:`Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.`,name:"aria-placeholder",required:!1,type:{name:"string"}},"aria-posinset":{defaultValue:null,description:`Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.`,name:"aria-posinset",required:!1,type:{name:"number"}},"aria-pressed":{defaultValue:null,description:`Indicates the current "pressed" state of toggle buttons.
@see aria-checked
@see aria-selected.`,name:"aria-pressed",required:!1,type:{name:'boolean | "false" | "true" | "mixed"'}},"aria-readonly":{defaultValue:null,description:`Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.`,name:"aria-readonly",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-relevant":{defaultValue:null,description:`Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.`,name:"aria-relevant",required:!1,type:{name:"enum",value:[{value:'"additions"'},{value:'"additions removals"'},{value:'"additions text"'},{value:'"all"'},{value:'"removals"'},{value:'"removals additions"'},{value:'"removals text"'},{value:'"text"'},{value:'"text additions"'},{value:'"text removals"'}]}},"aria-required":{defaultValue:null,description:"Indicates that user input is required on the element before a form may be submitted.",name:"aria-required",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-roledescription":{defaultValue:null,description:"Defines a human-readable, author-localized description for the role of an element.",name:"aria-roledescription",required:!1,type:{name:"string"}},"aria-rowcount":{defaultValue:null,description:`Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.`,name:"aria-rowcount",required:!1,type:{name:"number"}},"aria-rowindex":{defaultValue:null,description:`Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.`,name:"aria-rowindex",required:!1,type:{name:"number"}},"aria-rowspan":{defaultValue:null,description:`Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.`,name:"aria-rowspan",required:!1,type:{name:"number"}},"aria-selected":{defaultValue:null,description:`Indicates the current "selected" state of various widgets.
@see aria-checked
@see aria-pressed.`,name:"aria-selected",required:!1,type:{name:'boolean | "false" | "true"'}},"aria-setsize":{defaultValue:null,description:`Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.`,name:"aria-setsize",required:!1,type:{name:"number"}},"aria-sort":{defaultValue:null,description:"Indicates if items in a table or grid are sorted in ascending or descending order.",name:"aria-sort",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"ascending"'},{value:'"descending"'},{value:'"other"'}]}},"aria-valuemax":{defaultValue:null,description:"Defines the maximum allowed value for a range widget.",name:"aria-valuemax",required:!1,type:{name:"number"}},"aria-valuemin":{defaultValue:null,description:"Defines the minimum allowed value for a range widget.",name:"aria-valuemin",required:!1,type:{name:"number"}},"aria-valuenow":{defaultValue:null,description:`Defines the current value for a range widget.
@see aria-valuetext.`,name:"aria-valuenow",required:!1,type:{name:"number"}},"aria-valuetext":{defaultValue:null,description:"Defines the human readable text alternative of aria-valuenow for a range widget.",name:"aria-valuetext",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"link"'},{value:'"menu"'},{value:'"listbox"'},{value:'"tree"'},{value:'"grid"'},{value:'"dialog"'},{value:'"alert"'},{value:'"alertdialog"'},{value:'"application"'},{value:'"article"'},{value:'"banner"'},{value:'"button"'},{value:'"cell"'},{value:'"checkbox"'},{value:'"columnheader"'},{value:'"combobox"'},{value:'"complementary"'},{value:'"contentinfo"'},{value:'"definition"'},{value:'"directory"'},{value:'"document"'},{value:'"feed"'},{value:'"figure"'},{value:'"form"'},{value:'"gridcell"'},{value:'"group"'},{value:'"heading"'},{value:'"img"'},{value:'"listitem"'},{value:'"log"'},{value:'"main"'},{value:'"marquee"'},{value:'"math"'},{value:'"menubar"'},{value:'"menuitem"'},{value:'"menuitemcheckbox"'},{value:'"menuitemradio"'},{value:'"navigation"'},{value:'"note"'},{value:'"option"'},{value:'"presentation"'},{value:'"progressbar"'},{value:'"radio"'},{value:'"radiogroup"'},{value:'"region"'},{value:'"row"'},{value:'"rowgroup"'},{value:'"rowheader"'},{value:'"scrollbar"'},{value:'"search"'},{value:'"searchbox"'},{value:'"separator"'},{value:'"slider"'},{value:'"spinbutton"'},{value:'"status"'},{value:'"switch"'},{value:'"tab"'},{value:'"table"'},{value:'"tablist"'},{value:'"tabpanel"'},{value:'"term"'},{value:'"textbox"'},{value:'"timer"'},{value:'"toolbar"'},{value:'"tooltip"'},{value:'"treegrid"'},{value:'"treeitem"'}]}},alignment:{defaultValue:{value:"left"},description:`Whether this dropdown should be left-aligned or right-aligned with the
opener component. Defaults to left-aligned.`,name:"alignment",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}},disabled:{defaultValue:{value:"false"},description:`Whether this component is disabled. A disabled dropdown may not be opened
and does not support interaction. Defaults to false.`,name:"disabled",required:!1,type:{name:"boolean"}},light:{defaultValue:{value:"false"},description:`Whether to display the "light" version of this component instead, for
use when the component is used on a dark background.`,name:"light",required:!1,type:{name:"boolean"}},selectedValues:{defaultValue:{value:"[]"},description:"The values of the items that are currently selected.",name:"selectedValues",required:!1,type:{name:"string[]"}},shortcuts:{defaultValue:{value:"false"},description:"Whether to display shortcuts for Select All and Select None.",name:"shortcuts",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The items in this select.",name:"children",required:!1,type:{name:"((false | ReactElement<Readonly<AriaAttributes> & Readonly<{ role?: AriaRole; }> & { label: string; value: string; disabled: boolean; ... 6 more ...; style?: any; }, string | JSXElementConstructor<...>> | null)[] & (boolean | ... 3 more ... | null)) | undefined"}},dropdownStyle:{defaultValue:null,description:"Optional styling to add to the dropdown wrapper.",name:"dropdownStyle",required:!1,type:{name:"any"}},id:{defaultValue:null,description:"Unique identifier attached to the field control. If used, we need to\nguarantee that the ID is unique within everything rendered on a page.\nUsed to match `<label>` with `<button>` elements for screenreaders.",name:"id",required:!1,type:{name:"string"}},implicitAllEnabled:{defaultValue:null,description:'When this is true, the menu text shows either "All items" or the value\nset in `props.labels.allSelected` when no item is selected.',name:"implicitAllEnabled",required:!1,type:{name:"boolean"}},isFilterable:{defaultValue:null,description:`When this is true, the dropdown body shows a search text input at the
top. The items will be filtered by the input.
Selected items will be moved to the top when the dropdown is re-opened.`,name:"isFilterable",required:!1,type:{name:"boolean"}},labels:{defaultValue:null,description:"The object containing the custom labels used inside this component.",name:"labels",required:!1,type:{name:"Labels"}},onChange:{defaultValue:null,description:`Callback for when the selection changes. Parameter is an updated array of
the values that are now selected.`,name:"onChange",required:!0,type:{name:"(selectedValues: string[]) => unknown"}},onToggle:{defaultValue:null,description:`In controlled mode, use this prop in case the parent needs to be notified
when the menu opens/closes.`,name:"onToggle",required:!1,type:{name:"((opened: boolean) => unknown)"}},opened:{defaultValue:null,description:"Can be used to override the state of the ActionMenu by parent elements",name:"opened",required:!1,type:{name:"boolean"}},opener:{defaultValue:null,description:`The child function that returns the anchor the MultiSelect will be
activated by. This function takes eventState, which allows the opener
element to access pointer event state.`,name:"opener",required:!1,type:{name:"((openerProps: OpenerProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},style:{defaultValue:null,description:"Optional styling to add to the opener component wrapper.",name:"style",required:!1,type:{name:"any"}},className:{defaultValue:null,description:"Adds CSS classes to the opener component wrapper.",name:"className",required:!1,type:{name:"string"}},testId:{defaultValue:null,description:"Test ID used for e2e testing.",name:"testId",required:!1,type:{name:"string"}}}}}catch{}export{it as A,ut as M,J as O,dt as S,E as a,U as b,O as d};
//# sourceMappingURL=multi-select-4619a451.js.map
