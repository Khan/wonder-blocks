{"version":3,"file":"button-b2794e32.js","sources":["../../packages/wonder-blocks-progress-spinner/src/components/circular-spinner.tsx","../../packages/wonder-blocks-button/src/components/button-core.tsx","../../packages/wonder-blocks-button/src/components/button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {View, addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\n\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nconst heights = {\n    xsmall: 16,\n    small: 24,\n    medium: 48,\n    large: 96,\n} as const;\n\nconst paths = {\n    xsmall: \"M7.237.741C7.165.393 6.95.154 6.656.053A1.01 1.01 0 0 0 6.18.01c-.053.009-.053.009-.087.017C2.553.949 0 4.214 0 7.91 0 12.36 3.598 16 8 16c4.4 0 8-3.647 8-8.112a1.02 1.02 0 0 0-.118-.423.877.877 0 0 0-.808-.48.909.909 0 0 0-.81.46c-.09.151-.13.296-.146.455-.08 3.493-2.737 6.207-6.118 6.207-3.41 0-6.118-2.74-6.118-6.196 0-2.843 1.936-5.291 4.644-6.022.1-.028.224-.082.352-.177a.928.928 0 0 0 .36-.97z\",\n    small: \"M10.598.943c-.093-.449-.362-.748-.732-.875a1.314 1.314 0 0 0-.723-.033C3.83 1.417 0 6.317 0 11.864 0 18.538 5.398 24 12 24c6.598 0 12-5.471 12-12.16a1.333 1.333 0 0 0-.154-.548c-.193-.368-.544-.606-1.023-.606-.472 0-.825.229-1.035.585-.117.2-.169.39-.189.582-.124 5.472-4.294 9.73-9.599 9.73-5.349 0-9.599-4.3-9.599-9.72 0-4.46 3.036-8.299 7.28-9.444.127-.036.291-.107.458-.232.373-.28.57-.711.46-1.244z\",\n    medium: \"M44.19 23.455a1.91 1.91 0 1 1 3.801 0h.003c.004.18.006.363.006.545 0 13.255-10.745 24-24 24S0 37.255 0 24 10.745 0 24 0c.182 0 .364.002.545.006V.01a1.91 1.91 0 1 1 0 3.801v.015A20.564 20.564 0 0 0 24 3.818C12.854 3.818 3.818 12.854 3.818 24c0 11.146 9.036 20.182 20.182 20.182 11.146 0 20.182-9.036 20.182-20.182 0-.182-.003-.364-.007-.545h.015z\",\n    large: \"M88.38 46.91a3.818 3.818 0 1 1 7.602 0h.006c.008.362.012.725.012 1.09 0 26.51-21.49 48-48 48S0 74.51 0 48 21.49 0 48 0c.365 0 .728.004 1.09.012v.005a3.818 3.818 0 1 1 0 7.602v.032c-.362-.01-.725-.015-1.09-.015C25.708 7.636 7.636 25.708 7.636 48c0 22.292 18.072 40.364 40.364 40.364 22.292 0 40.364-18.072 40.364-40.364 0-.365-.005-.728-.015-1.09h.032z\",\n} as const;\n\nconst colors = {\n    light: Color.white,\n    dark: Color.offBlack16,\n} as const;\n\nconst StyledPath = addStyle(\"path\");\n\ntype Props = AriaProps & {\n    /**\n     * The size of the spinner. (large = 96px, medium = 48px, small = 24px,\n     * xsmall = 16px)\n     */\n    size: \"xsmall\" | \"small\" | \"medium\" | \"large\";\n    /** Should a light version of the spinner be shown?\n     * (To be used on a dark background.)\n     */\n    light: boolean;\n    /** Any (optional) styling to apply to the spinner container. */\n    style?: StyleType;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\ntype DefaultProps = {\n    light: Props[\"light\"];\n    size: Props[\"size\"];\n};\n\n/**\n * A circular progress spinner. Used for indicating loading progress. Should\n * be used by default in most places where a loading indicator is needed.\n *\n * ### Usage\n *\n * ```js\n * import {CircularSpinner} from \"@khanacademy/wonder-blocks-progress-spinner\";\n *\n * <CircularSpinner />\n * ```\n */\nexport default class CircularSpinner extends React.Component<Props> {\n    static defaultProps: DefaultProps = {\n        size: \"large\",\n        light: false,\n    };\n\n    render(): React.ReactNode {\n        const {size, light, style, testId} = this.props;\n\n        const height = heights[size];\n        const path = paths[size];\n        const color = light ? colors.light : colors.dark;\n\n        const svg = (\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={height}\n                height={height}\n                viewBox={`0 0 ${height} ${height}`}\n                data-test-id={testId}\n            >\n                <StyledPath\n                    style={[styles.loadingSpinner, {fill: color}]}\n                    fillRule=\"nonzero\"\n                    d={path}\n                />\n            </svg>\n        );\n\n        return <View style={[styles.spinnerContainer, style]}>{svg}</View>;\n    }\n}\n\nconst rotateKeyFrames = {\n    \"0%\": {\n        transform: \"rotate(0deg)\",\n    },\n    \"50%\": {\n        transform: \"rotate(180deg)\",\n    },\n    \"100%\": {\n        transform: \"rotate(360deg)\",\n    },\n} as const;\n\nconst styles = StyleSheet.create({\n    spinnerContainer: {\n        justifyContent: \"center\",\n    },\n    loadingSpinner: {\n        transformOrigin: \"50% 50%\",\n        // @ts-expect-error [FEI-5019]: `animationName` expects a string not an object.\n        animationName: rotateKeyFrames,\n        animationDuration: \"1.1s\",\n        animationIterationCount: \"infinite\",\n        animationTimingFunction: \"linear\",\n    },\n});\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {Link} from \"react-router-dom\";\nimport {__RouterContext} from \"react-router\";\n\nimport {LabelLarge, LabelSmall} from \"@khanacademy/wonder-blocks-typography\";\nimport Color, {\n    SemanticColor,\n    mix,\n    fade,\n} from \"@khanacademy/wonder-blocks-color\";\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport {CircularSpinner} from \"@khanacademy/wonder-blocks-progress-spinner\";\nimport Icon from \"@khanacademy/wonder-blocks-icon\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {isClientSideUrl} from \"@khanacademy/wonder-blocks-clickable\";\n\nimport type {\n    ChildrenProps,\n    ClickableState,\n} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {SharedProps} from \"./button\";\n\ntype Props = SharedProps & ChildrenProps & ClickableState;\n\nconst StyledAnchor = addStyle(\"a\");\nconst StyledButton = addStyle(\"button\");\nconst StyledLink = addStyle(Link);\n\nconst ButtonCore: React.ForwardRefExoticComponent<\n    Props &\n        React.RefAttributes<typeof Link | HTMLButtonElement | HTMLAnchorElement>\n> = React.forwardRef<\n    typeof Link | HTMLButtonElement | HTMLAnchorElement,\n    Props\n>((props: Props, ref) => {\n    const renderInner = (router: any): React.ReactNode => {\n        const {\n            children,\n            skipClientNav,\n            color,\n            disabled: disabledProp,\n            focused,\n            hovered,\n            href = undefined,\n            kind = \"primary\",\n            light = false,\n            pressed,\n            size = \"medium\",\n            style,\n            testId,\n            type = undefined,\n            spinner,\n            icon,\n            id,\n            waiting: _,\n            ...restProps\n        } = props;\n\n        const buttonColor =\n            color === \"destructive\"\n                ? SemanticColor.controlDestructive\n                : SemanticColor.controlDefault;\n\n        const iconWidth = icon ? (size === \"small\" ? 16 : 24) + 8 : 0;\n        const buttonStyles = _generateStyles(\n            buttonColor,\n            kind,\n            light,\n            iconWidth,\n            size,\n        );\n\n        const disabled = spinner || disabledProp;\n\n        const defaultStyle = [\n            sharedStyles.shared,\n            disabled && sharedStyles.disabled,\n            icon && sharedStyles.withIcon,\n            buttonStyles.default,\n            disabled && buttonStyles.disabled,\n            // apply focus effect only to default and secondary buttons\n            kind !== \"tertiary\" &&\n                !disabled &&\n                (pressed\n                    ? buttonStyles.active\n                    : (hovered || focused) && buttonStyles.focus),\n            kind === \"tertiary\" &&\n                !pressed &&\n                focused && [\n                    buttonStyles.focus,\n                    disabled && buttonStyles.disabledFocus,\n                ],\n            size === \"small\" && sharedStyles.small,\n            size === \"large\" && sharedStyles.large,\n        ];\n\n        const commonProps = {\n            \"data-test-id\": testId,\n            id: id,\n            role: \"button\",\n            style: [defaultStyle, style],\n            ...restProps,\n        } as const;\n\n        const Label = size === \"small\" ? LabelSmall : LabelLarge;\n\n        // We have to use `medium` for both md and lg buttons so we can fit the\n        // icons in large buttons.\n        const iconSize = size === \"small\" ? \"small\" : \"medium\";\n\n        const label = (\n            <Label\n                style={[\n                    sharedStyles.text,\n                    size === \"large\" && sharedStyles.largeText,\n                    spinner && sharedStyles.hiddenText,\n                    kind === \"tertiary\" && sharedStyles.textWithFocus,\n                    // apply press/hover effects on the label\n                    kind === \"tertiary\" &&\n                        !disabled &&\n                        (pressed\n                            ? [buttonStyles.hover, buttonStyles.active]\n                            : hovered && buttonStyles.hover),\n                ]}\n                testId={testId ? `${testId}-inner-label` : undefined}\n            >\n                {children}\n            </Label>\n        );\n\n        const sizeMapping = {\n            medium: \"small\",\n            small: \"xsmall\",\n            large: \"medium\",\n        } as const;\n\n        const contents = (\n            <React.Fragment>\n                {icon && (\n                    <Icon\n                        size={iconSize}\n                        color=\"currentColor\"\n                        icon={icon}\n                        style={sharedStyles.icon}\n                        aria-hidden=\"true\"\n                        testId={testId ? `${testId}-icon` : undefined}\n                    />\n                )}\n                {label}\n                {spinner && (\n                    <CircularSpinner\n                        style={sharedStyles.spinner}\n                        size={sizeMapping[size]}\n                        light={kind === \"primary\"}\n                        testId={`${testId || \"button\"}-spinner`}\n                    />\n                )}\n            </React.Fragment>\n        );\n\n        if (href && !disabled) {\n            return router && !skipClientNav && isClientSideUrl(href) ? (\n                <StyledLink\n                    {...commonProps}\n                    to={href}\n                    ref={ref as React.Ref<typeof Link>}\n                >\n                    {contents}\n                </StyledLink>\n            ) : (\n                <StyledAnchor\n                    {...commonProps}\n                    href={href}\n                    ref={ref as React.Ref<HTMLAnchorElement>}\n                >\n                    {contents}\n                </StyledAnchor>\n            );\n        } else {\n            return (\n                <StyledButton\n                    type={type || \"button\"}\n                    {...commonProps}\n                    aria-disabled={disabled}\n                    ref={ref as React.Ref<HTMLButtonElement>}\n                >\n                    {contents}\n                </StyledButton>\n            );\n        }\n    };\n\n    return (\n        <__RouterContext.Consumer>\n            {(router) => renderInner(router)}\n        </__RouterContext.Consumer>\n    );\n});\n\nexport default ButtonCore;\n\nconst sharedStyles = StyleSheet.create({\n    shared: {\n        position: \"relative\",\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: 40,\n        paddingTop: 0,\n        paddingBottom: 0,\n        paddingLeft: 16,\n        paddingRight: 16,\n        border: \"none\",\n        borderRadius: 4,\n        cursor: \"pointer\",\n        outline: \"none\",\n        textDecoration: \"none\",\n        boxSizing: \"border-box\",\n        // This removes the 300ms click delay on mobile browsers by indicating that\n        // \"double-tap to zoom\" shouldn't be used on this element.\n        touchAction: \"manipulation\",\n        userSelect: \"none\",\n        \":focus\": {\n            // Mobile: Removes a blue highlight style shown when the user clicks a button\n            WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\n        },\n    },\n    withIcon: {\n        // The left padding for the button with icon should have 4px less padding\n        paddingLeft: 12,\n    },\n    disabled: {\n        cursor: \"auto\",\n    },\n    small: {\n        height: 32,\n    },\n    large: {\n        borderRadius: Spacing.xxSmall_6,\n        height: 56,\n    },\n    text: {\n        alignItems: \"center\",\n        fontWeight: \"bold\",\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        display: \"inline-block\", // allows the button text to truncate\n        pointerEvents: \"none\", // fix Safari bug where the browser was eating mouse events\n    },\n    largeText: {\n        fontSize: 18,\n        lineHeight: \"20px\",\n    },\n    textWithFocus: {\n        position: \"relative\", // allows the tertiary button border to use the label width\n    },\n    hiddenText: {\n        visibility: \"hidden\",\n    },\n    spinner: {\n        position: \"absolute\",\n    },\n    icon: {\n        paddingRight: Spacing.xSmall_8,\n    },\n});\n\nconst styles: Record<string, any> = {};\n\nconst _generateStyles = (\n    color: string,\n    kind: \"primary\" | \"secondary\" | \"tertiary\",\n    light: boolean,\n    iconWidth: number,\n    size: \"large\" | \"medium\" | \"small\",\n) => {\n    const buttonType =\n        color + kind + light.toString() + iconWidth.toString() + size;\n    if (styles[buttonType]) {\n        return styles[buttonType];\n    }\n\n    const {white, white50, white64, offBlack32, offBlack50, darkBlue} = Color;\n    const fadedColor = mix(fade(color, 0.32), white);\n    const activeColor = mix(offBlack32, color);\n    const padding = size === \"large\" ? Spacing.xLarge_32 : Spacing.medium_16;\n\n    let newStyles: Record<string, any> = {};\n    if (kind === \"primary\") {\n        newStyles = {\n            default: {\n                background: light ? white : color,\n                color: light ? color : white,\n                paddingLeft: padding,\n                paddingRight: padding,\n            },\n            focus: {\n                // This assumes a background of white for the regular button and\n                // a background of darkBlue for the light version. The inner\n                // box shadow/ring is also small enough for a slight variation\n                // in the background color not to matter too much.\n                boxShadow: `0 0 0 1px ${light ? darkBlue : white}, 0 0 0 3px ${\n                    light ? white : color\n                }`,\n            },\n            active: {\n                boxShadow: `0 0 0 1px ${light ? darkBlue : white}, 0 0 0 3px ${\n                    light ? fadedColor : activeColor\n                }`,\n                background: light ? fadedColor : activeColor,\n                color: light ? activeColor : fadedColor,\n            },\n            disabled: {\n                background: light ? fadedColor : offBlack32,\n                color: light ? color : white64,\n                cursor: \"default\",\n                \":focus\": {\n                    boxShadow: `0 0 0 1px ${\n                        light ? offBlack32 : white\n                    }, 0 0 0 3px ${light ? fadedColor : offBlack32}`,\n                },\n            },\n        };\n    } else if (kind === \"secondary\") {\n        newStyles = {\n            default: {\n                background: \"none\",\n                color: light ? white : color,\n                borderColor: light ? white50 : offBlack50,\n                borderStyle: \"solid\",\n                borderWidth: 1,\n                paddingLeft: padding,\n                paddingRight: padding,\n            },\n            focus: {\n                background: light ? \"transparent\" : white,\n                borderColor: light ? white : color,\n                borderWidth: 2,\n                paddingLeft: padding - 1,\n                paddingRight: padding - 1,\n            },\n            active: {\n                background: light ? activeColor : fadedColor,\n                color: light ? fadedColor : activeColor,\n                borderColor: light ? fadedColor : activeColor,\n                borderWidth: 2,\n                // We need to reduce padding to offset the difference\n                // caused by the border becoming thicker on focus.\n                paddingLeft: padding - 1,\n                paddingRight: padding - 1,\n            },\n            disabled: {\n                color: light ? white50 : offBlack32,\n                borderColor: light ? fadedColor : offBlack32,\n                cursor: \"default\",\n                \":focus\": {\n                    borderColor: light ? white50 : offBlack32,\n                    borderWidth: 2,\n                    // We need to reduce padding to offset the difference\n                    // caused by the border becoming thicker on focus.\n                    paddingLeft: padding - 1,\n                    paddingRight: padding - 1,\n                },\n            },\n        };\n    } else if (kind === \"tertiary\") {\n        newStyles = {\n            default: {\n                background: \"none\",\n                color: light ? white : color,\n                paddingLeft: 0,\n                paddingRight: 0,\n            },\n            hover: {\n                \":after\": {\n                    content: \"''\",\n                    position: \"absolute\",\n                    height: 2,\n                    width: \"100%\",\n                    right: 0,\n                    bottom: 0,\n                    background: light ? white : color,\n                    borderRadius: 2,\n                },\n            },\n            focus: {\n                \":after\": {\n                    content: \"''\",\n                    // Since we are using a pseudo element, we need to manually\n                    // calculate the width/height and use absolute position to\n                    // prevent other elements from being shifted around.\n                    position: \"absolute\",\n                    width: `calc(100% + ${Spacing.xxxSmall_4}px)`,\n                    height: `calc(100% - ${Spacing.xxxSmall_4}px)`,\n                    borderStyle: \"solid\",\n                    borderColor: light ? white : color,\n                    borderWidth: Spacing.xxxxSmall_2,\n                    borderRadius: Spacing.xxxSmall_4,\n                },\n            },\n            active: {\n                color: light ? fadedColor : activeColor,\n                \":after\": {\n                    height: 1,\n                    background: light ? fadedColor : activeColor,\n                },\n            },\n            disabled: {\n                color: light ? fadedColor : offBlack32,\n                cursor: \"default\",\n            },\n            disabledFocus: {\n                \":after\": {\n                    borderColor: light ? white50 : offBlack32,\n                },\n            },\n        };\n    } else {\n        throw new Error(\"Button kind not recognized\");\n    }\n\n    styles[buttonType] = StyleSheet.create(newStyles);\n    return styles[buttonType];\n};\n","import * as React from \"react\";\nimport {__RouterContext} from \"react-router\";\n\nimport {getClickableBehavior} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {\n    ClickableState,\n    ChildrenProps,\n} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport type {IconAsset} from \"@khanacademy/wonder-blocks-icon\";\nimport {Link} from \"react-router-dom\";\nimport ButtonCore from \"./button-core\";\n\nexport type SharedProps =\n    /**\n     * aria-label should be used when `spinner={true}` to let people using screen\n     * readers that the action taken by clicking the button will take some\n     * time to complete.\n     */\n    Partial<Omit<AriaProps, \"aria-disabled\">> & {\n        /**\n         * Text to appear on the button.\n         */\n        children: string;\n        /**\n         * An icon, displayed to the left of the title.\n         */\n        icon?: IconAsset;\n        /**\n         * If true, replaces the contents with a spinner.\n         *\n         * Note: setting this prop to `true` will disable the button.\n         *\n         * TODO(kevinb): support spinner + light once we have designs\n         */\n        spinner?: boolean;\n        /**\n         * The color of the button, either blue or red.\n         */\n        color?: \"default\" | \"destructive\";\n        /**\n         * The kind of the button, either primary, secondary, or tertiary.\n         *\n         * In default state:\n         *\n         * - Primary buttons have background colors\n         * - Secondary buttons have a border and no background color\n         * - Tertiary buttons have no background or border\n         */\n        kind?: \"primary\" | \"secondary\" | \"tertiary\";\n        /**\n         * Whether the button is on a dark/colored background.\n         *\n         * Sets primary button background color to white, and secondary and\n         * tertiary button title to color.\n         */\n        light?: boolean;\n        /**\n         * The size of the button. \"medium\" = height: 40; \"small\" = height: 32;\n         * \"large\" = height: 56;\n         */\n        size?: \"medium\" | \"small\" | \"large\";\n        /**\n         * Whether the button is disabled.\n         */\n        disabled?: boolean;\n        /**\n         * An optional id attribute.\n         */\n        id?: string;\n        /**\n         * Test ID used for e2e testing.\n         */\n        testId?: string;\n        /**\n         * Specifies the type of relationship between the current document and the\n         * linked document. Should only be used when `href` is specified. This\n         * defaults to \"noopener noreferrer\" when `target=\"_blank\"`, but can be\n         * overridden by setting this prop to something else.\n         */\n        rel?: string;\n        /**\n         * A target destination window for a link to open in. Should only be used\n         * when `href` is specified.\n         *\n         * TODO(WB-1262): only allow this prop when `href` is also set.t\n         */\n        target?: \"_blank\";\n        /**\n         * Set the tabindex attribute on the rendered element.\n         */\n        tabIndex?: number;\n        /**\n         * Whether to avoid using client-side navigation.\n         *\n         * If the URL passed to href is local to the client-side, e.g.\n         * /math/algebra/eval-exprs, then it tries to use react-router-dom's Link\n         * component which handles the client-side navigation. You can set\n         * `skipClientNav` to true avoid using client-side nav entirely.\n         *\n         * NOTE: All URLs containing a protocol are considered external, e.g.\n         * https://khanacademy.org/math/algebra/eval-exprs will trigger a full\n         * page reload.\n         */\n        skipClientNav?: boolean;\n        /**\n         * Optional custom styles.\n         */\n        style?: StyleType;\n        // TODO(yejia): use this if ADR #47 has been implemented\n        /*\n    style?: Style<Exact<{\n        width?: number | string\n        position: Position,\n        ...MarginStyles,\n        ...FlexItemStyles,\n    }>>,\n    */\n        /**\n         * URL to navigate to.\n         */\n        href?: string;\n\n        /**\n         * Used for buttons within <form>s.\n         */\n        type?: \"submit\";\n\n        /**\n         * Adds CSS classes to the Button.\n         */\n        className?: string;\n        // NOTE(jeresig): Currently React Docgen (used by Styleguidist) doesn't\n        // support ... inside of an exact object type. Thus we had to move the\n        // following propers into this SharedProps, even though they should be\n        // external. Once that's fixed we can split them back apart.\n\n        /**\n         * Function to call when button is clicked.\n         *\n         * This callback should be used for running synchronous code, like\n         * dispatching a Redux action. For asynchronous code see the\n         * beforeNav and safeWithNav props. It should NOT be used to redirect\n         * to a different URL.\n         *\n         * Note: onClick is optional if href is present, but must be defined if\n         * href is not\n         */\n        onClick?: (e: React.SyntheticEvent) => unknown;\n\n        /**\n         * Run async code before navigating. If the promise returned rejects then\n         * navigation will not occur.\n         *\n         * If both safeWithNav and beforeNav are provided, beforeNav will be run\n         * first and safeWithNav will only be run if beforeNav does not reject.\n         *\n         * WARNING: Do not use with `type=\"submit\"`.\n         */\n        beforeNav?: () => Promise<unknown>;\n\n        /**\n         * Run async code in the background while client-side navigating. If the\n         * browser does a full page load navigation, the callback promise must be\n         * settled before the navigation will occur. Errors are ignored so that\n         * navigation is guaranteed to succeed.\n         *\n         * WARNING: Do not use with `type=\"submit\"`.\n         */\n        safeWithNav?: () => Promise<unknown>;\n    };\n\ntype Props = SharedProps;\n\n/**\n * Reusable button component.\n *\n * Consisting of a [`ClickableBehavior`](#clickablebehavior) surrounding a\n * `ButtonCore`. `ClickableBehavior` handles interactions and state changes.\n * `ButtonCore` is a stateless component which displays the different states\n * the `Button` can take.\n *\n * ### Usage\n *\n * ```jsx\n * import Button from \"@khanacademy/wonder-blocks-button\";\n *\n * <Button\n *     onClick={(e) => console.log(\"Hello, world!\")}\n * >\n *     Hello, world!\n * </Button>\n * ```\n */\nconst Button: React.ForwardRefExoticComponent<\n    Props &\n        React.RefAttributes<typeof Link | HTMLButtonElement | HTMLAnchorElement>\n> = React.forwardRef<\n    typeof Link | HTMLButtonElement | HTMLAnchorElement,\n    Props\n>((props: Props, ref) => {\n    const {\n        href = undefined,\n        type = undefined,\n        children,\n        skipClientNav,\n        onClick,\n        beforeNav = undefined,\n        safeWithNav = undefined,\n        tabIndex,\n        target,\n        rel,\n        color = \"default\",\n        kind = \"primary\",\n        light = false,\n        size = \"medium\",\n        disabled = false,\n        spinner = false,\n        ...sharedButtonCoreProps\n    } = props;\n\n    const renderClickableBehavior = (router: any): React.ReactNode => {\n        const ClickableBehavior = getClickableBehavior(\n            href,\n            skipClientNav,\n            router,\n        );\n\n        const renderProp = (\n            state: ClickableState,\n            restChildProps: ChildrenProps,\n        ) => {\n            return (\n                <ButtonCore\n                    {...sharedButtonCoreProps}\n                    {...state}\n                    {...restChildProps}\n                    disabled={disabled}\n                    spinner={spinner || state.waiting}\n                    color={color}\n                    kind={kind}\n                    light={light}\n                    size={size}\n                    skipClientNav={skipClientNav}\n                    href={href}\n                    target={target}\n                    type={type}\n                    tabIndex={tabIndex}\n                    ref={ref}\n                >\n                    {children}\n                </ButtonCore>\n            );\n        };\n\n        if (beforeNav) {\n            return (\n                <ClickableBehavior\n                    disabled={spinner || disabled}\n                    href={href}\n                    role=\"button\"\n                    type={type}\n                    onClick={onClick}\n                    beforeNav={beforeNav}\n                    safeWithNav={safeWithNav}\n                    rel={rel}\n                >\n                    {renderProp}\n                </ClickableBehavior>\n            );\n        } else {\n            return (\n                <ClickableBehavior\n                    disabled={spinner || disabled}\n                    href={href}\n                    role=\"button\"\n                    type={type}\n                    onClick={onClick}\n                    safeWithNav={safeWithNav}\n                    target={target}\n                    rel={rel}\n                >\n                    {renderProp}\n                </ClickableBehavior>\n            );\n        }\n    };\n\n    return (\n        <__RouterContext.Consumer>\n            {(router) => renderClickableBehavior(router)}\n        </__RouterContext.Consumer>\n    );\n});\n\nexport default Button;\n"],"names":["heights","paths","colors","Color","StyledPath","addStyle","CircularSpinner","React.Component","size","light","style","testId","height","path","color","svg","jsx","styles","View","rotateKeyFrames","StyleSheet","StyledAnchor","StyledButton","StyledLink","Link","ButtonCore","React.forwardRef","props","ref","renderInner","router","children","skipClientNav","disabledProp","focused","hovered","href","kind","pressed","type","spinner","icon","id","_","restProps","buttonColor","SemanticColor","iconWidth","buttonStyles","_generateStyles","disabled","defaultStyle","sharedStyles","commonProps","Label","LabelSmall","LabelLarge","iconSize","label","sizeMapping","contents","jsxs","React.Fragment","Icon","isClientSideUrl","__RouterContext","Spacing","buttonType","white","white50","white64","offBlack32","offBlack50","darkBlue","fadedColor","mix","fade","activeColor","padding","newStyles","Button","onClick","beforeNav","safeWithNav","tabIndex","target","rel","sharedButtonCoreProps","renderClickableBehavior","ClickableBehavior","getClickableBehavior","renderProp","state","restChildProps","Button$1"],"mappings":"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"}