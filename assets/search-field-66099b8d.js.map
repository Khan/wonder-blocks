{"version":3,"file":"search-field-66099b8d.js","sources":["../../packages/wonder-blocks-search-field/src/util/constants.ts","../../packages/wonder-blocks-search-field/src/components/search-field.tsx"],"sourcesContent":["// The default labels that will be used by different components\nexport const defaultLabels = {\n    clearSearch: \"Clear search\",\n} as const;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport {styles as typographyStyles} from \"@khanacademy/wonder-blocks-typography\";\nimport {View, IDProvider} from \"@khanacademy/wonder-blocks-core\";\nimport IconButton from \"@khanacademy/wonder-blocks-icon-button\";\nimport {TextField} from \"@khanacademy/wonder-blocks-form\";\nimport Icon, {icons} from \"@khanacademy/wonder-blocks-icon\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport type {StyleType, AriaProps} from \"@khanacademy/wonder-blocks-core\";\n\nimport {defaultLabels} from \"../util/constants\";\n\ntype Props = AriaProps & {\n    /**\n     * ARIA label for the clear button. Defaults to \"Clear search\".\n     */\n    clearAriaLabel?: string;\n    /**\n     * The unique identifier for the input. If one is not provided,\n     * a unique id will be generated.\n     */\n    id?: string;\n    /**\n     * The text input value.\n     */\n    value: string;\n    /**\n     * Provide hints or examples of what to enter. This shows up as\n     * a grayed out text in the field before a value is entered.\n     */\n    placeholder?: string;\n    /**\n     * Whether this field should autofocus on page load.\n     */\n    autoFocus?: boolean;\n    /**\n     * Makes a read-only input field that cannot be focused.\n     * Defaults to false.\n     */\n    disabled?: boolean;\n    /**\n     * Changes the default focus ring color to fit a dark background.\n     */\n    light?: boolean;\n    /**\n     * Custom styles for the main wrapper.\n     */\n    style?: StyleType;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n    /**\n     * Called when the value has changed.\n     */\n    onChange: (newValue: string) => unknown;\n    /**\n     * Handler that is triggered when this component is clicked. For example,\n     * use this to adjust focus in parent component.\n     */\n    onClick?: () => unknown;\n    /**\n     * Called when a key is pressed.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been focused.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n    /**\n     * Called when the element has been blurred.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => unknown;\n};\n\n/**\n * Search Field. A TextField with a search icon on its left side\n * and an X icon on its right side.\n *\n * ### Usage\n * ```jsx\n * import {SearchField} from \"@khanacademy/wonder-blocks-search-field\";\n *\n * const [value, setValue] = React.useState(\"\");\n *\n * const handleChange = (newValue: string) => {\n *     setValue(newValue);\n * };\n *\n * <SearchField\n *     id=\"some-id\"\n *     value={value}\n *     onChange={handleChange}\n * />\n * ```\n */\nconst SearchField: React.ForwardRefExoticComponent<\n    Props & React.RefAttributes<HTMLInputElement>\n> = React.forwardRef<HTMLInputElement, Props>(function SearchField(\n    props: Props,\n    ref,\n) {\n    const {\n        clearAriaLabel = defaultLabels.clearSearch,\n        autoFocus,\n        disabled = false,\n        light = false,\n        id,\n        value,\n        placeholder,\n        style,\n        testId,\n        onClick,\n        onChange,\n        onFocus,\n        onBlur,\n        ...otherProps\n    } = props;\n\n    // We can't just use ref.current to clear the input because ref isn't\n    // always being passed in, so we use an innerRef to allow the\n    // handleClear() function to focus on the input element ref.\n    const innerRef = React.useRef<HTMLInputElement | null | undefined>(null);\n\n    const handleClear: () => void = () => {\n        // Empty the search text.\n        onChange(\"\");\n\n        // Focus back on the text field since the clear button disappears after\n        // the field is cleared.\n        innerRef?.current?.focus();\n    };\n\n    // @ts-expect-error [FEI-5019] - TS2322 - Type '() => JSX.Element | null' is not assignable to type '() => ReactElement<any, string | JSXElementConstructor<any>>'.\n    const maybeRenderClearIconButton: () => React.ReactElement = () => {\n        if (!value.length) {\n            return null;\n        }\n\n        return (\n            <IconButton\n                icon={icons.dismiss}\n                kind=\"tertiary\"\n                onClick={handleClear}\n                style={styles.dismissIcon}\n                aria-label={clearAriaLabel}\n            />\n        );\n    };\n\n    return (\n        <IDProvider id={id} scope=\"search-field\">\n            {(uniqueId) => (\n                <View onClick={onClick} style={[styles.inputContainer, style]}>\n                    <Icon\n                        icon={icons.search}\n                        size=\"medium\"\n                        color={Color.offBlack64}\n                        style={styles.searchIcon}\n                        aria-hidden=\"true\"\n                    />\n                    <TextField\n                        id={`${uniqueId}-field`}\n                        type=\"text\"\n                        autoFocus={autoFocus}\n                        disabled={disabled}\n                        light={light}\n                        onChange={onChange}\n                        onFocus={onFocus}\n                        onBlur={onBlur}\n                        placeholder={placeholder}\n                        ref={(node) => {\n                            // We have to set the value of both refs to\n                            // the HTMLInputElement from TextField.\n                            if (ref) {\n                                // @ts-expect-error [FEI-5019] - TS2339 - Property 'current' does not exist on type 'MutableRefObject<Props | null> | ((instance: Props | null) => void)'.\n                                ref.current = node;\n                            }\n                            innerRef.current = node;\n                        }}\n                        value={value}\n                        style={[\n                            styles.inputStyleReset,\n                            typographyStyles.LabelMedium,\n                        ]}\n                        testId={testId}\n                        {...otherProps}\n                    />\n                    {maybeRenderClearIconButton()}\n                </View>\n            )}\n        </IDProvider>\n    );\n});\n\nconst styles = StyleSheet.create({\n    inputContainer: {\n        boxSizing: \"border-box\",\n        flexDirection: \"row\",\n        borderRadius: Spacing.xxxSmall_4,\n        alignItems: \"center\",\n        height: 40,\n    },\n    searchIcon: {\n        marginLeft: Spacing.xSmall_8,\n        marginRight: Spacing.xSmall_8,\n        position: \"absolute\",\n    },\n    dismissIcon: {\n        margin: 0,\n        position: \"absolute\",\n        right: 0,\n        \":hover\": {\n            border: \"none\",\n        },\n    },\n    inputStyleReset: {\n        display: \"flex\",\n        flex: 1,\n        \"::placeholder\": {\n            color: Color.offBlack64,\n        },\n        width: \"100%\",\n        color: \"inherit\",\n        paddingLeft: Spacing.large_24 + Spacing.medium_16,\n        paddingRight: Spacing.large_24 + Spacing.medium_16,\n    },\n});\n\nexport default SearchField;\n"],"names":["defaultLabels","SearchField","React.forwardRef","props","ref","clearAriaLabel","autoFocus","disabled","light","id","value","placeholder","style","testId","onClick","onChange","onFocus","onBlur","otherProps","innerRef","React.useRef","handleClear","_a","maybeRenderClearIconButton","jsx","IconButton","icons.dismiss","styles","IDProvider","uniqueId","jsxs","View","Icon","icons.search","Color","TextField","node","typographyStyles","StyleSheet","Spacing","SearchField$1"],"mappings":"wbACO,MAAMA,EAAgB,CACzB,YAAa,cACjB,EC+FAC,EAAAC,EAAAA,WAAA,SAAAC,EAAAC,EAAA,CAMI,KAAA,CAAM,eAAAC,EAAAL,EAAA,YAC6B,UAAAM,EAC/B,SAAAC,EAAA,GACW,MAAAC,EAAA,GACH,GAAAC,EACR,MAAAC,EACA,YAAAC,EACA,MAAAC,EACA,OAAAC,EACA,QAAAC,EACA,SAAAC,EACA,QAAAC,EACA,OAAAC,EACA,GAAAC,CACG,EAAAf,EAMPgB,EAAAC,SAAA,IAAA,EAEAC,EAAA,IAAA,OAEIN,EAAA,EAAA,GAIAO,EAAAH,GAAA,YAAAA,EAAA,UAAA,MAAAG,EAAA,OAAyB,EAI7BC,EAAA,IACIb,EAAA,OAIAc,EACIC,EAAC,CAAA,KAAAC,EACe,KAAA,WACP,QAAAL,EACI,MAAAM,EAAA,YACK,aAAAtB,CACF,CAAA,EAThB,KAcR,OAAAmB,EAAAI,EAAA,CAAA,GAAAnB,EAAA,MAAA,eAAA,SAAAoB,GAAAC,EAAAC,EAAA,CAAA,QAAAjB,EAAA,MAAA,CAAAa,EAAA,eAAAf,CAAA,EAAA,SAAA,CAIgBY,EAAAQ,EAAC,CAAA,KAAAC,EACe,KAAA,SACP,MAAAC,EAAA,WACQ,MAAAP,EAAA,WACC,cAAA,MACF,CAAA,EAChBH,EACAW,EAAC,CAAA,GAAA,GAAAN,CAAA,SACkB,KAAA,OACV,UAAAvB,EACL,SAAAC,EACA,MAAAC,EACA,SAAAO,EACA,QAAAC,EACA,OAAAC,EACA,YAAAN,EACA,IAAAyB,GAAA,CAIIhC,IAEIA,EAAA,QAAAgC,GAEJjB,EAAA,QAAAiB,CAAmB,EACvB,MAAA1B,EACA,MAAA,CACOiB,EAAA,gBACIU,EAAA,WACU,EACrB,OAAAxB,EACA,GAAAK,CACI,CAAA,EACRK,EAAA,CAC4B,CAAA,CAAA,CAAA,CAAA,CAKhD,CAAA,EAEAI,EAAAW,EAAA,WAAA,OAAA,CAAiC,eAAA,CACb,UAAA,aACD,cAAA,MACI,aAAAC,EAAA,WACO,WAAA,SACV,OAAA,EACJ,EACZ,WAAA,CACY,WAAAA,EAAA,SACY,YAAAA,EAAA,SACC,SAAA,UACX,EACd,YAAA,CACa,OAAA,EACD,SAAA,WACE,MAAA,EACH,SAAA,CACG,OAAA,MACE,CACZ,EACJ,gBAAA,CACiB,QAAA,OACJ,KAAA,EACH,gBAAA,CACW,MAAAL,EAAA,UACA,EACjB,MAAA,OACO,MAAA,UACA,YAAAK,EAAA,SAAAA,EAAA,UACiC,aAAAA,EAAA,SAAAA,EAAA,SACC,CAEjD,CAAA,EAEAC,EAAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}