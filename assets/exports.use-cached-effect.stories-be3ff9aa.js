import{M as r}from"./index-35e12253.js";import{a as t,j as n,F as c}from"./jsx-runtime-309e447d.js";import{u as h}from"./index-506666d7.js";import"./iframe-97aa1d91.js";import"../sb-preview/runtime.js";import"./chunk-6P7RB4HF-938b085e.js";import"./index-d475d2ea.js";import"./index-9f32f44c.js";import"./_commonjsHelpers-de833af9.js";import"./index-9c2d1831.js";import"./inheritsLoose-9eefaa95.js";import"./assertThisInitialized-081f9914.js";import"./index-4733a090.js";import"./_baseIsEqual-976d9d82.js";import"./uniq-944679ca.js";import"./index-356e4a49.js";function o(i){const e=Object.assign({h1:"h1",pre:"pre",code:"code",p:"p",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},h(),i.components);return n(c,{children:[t(r,{title:"Data / Exports / useCachedEffect()",parameters:{chromatic:{disableSnapshot:!0}}}),`
`,t(e.h1,{id:"usecachedeffect",children:"useCachedEffect()"}),`
`,t(e.pre,{children:t(e.code,{className:"language-ts",children:`function useCachedEffect<TData: ValidCacheData>(
    requestId: string,
    handler: () => Promise<TData>,
    options?: CachedEffectOptions<TData>,
): [Result<TData>, () => void];
`})}),`
`,n(e.p,{children:["This hook invokes the given handler and caches the result using the ",t(e.a,{href:"/docs/data-exports-usesharedcache--page",children:t(e.code,{children:"useSharedCache"})})," hook. The ",t(e.code,{children:"requestId"})," is used to both identify inflight requests that can be shared, and to identify the cached value to use."]}),`
`,n(e.p,{children:["The hook returns an array containing the current state of the request, and a function that can be used to ",t(e.code,{children:"refetch"})," that request on demand. Calling ",t(e.code,{children:"refetch"})," while an inflight request is in progress for the given ",t(e.code,{children:"requestId"})," will be a no-op."]}),`
`,t(e.p,{children:"The behavior of the hook can be modified with the options."}),`
`,t(e.pre,{children:t(e.code,{className:"language-ts",children:`type CachedEffectOptions<TData: ValidCacheData> = {|
    skip?: boolean,
    retainResultOnChange?: boolean,
    onResultChanged?: (result: Result<TData>) => void,
    scope?: string,
    fetchPolicy?: FetchPolicy,
|};
`})}),`
`,n(e.table,{children:[t(e.thead,{children:n(e.tr,{children:[t(e.th,{align:"none",children:"Option"}),t(e.th,{align:"none",children:"Default"}),t(e.th,{align:"none",children:"Description"})]})}),n(e.tbody,{children:[n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"skip"})}),t(e.td,{align:"none",children:t(e.code,{children:"false"})}),n(e.td,{align:"none",children:["When ",t(e.code,{children:"true"}),", the effect will not be executed; otherwise, the effect will be executed. If this is set to ",t(e.code,{children:"true"})," while the effect is still pending, the pending effect will be cancelled."]})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"retainResultOnChange"})}),t(e.td,{align:"none",children:t(e.code,{children:"false"})}),n(e.td,{align:"none",children:["When ",t(e.code,{children:"true"}),", the effect will not reset the result to the loading status while executing if the requestId changes, instead, returning the existing result from before the change; otherwise, the result will be set to loading status. If the status is loading when the changes are made, it will remain as loading; old pending effects are discarded on changes and as such this value has no effect in that case."]})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"onResultChanged"})}),t(e.td,{align:"none",children:t(e.code,{children:"undefined"})}),t(e.td,{align:"none",children:"Callback that is invoked if the result for the given hook has changed. When defined, the hook will invoke this callback whenever it has reason to change the result and will not otherwise affect component rendering directly. When not defined, the hook will ensure the component re-renders to pick up the latest result."})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"scope"})}),t(e.td,{align:"none",children:t(e.code,{children:'"useCachedEffect"'})}),t(e.td,{align:"none",children:"Scope to use with the shared cache. When specified, the given scope will be used to isolate this hook's cached results. Otherwise, the default scope will be used. Changing this value after the first call is not supported."})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"fetchPolicy"})}),t(e.td,{align:"none",children:t(e.a,{href:"/docs/data-types-fetchpolicy--page",children:t(e.code,{children:"FetchPolicy"})})}),n(e.td,{align:"none",children:["Fetch policy to use when fetching the data. Defaults to ",t(e.code,{children:"FetchPolicy.CacheBeforeNetwork"}),"."]})]})]})]})]})}function d(i={}){const{wrapper:e}=Object.assign({},h(),i.components);return e?t(e,{...i,children:t(o,{...i})}):o(i)}const l=()=>{throw new Error("Docs-only story")};l.parameters={docsOnly:!0};const a={title:"Data / Exports / useCachedEffect()",parameters:{chromatic:{disableSnapshot:!0}},tags:["stories-mdx"],includeStories:["__page"]};a.parameters=a.parameters||{};a.parameters.docs={...a.parameters.docs||{},page:d};const T=["__page"];export{T as __namedExportsOrder,l as __page,a as default};
//# sourceMappingURL=exports.use-cached-effect.stories-be3ff9aa.js.map
