const e="@khanacademy/wonder-blocks-clickable",t="3.1.1",o="v1",i="Clickable component for Wonder-Blocks.",n="dist/index.js",a="dist/es/index.js",s="dist/index.d.ts",r={test:'echo "Error: no test specified" && exit 1'},c="",l="MIT",d={access:"public"},p={"@babel/runtime":"^7.18.6","@khanacademy/wonder-blocks-color":"^2.0.1","@khanacademy/wonder-blocks-core":"^5.3.0"},u={aphrodite:"^1.2.5",react:"16.14.0","react-dom":"16.14.0","react-router":"5.2.1","react-router-dom":"5.3.0"},b={"wb-dev-build-settings":"^0.9.7"},y={name:e,version:t,design:o,description:i,main:n,module:a,types:s,scripts:r,author:c,license:l,publishConfig:d,dependencies:p,peerDependencies:u,devDependencies:b},h={children:{description:"The child of Clickable must be a function which returns the component which should be made Clickable.  The function is passed an object with three boolean properties: hovered, focused, and pressed.",control:{type:"text"},type:{name:"string",required:!0},table:{type:{summary:"(ClickableState) => React.Node"}}},id:{description:"An optional id attribute.",table:{type:{summary:"string"}},control:{type:"text"}},tabIndex:{description:"Set the tabindex attribute on the rendered element.",control:{type:"number",min:-1,max:1},table:{type:{summary:"number"}}},light:{description:"Whether the Clickable is on a dark colored background. Sets the default focus ring color to white, instead of blue. Defaults to false.",defaultValue:!1,type:{name:"boolean",required:!0},table:{category:"States",type:{summary:"boolean"}}},disabled:{description:"Disables or enables the child; defaults to false",defaultValue:!1,type:{name:"boolean",required:!0},table:{category:"States",type:{summary:"boolean"}}},hideDefaultFocusRing:{description:"Don't show the default focus ring.  This should be used when implementing a custom focus ring within your own component that uses Clickable.",table:{category:"States",type:{summary:"boolean"}}},className:{description:"Adds CSS classes to the Clickable.",control:{type:"text"},table:{category:"Styling"},type:{name:"string"}},style:{description:"Optional custom styles.",table:{category:"Styling",type:{summary:"StyleType"}}},onClick:{description:"An onClick function which Clickable can execute when clicked.",table:{category:"Events",type:{summary:"(e: SyntheticEvent<>) => mixed",detail:"`onClick` is optional if `href` is present, but must be defined if `href` is not"}},action:"clicked"},onkeyDown:{description:"Respond to raw `keydown` event.",table:{category:"Events",type:{summary:"(e: SyntheticKeyboardEvent<>) => mixed"}}},onKeyUp:{description:"Respond to raw `keyup` event.",table:{category:"Events",type:{summary:"(e: SyntheticKeyboardEvent<>) => mixed"}}},skipClientNav:{description:"Avoids client-side routing in the presence of the `href` prop",defaultValue:!1,control:{type:"boolean"},table:{category:"Navigation",type:{summary:"boolean"}}},rel:{description:'Specifies the type of relationship between the current document and the linked document. Should only be used when `href` is specified. This defaults to `noopener noreferrer` when `target="_blank"`, but can be overridden by setting this prop to something else.',control:{type:"text"},table:{category:"Navigation",type:{summary:"string"}}},target:{description:"A target destination window for a link to open in. Should only be used when `href` is specified.",control:{type:"text"},table:{category:"Navigation",type:{summary:"string"}}},href:{description:"Optional `href` which `Clickable` should direct to, uses client-side routing by default if react-router is present",control:{type:"text"},table:{category:"Navigation",type:{summary:"string",detail:"URL is required when we use `safeWithNav`"}}},beforeNav:{description:"Run async code before navigating. If the promise returned rejects then navigation will not occur. If both `safeWithNav` and `beforeNav` are provided, `beforeNav` will be run first and `safeWithNav` will only be run if `beforeNav` does not reject.",table:{category:"Navigation",type:{summary:"() => Promise<mixed>"}}},safeWithNav:{description:"Run async code in the background while client-side navigating. If the browser does a full page load navigation, the callback promise must be settled before the navigation will occur. Errors are ignored so that navigation is guaranteed to succeed.",table:{category:"Navigation",type:{summary:"() => Promise<mixed>"}}},"aria-label":{description:"A label for the clickable element read by a screen reader.",control:{type:"text"},table:{category:"Accessibility",type:{summary:"string",detail:`aria-label should be used when using
                graphical elements to let people using screen readers the purpose of the
                clickable element.`}}},role:{description:"The role of the component, can be a role of type `ClickableRole`",control:{type:"select"},options:["button","checkbox","link","listbox","menu","menuitem","radio","tab"],table:{category:"Accessibility",type:{summary:"ClickableRole",detail:'"button" | "link" | "checkbox" | "radio" | "listbox" | "option" | "menuitem" | "menu" | "tab"'}}}};export{h as c,y as p};
//# sourceMappingURL=clickable.argtypes-8b694e47.js.map
