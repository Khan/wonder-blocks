{"version":3,"file":"clickable.argtypes-8b694e47.js","sources":["../../__docs__/wonder-blocks-clickable/clickable.argtypes.ts"],"sourcesContent":["import type {InputType} from \"@storybook/csf\";\n\nexport default {\n    children: {\n        description:\n            \"The child of Clickable must be a function which returns the component which should be made Clickable.  The function is passed an object with three boolean properties: hovered, focused, and pressed.\",\n        control: {\n            type: \"text\",\n        },\n        type: {\n            name: \"string\",\n            required: true,\n        },\n        table: {\n            type: {\n                summary: \"(ClickableState) => React.Node\",\n            },\n        },\n    },\n    id: {\n        description: \"An optional id attribute.\",\n        table: {\n            type: {\n                summary: \"string\",\n            },\n        },\n        control: {\n            type: \"text\",\n        },\n    },\n    tabIndex: {\n        description: \"Set the tabindex attribute on the rendered element.\",\n        control: {type: \"number\", min: -1, max: 1},\n        table: {\n            type: {\n                summary: \"number\",\n            },\n        },\n    },\n    /**\n     * States\n     */\n    light: {\n        description:\n            \"Whether the Clickable is on a dark colored background. Sets the default focus ring color to white, instead of blue. Defaults to false.\",\n        defaultValue: false,\n        type: {\n            name: \"boolean\",\n            required: true,\n        },\n        table: {\n            category: \"States\",\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    disabled: {\n        description: \"Disables or enables the child; defaults to false\",\n        defaultValue: false,\n        type: {\n            name: \"boolean\",\n            required: true,\n        },\n        table: {\n            category: \"States\",\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    hideDefaultFocusRing: {\n        description:\n            \"Don't show the default focus ring.  This should be used when implementing a custom focus ring within your own component that uses Clickable.\",\n        table: {\n            category: \"States\",\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    /**\n     * Styling\n     */\n    className: {\n        description: \"Adds CSS classes to the Clickable.\",\n        control: {\n            type: \"text\",\n        },\n        table: {\n            category: \"Styling\",\n        },\n        type: {\n            name: \"string\",\n        },\n    },\n    style: {\n        description: \"Optional custom styles.\",\n        table: {\n            category: \"Styling\",\n            type: {\n                summary: \"StyleType\",\n            },\n        },\n    },\n    /**\n     * Events\n     */\n    onClick: {\n        description:\n            \"An onClick function which Clickable can execute when clicked.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(e: SyntheticEvent<>) => mixed\",\n                detail: \"`onClick` is optional if `href` is present, but must be defined if `href` is not\",\n            },\n        },\n        action: \"clicked\",\n    },\n    onkeyDown: {\n        description: \"Respond to raw `keydown` event.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(e: SyntheticKeyboardEvent<>) => mixed\",\n            },\n        },\n    },\n    onKeyUp: {\n        description: \"Respond to raw `keyup` event.\",\n        table: {\n            category: \"Events\",\n            type: {\n                summary: \"(e: SyntheticKeyboardEvent<>) => mixed\",\n            },\n        },\n    },\n    /**\n     * Navigation\n     */\n    skipClientNav: {\n        description:\n            \"Avoids client-side routing in the presence of the `href` prop\",\n        defaultValue: false,\n        control: {\n            type: \"boolean\",\n        },\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"boolean\",\n            },\n        },\n    },\n    rel: {\n        description:\n            'Specifies the type of relationship between the current document and the linked document. Should only be used when `href` is specified. This defaults to `noopener noreferrer` when `target=\"_blank\"`, but can be overridden by setting this prop to something else.',\n        control: {type: \"text\"},\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"string\",\n            },\n        },\n    },\n    target: {\n        description:\n            \"A target destination window for a link to open in. Should only be used when `href` is specified.\",\n        control: {type: \"text\"},\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"string\",\n            },\n        },\n    },\n    href: {\n        description:\n            \"Optional `href` which `Clickable` should direct to, uses client-side routing by default if react-router is present\",\n        control: {type: \"text\"},\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"string\",\n                detail: \"URL is required when we use `safeWithNav`\",\n            },\n        },\n    },\n    beforeNav: {\n        description:\n            \"Run async code before navigating. If the promise returned rejects then navigation will not occur. If both `safeWithNav` and `beforeNav` are provided, `beforeNav` will be run first and `safeWithNav` will only be run if `beforeNav` does not reject.\",\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"() => Promise<mixed>\",\n            },\n        },\n    },\n    safeWithNav: {\n        description: `Run async code in the background while client-side navigating. If the browser does a full page load navigation, the callback promise must be settled before the navigation will occur. Errors are ignored so that navigation is guaranteed to succeed.`,\n        table: {\n            category: \"Navigation\",\n            type: {\n                summary: \"() => Promise<mixed>\",\n            },\n        },\n    },\n\n    /**\n     * Accessibility\n     */\n    \"aria-label\": {\n        description:\n            \"A label for the clickable element read by a screen reader.\",\n        control: {\n            type: \"text\",\n        },\n        table: {\n            category: \"Accessibility\",\n            type: {\n                summary: \"string\",\n                detail: `aria-label should be used when using\n                graphical elements to let people using screen readers the purpose of the\n                clickable element.`,\n            },\n        },\n    },\n    role: {\n        description:\n            \"The role of the component, can be a role of type `ClickableRole`\",\n        control: {type: \"select\"},\n        options: [\n            \"button\",\n            \"checkbox\",\n            \"link\",\n            \"listbox\",\n            \"menu\",\n            \"menuitem\",\n            \"radio\",\n            \"tab\",\n        ],\n        table: {\n            category: \"Accessibility\",\n            type: {\n                summary: \"ClickableRole\",\n                detail: `\"button\" | \"link\" | \"checkbox\" | \"radio\" | \"listbox\" | \"option\" | \"menuitem\" | \"menu\" | \"tab\"`,\n            },\n        },\n    },\n} satisfies Record<string, InputType>;\n"],"names":["clickableArgtypes"],"mappings":"2qBAEeA,EAAA,CACX,SAAU,CACN,YACI,wMACJ,QAAS,CACL,KAAM,MACV,EACA,KAAM,CACF,KAAM,SACN,SAAU,EACd,EACA,MAAO,CACH,KAAM,CACF,QAAS,gCACb,CACJ,CACJ,EACA,GAAI,CACA,YAAa,4BACb,MAAO,CACH,KAAM,CACF,QAAS,QACb,CACJ,EACA,QAAS,CACL,KAAM,MACV,CACJ,EACA,SAAU,CACN,YAAa,sDACb,QAAS,CAAC,KAAM,SAAU,IAAK,GAAI,IAAK,CAAC,EACzC,MAAO,CACH,KAAM,CACF,QAAS,QACb,CACJ,CACJ,EAIA,MAAO,CACH,YACI,yIACJ,aAAc,GACd,KAAM,CACF,KAAM,UACN,SAAU,EACd,EACA,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,SACb,CACJ,CACJ,EACA,SAAU,CACN,YAAa,mDACb,aAAc,GACd,KAAM,CACF,KAAM,UACN,SAAU,EACd,EACA,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,SACb,CACJ,CACJ,EACA,qBAAsB,CAClB,YACI,+IACJ,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,SACb,CACJ,CACJ,EAIA,UAAW,CACP,YAAa,qCACb,QAAS,CACL,KAAM,MACV,EACA,MAAO,CACH,SAAU,SACd,EACA,KAAM,CACF,KAAM,QACV,CACJ,EACA,MAAO,CACH,YAAa,0BACb,MAAO,CACH,SAAU,UACV,KAAM,CACF,QAAS,WACb,CACJ,CACJ,EAIA,QAAS,CACL,YACI,gEACJ,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,iCACT,OAAQ,kFACZ,CACJ,EACA,OAAQ,SACZ,EACA,UAAW,CACP,YAAa,kCACb,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,wCACb,CACJ,CACJ,EACA,QAAS,CACL,YAAa,gCACb,MAAO,CACH,SAAU,SACV,KAAM,CACF,QAAS,wCACb,CACJ,CACJ,EAIA,cAAe,CACX,YACI,gEACJ,aAAc,GACd,QAAS,CACL,KAAM,SACV,EACA,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,SACb,CACJ,CACJ,EACA,IAAK,CACD,YACI,sQACJ,QAAS,CAAC,KAAM,MAAM,EACtB,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,QACb,CACJ,CACJ,EACA,OAAQ,CACJ,YACI,mGACJ,QAAS,CAAC,KAAM,MAAM,EACtB,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,QACb,CACJ,CACJ,EACA,KAAM,CACF,YACI,qHACJ,QAAS,CAAC,KAAM,MAAM,EACtB,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,SACT,OAAQ,2CACZ,CACJ,CACJ,EACA,UAAW,CACP,YACI,yPACJ,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,sBACb,CACJ,CACJ,EACA,YAAa,CACT,YAAa,yPACb,MAAO,CACH,SAAU,aACV,KAAM,CACF,QAAS,sBACb,CACJ,CACJ,EAKA,aAAc,CACV,YACI,6DACJ,QAAS,CACL,KAAM,MACV,EACA,MAAO,CACH,SAAU,gBACV,KAAM,CACF,QAAS,SACT,OAAQ;AAAA;AAAA,mCAGZ,CACJ,CACJ,EACA,KAAM,CACF,YACI,mEACJ,QAAS,CAAC,KAAM,QAAQ,EACxB,QAAS,CACL,SACA,WACA,OACA,UACA,OACA,WACA,QACA,KACJ,EACA,MAAO,CACH,SAAU,gBACV,KAAM,CACF,QAAS,gBACT,OAAQ,+FACZ,CACJ,CACJ,CACJ"}