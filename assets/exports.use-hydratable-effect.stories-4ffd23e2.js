import{M as d}from"./index-35e12253.js";import{a as t,j as n,F as c}from"./jsx-runtime-309e447d.js";import{u as o}from"./index-506666d7.js";import"./iframe-97aa1d91.js";import"../sb-preview/runtime.js";import"./chunk-6P7RB4HF-938b085e.js";import"./index-d475d2ea.js";import"./index-9f32f44c.js";import"./_commonjsHelpers-de833af9.js";import"./index-9c2d1831.js";import"./inheritsLoose-9eefaa95.js";import"./assertThisInitialized-081f9914.js";import"./index-4733a090.js";import"./_baseIsEqual-976d9d82.js";import"./uniq-944679ca.js";import"./index-356e4a49.js";function a(i){const e=Object.assign({h1:"h1",pre:"pre",code:"code",p:"p",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},o(),i.components);return n(c,{children:[t(d,{title:"Data / Exports / useHydratableEffect()",parameters:{chromatic:{disableSnapshot:!0}}}),`
`,t(e.h1,{id:"usehydratableeffect",children:"useHydratableEffect()"}),`
`,t(e.pre,{children:t(e.code,{className:"language-ts",children:`function useHydratableEffect<TData: ValidCacheData>(
    requestId: string,
    handler: () => Promise<TData>,
    options?: HydratableEffectOptions<TData>,
): Result<TData>;
`})}),`
`,n(e.p,{children:["This hook combines ",t(e.a,{href:"/docs/data-exports-useservereffect--page",children:t(e.code,{children:"useServerEffect"})})," and ",t(e.a,{href:"/docs/data-exports-usecachedeffect--page",children:t(e.code,{children:"useCachedEffect"})})," to form an effect that can execute on the server and hydrate on the client."]}),`
`,n(e.p,{children:["More details about server-side rendering with Wonder Blocks Data can be found in the ",t(e.a,{href:"/docs/data-server-side-rendering-and-hydration--page",children:"relevant overview section"}),"."]}),`
`,t(e.pre,{children:t(e.code,{className:"language-ts",children:`type HydratableEffectOptions<TData: ValidCacheData> = {|
    clientBehavior?: WhenClientSide,
    skip?: boolean,
    retainResultOnChange?: boolean,
    onResultChanged?: (result: Result<TData>) => void,
    scope?: string,
|};
`})}),`
`,n(e.table,{children:[t(e.thead,{children:n(e.tr,{children:[t(e.th,{align:"none",children:"Option"}),t(e.th,{align:"none",children:"Default"}),t(e.th,{align:"none",children:"Description"})]})}),n(e.tbody,{children:[n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"clientBehavior"})}),t(e.td,{align:"none",children:t(e.a,{href:"/docs/data-exports-whenclientside--page#whenclientsideexecutewhennosuccessresult",children:t(e.code,{children:"WhenClientSide.ExecuteWhenNoSuccessResult"})})}),n(e.td,{align:"none",children:["How the hook should behave when rendering client-side for the first time. This controls the hydration and execution of the effect on the client. Changing this value after the initial render is inert. For more information on other behaviors, see ",t(e.a,{href:"/docs/data-exports-whenclientside--page",children:t(e.code,{children:"WhenClientSide"})}),"."]})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"skip"})}),t(e.td,{align:"none",children:t(e.code,{children:"false"})}),n(e.td,{align:"none",children:["When ",t(e.code,{children:"true"}),", the effect will not be executed; otherwise, the effect will be executed. If this is set to ",t(e.code,{children:"true"})," while the effect is still pending, the pending effect will be cancelled."]})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"retainResultOnChange"})}),t(e.td,{align:"none",children:t(e.code,{children:"false"})}),n(e.td,{align:"none",children:["When ",t(e.code,{children:"true"}),", the effect will not reset the result to the loading status while executing if the requestId changes, instead, returning the existing result from before the change; otherwise, the result will be set to loading status. If the status is loading when the changes are made, it will remain as loading; old pending effects are discarded on changes and as such this value has no effect in that case."]})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"onResultChanged"})}),t(e.td,{align:"none",children:t(e.code,{children:"undefined"})}),t(e.td,{align:"none",children:"Callback that is invoked if the result for the given hook has changed. When defined, the hook will invoke this callback whenever it has reason to change the result and will not otherwise affect component rendering directly. When not defined, the hook will ensure the component re-renders to pick up the latest result."})]}),n(e.tr,{children:[t(e.td,{align:"none",children:t(e.code,{children:"scope"})}),t(e.td,{align:"none",children:t(e.code,{children:'"useCachedEffect"'})}),t(e.td,{align:"none",children:"Scope to use with the shared cache. When specified, the given scope will be used to isolate this hook's cached results. Otherwise, the default scope will be used. Changing this value after the first call is not supported."})]})]})]})]})}function h(i={}){const{wrapper:e}=Object.assign({},o(),i.components);return e?t(e,{...i,children:t(a,{...i})}):a(i)}const l=()=>{throw new Error("Docs-only story")};l.parameters={docsOnly:!0};const r={title:"Data / Exports / useHydratableEffect()",parameters:{chromatic:{disableSnapshot:!0}},tags:["stories-mdx"],includeStories:["__page"]};r.parameters=r.parameters||{};r.parameters.docs={...r.parameters.docs||{},page:h};const W=["__page"];export{W as __namedExportsOrder,l as __page,r as default};
//# sourceMappingURL=exports.use-hydratable-effect.stories-4ffd23e2.js.map
