{"version":3,"file":"one-pane-dialog-da34165b.js","sources":["../../packages/wonder-blocks-modal/src/components/modal-dialog.tsx","../../packages/wonder-blocks-modal/src/components/modal-footer.tsx","../../packages/wonder-blocks-modal/src/components/modal-header.tsx","../../packages/wonder-blocks-modal/src/components/focus-trap.tsx","../../packages/wonder-blocks-modal/src/util/constants.ts","../../packages/wonder-blocks-modal/src/util/find-focusable-nodes.ts","../../packages/wonder-blocks-modal/src/components/modal-backdrop.tsx","../../packages/wonder-blocks-modal/src/components/scroll-disabler.ts","../../packages/wonder-blocks-modal/src/components/modal-context.ts","../../packages/wonder-blocks-modal/src/components/modal-launcher.tsx","../../packages/wonder-blocks-modal/src/components/modal-content.tsx","../../packages/wonder-blocks-modal/src/components/close-button.tsx","../../packages/wonder-blocks-modal/src/components/modal-panel.tsx","../../packages/wonder-blocks-modal/src/components/one-pane-dialog.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {\n    MediaLayout,\n    MediaLayoutContext,\n    MEDIA_MODAL_SPEC,\n} from \"@khanacademy/wonder-blocks-layout\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport type {MediaLayoutContextValue} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\ntype Props = {\n    /**\n     * The dialog content\n     */\n    children: React.ReactNode;\n    /**\n     * When set, provides a component that can render content above the top of the modal;\n     * when not set, no additional content is shown above the modal.\n     * This prop is passed down to the ModalDialog.\n     */\n    above?: React.ReactNode;\n    /**\n     * When set, provides a component that will render content below the bottom of the modal;\n     * when not set, no additional content is shown below the modal.\n     * This prop is passed down to the ModalDialog.\n     */\n    below?: React.ReactNode;\n    /**\n     * When set, overrides the default role value. Default role is \"dialog\"\n     * Roles other than dialog and alertdialog aren't appropriate for this\n     * component\n     */\n    role?: \"dialog\" | \"alertdialog\";\n    /**\n     * Custom styles\n     */\n    style?: StyleType;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n    /**\n     * The ID of the content labelling this dialog, if applicable.\n     */\n    \"aria-labelledby\"?: string;\n    /**\n     * The ID of the content describing this dialog, if applicable.\n     */\n    \"aria-describedby\"?: string;\n};\n\ntype DefaultProps = {\n    role: Props[\"role\"];\n};\n\n/**\n * `ModalDialog` is a component that contains these elements:\n * - The visual dialog element itself (`<div role=\"dialog\"/>`)\n * - The custom contents below and/or above the Dialog itself (e.g. decorative graphics).\n *\n * **Accessibility notes:**\n * - By default (e.g. using `OnePaneDialog`), `aria-labelledby` is populated automatically using the dialog title `id`.\n * - If there is a custom Dialog implementation (e.g. `TwoPaneDialog`), the dialog element doesnâ€™t have to have\n * the `aria-labelledby` attribute however this is recommended. It should match the `id` of the dialog title.\n */\nexport default class ModalDialog extends React.Component<Props> {\n    static defaultProps: DefaultProps = {\n        role: \"dialog\",\n    };\n\n    render(): React.ReactNode {\n        const {\n            above,\n            below,\n            role,\n            style,\n            children,\n            testId,\n            /* eslint-disable react/prop-types */\n            // the react/prop-types plugin does not like these\n            \"aria-labelledby\": ariaLabelledBy,\n            \"aria-describedby\": ariaDescribedBy,\n            /* eslint-enable react/prop-types */\n        } = this.props;\n\n        const contextValue: MediaLayoutContextValue = {\n            ssrSize: \"large\",\n            mediaSpec: MEDIA_MODAL_SPEC,\n        };\n\n        return (\n            <MediaLayoutContext.Provider value={contextValue}>\n                <MediaLayout styleSheets={styleSheets}>\n                    {({styles}) => (\n                        <View style={[styles.wrapper, style]}>\n                            {below && <View style={styles.below}>{below}</View>}\n                            <View\n                                role={role}\n                                aria-modal=\"true\"\n                                aria-labelledby={ariaLabelledBy}\n                                aria-describedby={ariaDescribedBy}\n                                style={styles.dialog}\n                                testId={testId}\n                            >\n                                {children}\n                            </View>\n                            {above && <View style={styles.above}>{above}</View>}\n                        </View>\n                    )}\n                </MediaLayout>\n            </MediaLayoutContext.Provider>\n        );\n    }\n}\n\nconst styleSheets = {\n    all: StyleSheet.create({\n        wrapper: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"stretch\",\n            width: \"100%\",\n            height: \"100%\",\n            position: \"relative\",\n        },\n\n        /**\n         * Ensures the dialog container uses the container size\n         */\n        dialog: {\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: 4,\n            overflow: \"hidden\",\n        },\n\n        above: {\n            pointerEvents: \"none\",\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            zIndex: 1,\n        },\n\n        below: {\n            pointerEvents: \"none\",\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            zIndex: -1,\n        },\n    }),\n\n    small: StyleSheet.create({\n        wrapper: {\n            padding: Spacing.medium_16,\n            flexDirection: \"column\",\n        },\n    }),\n} as const;\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\ntype Props = {\n    children: React.ReactNode;\n};\n\n/**\n * Modal footer included after the content.\n *\n * **Implementation notes**:\n *\n * If you are creating a custom Dialog, make sure to follow these guidelines:\n * - Make sure to include it as part of [ModalPanel](/#modalpanel) by using the `footer` prop.\n * - The footer is completely flexible. Meaning the developer needs to add its own custom layout to match design specs.\n *\n * **Usage**\n *\n * ```js\n * <ModalFooter>\n *     <Button onClick={() => {}}>Submit</Button>\n * </ModalFooter>\n * ```\n */\nexport default class ModalFooter extends React.Component<Props> {\n    static isClassOf(instance: any): boolean {\n        return instance && instance.type && instance.type.__IS_MODAL_FOOTER__;\n    }\n    static __IS_MODAL_FOOTER__ = true;\n\n    render(): React.ReactNode {\n        const {children} = this.props;\n        return <View style={styles.footer}>{children}</View>;\n    }\n}\n\nconst styles = StyleSheet.create({\n    footer: {\n        flex: \"0 0 auto\",\n        boxSizing: \"border-box\",\n        minHeight: Spacing.xxxLarge_64,\n        paddingLeft: Spacing.medium_16,\n        paddingRight: Spacing.medium_16,\n        paddingTop: Spacing.xSmall_8,\n        paddingBottom: Spacing.xSmall_8,\n\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"flex-end\",\n\n        boxShadow: `0px -1px 0px ${Color.offBlack16}`,\n    },\n});\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {Breadcrumbs} from \"@khanacademy/wonder-blocks-breadcrumbs\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport {MediaLayout} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport {HeadingMedium, LabelSmall} from \"@khanacademy/wonder-blocks-typography\";\n\ntype Common = {\n    /**\n     * The main title rendered in larger bold text.\n     */\n    title: string;\n    /**\n     * Whether to display the \"light\" version of this component instead, for\n     * use when the item is used on a dark background.\n     */\n    light: boolean;\n    /**\n     * An id to provide a selector for the title element.\n     */\n    titleId: string;\n    /**\n     * Test ID used for e2e testing.\n     *\n     * In this case, this component is internal, so `testId` is composed with\n     * the `testId` passed down from the Dialog variant + a suffix to scope it\n     * to this component.\n     *\n     * @example\n     * For testId=\"some-random-id\"\n     * The result will be: `some-random-id-modal-header`\n     */\n    testId?: string;\n};\n\ntype WithSubtitle = Common & {\n    /**\n     * The dialog subtitle.\n     */\n    subtitle: string;\n};\n\ntype WithBreadcrumbs = Common & {\n    /**\n     * Adds a breadcrumb-trail, appearing in the ModalHeader, above the title.\n     */\n    breadcrumbs: React.ReactElement<React.ComponentProps<typeof Breadcrumbs>>;\n};\n\ntype Props = Common | WithSubtitle | WithBreadcrumbs;\n\ntype DefaultProps = {\n    light: Props[\"light\"];\n};\n\n/**\n * This is a helper component that is never rendered by itself. It is always\n * pinned to the top of the dialog, is responsive using the same behavior as its\n * parent dialog, and has the following properties:\n * - title\n * - breadcrumb OR subtitle, but not both.\n *\n * **Accessibility notes:**\n *\n * - By default (e.g. using [OnePaneDialog](/#onepanedialog)), `titleId` is\n *   populated automatically by the parent container.\n * - If there is a custom Dialog implementation (e.g. `TwoPaneDialog`), the\n *   ModalHeader doesnâ€™t have to have the `titleId` prop however this is\n *   recommended. It should match the `aria-labelledby` prop of the\n *   [ModalDialog](/#modaldialog) component. If you want to see an example of\n *   how to generate this ID, check [IDProvider](/#idprovider).\n *\n * **Implementation notes:**\n *\n * If you are creating a custom Dialog, make sure to follow these guidelines:\n * - Make sure to include it as part of [ModalPanel](/#modalpanel) by using the\n *   `header` prop.\n * - Add a title (required).\n * - Optionally add a subtitle or breadcrumbs.\n * - We encourage you to add `titleId` (see Accessibility notes).\n * - If the `ModalPanel` has a dark background, make sure to set `light` to\n *   `false`.\n * - If you need to create e2e tests, make sure to pass a `testId` prop and\n *   add a sufix to scope the testId to this component: e.g.\n *   `some-random-id-ModalHeader`. This scope will also be passed to the title\n *   and subtitle elements: e.g. `some-random-id-ModalHeader-title`.\n *\n * Example:\n *\n * ```js\n * <ModalHeader\n *      title=\"Sidebar using ModalHeader\"\n *      subtitle=\"subtitle\"\n *      titleId=\"uniqueTitleId\"\n *      light={false}\n *  />\n * ```\n */\nexport default class ModalHeader extends React.Component<Props> {\n    static defaultProps: DefaultProps = {\n        light: true,\n    };\n\n    render(): React.ReactNode {\n        const {\n            // @ts-expect-error [FEI-5019] - TS2339 - Property 'breadcrumbs' does not exist on type 'Readonly<Props> & Readonly<{ children?: ReactNode; }>'.\n            breadcrumbs = undefined,\n            light,\n            // @ts-expect-error [FEI-5019] - TS2339 - Property 'subtitle' does not exist on type 'Readonly<Props> & Readonly<{ children?: ReactNode; }>'.\n            subtitle = undefined,\n            testId,\n            title,\n            titleId,\n        } = this.props;\n\n        if (subtitle && breadcrumbs) {\n            throw new Error(\n                \"'subtitle' and 'breadcrumbs' can't be used together\",\n            );\n        }\n\n        return (\n            <MediaLayout styleSheets={styleSheets}>\n                {({styles}) => (\n                    <View\n                        style={[styles.header, !light && styles.dark]}\n                        testId={testId}\n                    >\n                        {breadcrumbs && (\n                            <View style={styles.breadcrumbs}>\n                                {breadcrumbs}\n                            </View>\n                        )}\n                        <HeadingMedium\n                            style={styles.title}\n                            id={titleId}\n                            testId={testId && `${testId}-title`}\n                        >\n                            {title}\n                        </HeadingMedium>\n                        {subtitle && (\n                            <LabelSmall\n                                style={light && styles.subtitle}\n                                testId={testId && `${testId}-subtitle`}\n                            >\n                                {subtitle}\n                            </LabelSmall>\n                        )}\n                    </View>\n                )}\n            </MediaLayout>\n        );\n    }\n}\n\nconst styleSheets = {\n    all: StyleSheet.create({\n        header: {\n            boxShadow: `0px 1px 0px ${Color.offBlack16}`,\n            display: \"flex\",\n            flexDirection: \"column\",\n            minHeight: 66,\n            padding: `${Spacing.large_24}px ${Spacing.xLarge_32}px`,\n            position: \"relative\",\n            width: \"100%\",\n        },\n\n        dark: {\n            background: Color.darkBlue,\n            color: Color.white,\n        },\n\n        breadcrumbs: {\n            color: Color.offBlack64,\n            marginBottom: Spacing.xSmall_8,\n        },\n\n        title: {\n            // Prevent title from overlapping the close button\n            paddingRight: Spacing.medium_16,\n        },\n\n        subtitle: {\n            color: Color.offBlack64,\n            marginTop: Spacing.xSmall_8,\n        },\n    }),\n\n    small: StyleSheet.create({\n        header: {\n            paddingLeft: Spacing.medium_16,\n            paddingRight: Spacing.medium_16,\n        },\n\n        title: {\n            paddingRight: Spacing.xLarge_32,\n        },\n    }),\n} as const;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport {View} from \"@khanacademy/wonder-blocks-core\";\n\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\n/**\n * List of elements that can be focused\n * @see https://www.w3.org/TR/html5/editing.html#can-be-focused\n */\nconst FOCUSABLE_ELEMENTS =\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n\n/**\n * This component ensures that focus stays within itself. If the user uses Tab\n * at the end of the modal, or Shift-Tab at the start of the modal, then this\n * component wraps focus to the start/end respectively.\n *\n * We use this in `ModalBackdrop` to ensure that focus stays within the launched\n * modal.\n *\n * Adapted from the WAI-ARIA dialog behavior example.\n * https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/dialog-modal/dialog.html\n *\n * NOTE(mdr): This component frequently references the \"modal\" and the \"modal\n *     root\", to aid readability in this package. But this component isn't\n *     actually coupled to the modal, and these could be renamed \"children\"\n *     instead if we were to generalize!\n */\n\ntype Props = {\n    children: React.ReactNode;\n    /**\n     * Style applied to the View containing children.\n     * TODO(kevinb): only allow z-index to be specified.  We'll be able to remove\n     * this prop once we remove all uses of z-indexes from webapp.\n     */\n    style?: StyleType;\n};\n\nexport default class FocusTrap extends React.Component<Props> {\n    /**\n     * Tabbing is restricted to descendents of this element.\n     */\n    modalRoot: Node | null | undefined;\n\n    getModalRoot: (node?: any) => void = (node) => {\n        if (!node) {\n            // The component is being umounted\n            return;\n        }\n\n        const modalRoot = ReactDOM.findDOMNode(node);\n        if (!modalRoot) {\n            throw new Error(\n                \"Assertion error: modal root should exist after mount\",\n            );\n        }\n        this.modalRoot = modalRoot;\n    };\n\n    /**\n     * Try to focus the given node. Return true if successful.\n     */\n    tryToFocus(node: Node): boolean | null | undefined {\n        if (node instanceof HTMLElement) {\n            try {\n                node.focus();\n            } catch (e: any) {\n                // ignore error\n            }\n\n            return document.activeElement === node;\n        }\n    }\n\n    /**\n     * Focus the next available focusable element within the modal root.\n     *\n     * @param {boolean} isLast Used to determine the next available item. true =\n     * First element within the modal, false = Last element within the modal.\n     */\n    focusElementIn(isLast: boolean) {\n        const modalRootAsHtmlEl = this.modalRoot as HTMLElement;\n        // Get the list of available focusable elements within the modal.\n        const focusableNodes = Array.from(\n            modalRootAsHtmlEl.querySelectorAll(FOCUSABLE_ELEMENTS),\n        );\n\n        const nodeIndex = !isLast ? focusableNodes.length - 1 : 0;\n\n        const focusableNode = focusableNodes[nodeIndex];\n        this.tryToFocus(focusableNode);\n    }\n\n    /**\n     * Triggered when the focus is set to the first sentinel. This way, the\n     * focus will be redirected to the last element inside the modal dialog.\n     */\n    handleFocusMoveToLast: () => void = () => {\n        this.focusElementIn(false);\n    };\n\n    /**\n     * Triggered when the focus is set to the last sentinel. This way, the focus\n     * will be redirected to the first element inside the modal dialog.\n     */\n    handleFocusMoveToFirst: () => void = () => {\n        this.focusElementIn(true);\n    };\n\n    render(): React.ReactNode {\n        const {style} = this.props;\n\n        return (\n            <React.Fragment>\n                {/* When you press Tab on the last focusable node of the\n                 * document, some browsers will move your tab focus outside of\n                 * the document. But we want to capture that as a focus event,\n                 * and move focus back into the modal! So, we add focusable\n                 * sentinel nodes. That way, tabbing out of the modal should\n                 * take you to a sentinel node, rather than taking you out of\n                 * the document. These sentinels aren't critical to focus\n                 * wrapping, though; we're resilient to any kind of focus\n                 * shift, whether it's to the sentinels or somewhere else!\n                 * We set the sentinels to be position: fixed to make sure\n                 * they're always in view, this prevents page scrolling when\n                 * tabbing. */}\n                <div\n                    tabIndex={0}\n                    className=\"modal-focus-trap-first\"\n                    onFocus={this.handleFocusMoveToLast}\n                    style={{position: \"fixed\"}}\n                />\n                <View style={style} ref={this.getModalRoot}>\n                    {this.props.children}\n                </View>\n                <div\n                    tabIndex={0}\n                    className=\"modal-focus-trap-last\"\n                    onFocus={this.handleFocusMoveToFirst}\n                    style={{position: \"fixed\"}}\n                />\n            </React.Fragment>\n        );\n    }\n}\n","/**\n * The attribute used to identify a modal launcher portal.\n */\nconst ModalLauncherPortalAttributeName = \"data-modal-launcher-portal\";\n\nexport {ModalLauncherPortalAttributeName};\n","/**\n * List of elements that can be focused\n * @see https://www.w3.org/TR/html5/editing.html#can-be-focused\n */\nconst FOCUSABLE_ELEMENTS =\n    'a[href], details, input, textarea, select, button:not([aria-label^=\"Close\"])';\n\nexport function findFocusableNodes(\n    root: HTMLElement | Document,\n): Array<HTMLElement> {\n    return Array.from(root.querySelectorAll(FOCUSABLE_ELEMENTS));\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport {ModalLauncherPortalAttributeName} from \"../util/constants\";\n\nimport {findFocusableNodes} from \"../util/find-focusable-nodes\";\n\nimport type {ModalElement} from \"../util/types\";\n\ntype Props = {\n    children: ModalElement;\n    onCloseModal: () => unknown;\n    /**\n     * The selector for the element that will be focused when the dialog shows.\n     * When not set, the first tabbable element within the dialog will be used.\n     */\n    initialFocusId?: string;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n};\n\n/**\n * A private component used by ModalLauncher. This is the fixed-position\n * container element that gets mounted outside the DOM. It overlays the modal\n * content (provided as `children`) over the content, with a gray backdrop\n * behind it.\n *\n * This component is also responsible for cloning the provided modal `children`,\n * and adding an `onClose` prop that will call `onCloseModal`. If an\n * `onClose` prop is already provided, the two are merged.\n */\nexport default class ModalBackdrop extends React.Component<Props> {\n    componentDidMount() {\n        const node: HTMLElement = ReactDOM.findDOMNode(this) as any;\n        if (!node) {\n            return;\n        }\n\n        const firstFocusableElement =\n            // 1. try to get element specified by the user\n            this._getInitialFocusElement(node) ||\n            // 2. get first occurence from list of focusable elements\n            this._getFirstFocusableElement(node) ||\n            // 3. get the dialog itself\n            this._getDialogElement(node);\n\n        // wait for styles to applied\n        setTimeout(() => {\n            firstFocusableElement.focus();\n        }, 0);\n    }\n\n    _mousePressedOutside = false;\n\n    /**\n     * Returns an element specified by the user\n     */\n    _getInitialFocusElement(node: HTMLElement): HTMLElement | null {\n        const {initialFocusId} = this.props;\n\n        if (!initialFocusId) {\n            return null;\n        }\n\n        return ReactDOM.findDOMNode(\n            node.querySelector(`#${initialFocusId}`),\n        ) as any;\n    }\n\n    /**\n     * Returns the first focusable element found inside the Dialog\n     */\n    _getFirstFocusableElement(node: HTMLElement): HTMLElement | null {\n        // get a collection of elements that can be focused\n        const focusableElements = findFocusableNodes(node);\n\n        if (!focusableElements) {\n            return null;\n        }\n\n        // if found, return the first focusable element\n        return focusableElements[0];\n    }\n\n    /**\n     * Returns the dialog element\n     */\n    _getDialogElement(node: HTMLElement): HTMLElement {\n        // If no focusable elements are found,\n        // the dialog content element itself will receive focus.\n        const dialogElement: HTMLElement = ReactDOM.findDOMNode(\n            node.querySelector('[role=\"dialog\"]'),\n        ) as any;\n        // add tabIndex to make the Dialog focusable\n        dialogElement.tabIndex = -1;\n\n        return dialogElement;\n    }\n\n    /**\n     * When the user clicks on the gray backdrop area (i.e., the click came\n     * _directly_ from the positioner, not bubbled up from its children), close\n     * the modal.\n     */\n    handleMouseDown: (e: React.SyntheticEvent) => void = (\n        e: React.SyntheticEvent,\n    ) => {\n        // Confirm that it is the backdrop that is being clicked, not the child\n        this._mousePressedOutside = e.target === e.currentTarget;\n    };\n\n    handleMouseUp: (e: React.SyntheticEvent) => void = (\n        e: React.SyntheticEvent,\n    ) => {\n        // Confirm that it is the backdrop that is being clicked, not the child\n        // and that the mouse was pressed in the backdrop first.\n        if (e.target === e.currentTarget && this._mousePressedOutside) {\n            this.props.onCloseModal();\n        }\n        this._mousePressedOutside = false;\n    };\n\n    render(): React.ReactNode {\n        const {children, testId} = this.props;\n        const backdropProps = {\n            [ModalLauncherPortalAttributeName]: true,\n        } as const;\n\n        return (\n            <View\n                style={styles.modalPositioner}\n                onMouseDown={this.handleMouseDown}\n                onMouseUp={this.handleMouseUp}\n                testId={testId}\n                {...backdropProps}\n            >\n                {children}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    modalPositioner: {\n        position: \"fixed\",\n        left: 0,\n        top: 0,\n\n        width: \"100%\",\n        height: \"100%\",\n\n        alignItems: \"center\",\n        justifyContent: \"center\",\n\n        // If the modal ends up being too big for the viewport (e.g., the min\n        // height is triggered), add another scrollbar specifically for\n        // scrolling modal content.\n        //\n        // TODO(mdr): The specified behavior is that the modal should scroll\n        //     with the rest of the page, rather than separately, if overflow\n        //     turns out to be necessary. That sounds hard to do; punting for\n        //     now!\n        overflow: \"auto\",\n\n        background: Color.offBlack64,\n    },\n});\n","/**\n * A UI-less component that lets `ModalLauncher` disable page scroll.\n *\n * The positioning of the modal requires some global page state changed\n * unfortunately, and this handles that in an encapsulated way.\n *\n * NOTE(mdr): This component was copied from webapp. Be wary of sync issues. It\n *     also doesn't have unit tests, and we haven't added any, since it's a\n *     relatively stable component that has now been stress-tested lots in prod.\n */\n\nimport * as React from \"react\";\n\nconst needsHackyMobileSafariScrollDisabler = (() => {\n    if (typeof window === \"undefined\") {\n        return false;\n    }\n\n    const userAgent = window.navigator.userAgent;\n    return userAgent.indexOf(\"iPad\") > -1 || userAgent.indexOf(\"iPhone\") > -1;\n})();\n\ntype Props = Record<any, any>;\n\nclass ScrollDisabler extends React.Component<Props> {\n    static oldOverflow: string;\n    static oldPosition: string;\n    static oldScrollY: number;\n    static oldWidth: string;\n    static oldTop: string;\n\n    componentDidMount() {\n        if (ScrollDisabler.numModalsOpened === 0) {\n            const body = document.body;\n            if (!body) {\n                throw new Error(\"couldn't find document.body\");\n            }\n\n            // Prevent scrolling of the background, the first time a modal is\n            // opened.\n            ScrollDisabler.oldOverflow = body.style.overflow;\n            ScrollDisabler.oldScrollY = window.scrollY;\n\n            // We need to grab all of the original style properties before we\n            // modified any of them.\n            if (needsHackyMobileSafariScrollDisabler) {\n                ScrollDisabler.oldPosition = body.style.position;\n                ScrollDisabler.oldWidth = body.style.width;\n                ScrollDisabler.oldTop = body.style.top;\n            }\n\n            body.style.overflow = \"hidden\";\n\n            // On mobile Safari, overflow: hidden is not enough, position:\n            // fixed is also required.  Setting style.top = -scollTop maintains\n            // the scroll position (without which we'd scroll to the top).\n            if (needsHackyMobileSafariScrollDisabler) {\n                body.style.position = \"fixed\";\n                body.style.width = \"100%\";\n                body.style.top = `${-ScrollDisabler.oldScrollY}px`;\n            }\n        }\n        ScrollDisabler.numModalsOpened++;\n    }\n\n    componentWillUnmount() {\n        ScrollDisabler.numModalsOpened--;\n        if (ScrollDisabler.numModalsOpened === 0) {\n            const body = document.body;\n            if (!body) {\n                throw new Error(\"couldn't find document.body\");\n            }\n\n            // Reset all values on the closing of the final modal.\n            body.style.overflow = ScrollDisabler.oldOverflow;\n            if (needsHackyMobileSafariScrollDisabler) {\n                body.style.position = ScrollDisabler.oldPosition;\n                body.style.width = ScrollDisabler.oldWidth;\n                body.style.top = ScrollDisabler.oldTop;\n            }\n\n            if (typeof window !== \"undefined\" && window.scrollTo) {\n                window.scrollTo(0, ScrollDisabler.oldScrollY);\n            }\n        }\n    }\n\n    static numModalsOpened = 0;\n\n    render(): React.ReactElement | null {\n        return null;\n    }\n}\n\nexport default ScrollDisabler;\n","import * as React from \"react\";\n\ntype ContextType = {\n    closeModal?: () => unknown;\n};\n\nconst defaultContext: ContextType = {\n    closeModal: undefined,\n};\n\nconst ModalContext = React.createContext<ContextType>(\n    defaultContext,\n) as React.Context<ContextType>;\nModalContext.displayName = \"ModalContext\";\n\nexport default ModalContext;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {StyleSheet} from \"aphrodite\";\n\nimport {withActionScheduler} from \"@khanacademy/wonder-blocks-timing\";\nimport type {WithActionSchedulerProps} from \"@khanacademy/wonder-blocks-timing\";\n\nimport FocusTrap from \"./focus-trap\";\nimport ModalBackdrop from \"./modal-backdrop\";\nimport ScrollDisabler from \"./scroll-disabler\";\nimport type {ModalElement} from \"../util/types\";\nimport ModalContext from \"./modal-context\";\n\n// TODO(FEI-5000): Convert back to conditional props after TS migration is complete.\ntype Props = Readonly<{\n    /**\n     * The modal to render.\n     *\n     * The modal will be rendered inside of a container whose parent is\n     * document.body. This allows us to use ModalLauncher within menus and\n     * other components that clip their content. If the modal needs to close\n     * itself by some other means than tapping the backdrop or the default\n     * close button a render callback can be passed. The closeModal function\n     * provided to this callback can be called to close the modal.\n     *\n     * Note: Don't call `closeModal` while rendering! It should be used to\n     * respond to user intearction, like `onClick`.\n     */\n    modal: ModalElement | ((props: {closeModal: () => void}) => ModalElement);\n    /**\n     * Enables the backdrop to dismiss the modal on click/tap\n     */\n    backdropDismissEnabled?: boolean;\n    /**\n     * The selector for the element that will be focused when the dialog shows.\n     * When not set, the first tabbable element within the dialog will be used.\n     */\n    initialFocusId?: string;\n    /**\n     * The selector for the element that will be focused after the dialog\n     * closes. When not set, the last element focused outside the modal will\n     * be used if it exists.\n     */\n    closedFocusId?: string;\n    /**\n     * Test ID used for e2e testing. It's set on the ModalBackdrop\n     */\n    testId?: string;\n    /**\n     * Renders the modal when true, renders nothing when false.\n     *\n     * Using this prop makes the component behave as a controlled component.\n     * The parent is responsible for managing the opening/closing of the modal\n     * when using this prop.  `onClose` should always be used and `children`\n     * should never be used with this prop.  Not doing so will result in an\n     * error being thrown.\n     */\n    opened?: boolean;\n    /**\n     * If the parent needs to be notified when the modal is closed, use this\n     * prop. You probably want to use this instead of `onClose` on the modals\n     * themselves, since this will capture a more complete set of close events.\n     *\n     * Called when the modal needs to notify the parent component that it should\n     * be closed.\n     *\n     * This prop must be used when the component is being used as a controlled\n     * component.\n     */\n    onClose?: () => unknown;\n    /**\n     * WARNING: This props should only be used when using the component as a\n     * controlled component.\n     */\n    children?: (arg1: {openModal: () => unknown}) => React.ReactNode;\n}> &\n    WithActionSchedulerProps;\n\ntype DefaultProps = Readonly<{\n    backdropDismissEnabled: Props[\"backdropDismissEnabled\"];\n}>;\n\ntype State = Readonly<{\n    /** Whether the modal should currently be open. */\n    opened: boolean;\n}>;\n\n/**\n * This component enables you to launch a modal, covering the screen.\n *\n * Children have access to `openModal` function via the function-as-children\n * pattern, so one common use case is for this component to wrap a button:\n *\n * ```js\n * <ModalLauncher modal={<TwoColumnModal ... />}>\n *     {({openModal}) => <button onClick={openModal}>Learn more</button>}\n * </ModalLauncher>\n * ```\n *\n * The actual modal itself is constructed separately, using a layout component\n * like OnePaneDialog and is provided via\n * the `modal` prop.\n */\nclass ModalLauncher extends React.Component<Props, State> {\n    /**\n     * The most recent element _outside this component_ that received focus.\n     * Be default, it captures the element that triggered the modal opening\n     */\n    lastElementFocusedOutsideModal: HTMLElement | null | undefined;\n\n    static defaultProps: DefaultProps = {\n        backdropDismissEnabled: true,\n    };\n\n    static getDerivedStateFromProps(\n        props: Props,\n        state: State,\n    ): Partial<State> {\n        if (typeof props.opened === \"boolean\" && props.children) {\n            // eslint-disable-next-line no-console\n            console.warn(\"'children' and 'opened' can't be used together\");\n        }\n        if (typeof props.opened === \"boolean\" && !props.onClose) {\n            // eslint-disable-next-line no-console\n            console.warn(\"'onClose' should be used with 'opened'\");\n        }\n        if (typeof props.opened !== \"boolean\" && !props.children) {\n            // eslint-disable-next-line no-console\n            console.warn(\"either 'children' or 'opened' must be set\");\n        }\n        return {\n            opened:\n                typeof props.opened === \"boolean\" ? props.opened : state.opened,\n        };\n    }\n\n    state: State = {opened: false};\n\n    componentDidUpdate(prevProps: Props) {\n        // ensures the element is stored only when the modal is opened\n        if (!prevProps.opened && this.props.opened) {\n            this._saveLastElementFocused();\n        }\n    }\n\n    _saveLastElementFocused: () => void = () => {\n        // keep a reference of the element that triggers the modal\n        // @ts-expect-error [FEI-5019] - TS2322 - Type 'Element | null' is not assignable to type 'HTMLElement | null | undefined'.\n        this.lastElementFocusedOutsideModal = document.activeElement;\n    };\n\n    _openModal: () => void = () => {\n        this._saveLastElementFocused();\n        this.setState({opened: true});\n    };\n\n    _returnFocus: () => void = () => {\n        const {closedFocusId, schedule} = this.props;\n        const lastElement = this.lastElementFocusedOutsideModal;\n\n        // Focus on the specified element after closing the modal.\n        if (closedFocusId) {\n            const focusElement = ReactDOM.findDOMNode(\n                document.getElementById(closedFocusId),\n            ) as any;\n\n            if (focusElement) {\n                // Wait for the modal to leave the DOM before trying\n                // to focus on the specified element.\n                schedule.animationFrame(() => {\n                    focusElement.focus();\n                });\n                return;\n            }\n        }\n\n        if (lastElement != null) {\n            // Wait for the modal to leave the DOM before trying to\n            // return focus to the element that triggered the modal.\n            schedule.animationFrame(() => {\n                lastElement.focus();\n            });\n        }\n    };\n\n    handleCloseModal: () => void = () => {\n        this.setState({opened: false}, () => {\n            const {onClose} = this.props;\n\n            onClose?.();\n            this._returnFocus();\n        });\n    };\n\n    _renderModal(): ModalElement {\n        if (typeof this.props.modal === \"function\") {\n            return this.props.modal({\n                closeModal: this.handleCloseModal,\n            });\n        } else {\n            return this.props.modal;\n        }\n    }\n\n    render(): React.ReactElement | null {\n        const renderedChildren = this.props.children\n            ? this.props.children({\n                  openModal: this._openModal,\n              })\n            : null;\n\n        const {body} = document;\n        if (!body) {\n            return null;\n        }\n\n        return (\n            <ModalContext.Provider value={{closeModal: this.handleCloseModal}}>\n                {renderedChildren}\n                {this.state.opened &&\n                    ReactDOM.createPortal(\n                        /* We need the container View that FocusTrap creates to be at the\n                           correct z-index so that it'll be above the global nav in webapp. */\n                        <FocusTrap style={styles.container}>\n                            <ModalBackdrop\n                                initialFocusId={this.props.initialFocusId}\n                                testId={this.props.testId}\n                                onCloseModal={\n                                    this.props.backdropDismissEnabled\n                                        ? this.handleCloseModal\n                                        : () => {}\n                                }\n                            >\n                                {this._renderModal()}\n                            </ModalBackdrop>\n                        </FocusTrap>,\n                        body,\n                    )}\n                {this.state.opened && (\n                    <ModalLauncherKeypressListener\n                        onClose={this.handleCloseModal}\n                    />\n                )}\n                {this.state.opened && <ScrollDisabler />}\n            </ModalContext.Provider>\n        );\n    }\n}\n\n/** A component that, when mounted, calls `onClose` when Escape is pressed. */\nclass ModalLauncherKeypressListener extends React.Component<{\n    onClose: () => unknown;\n}> {\n    componentDidMount() {\n        window.addEventListener(\"keyup\", this._handleKeyup);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this._handleKeyup);\n    }\n\n    _handleKeyup = (e: KeyboardEvent) => {\n        // We check the key as that's keyboard layout agnostic and also avoids\n        // the minefield of deprecated number type properties like keyCode and\n        // which, with the replacement code, which uses a string instead.\n        if (e.key === \"Escape\") {\n            // Stop the event going any further.\n            // For cancellation events, like the Escape key, we generally should\n            // air on the side of caution and only allow it to cancel one thing.\n            // So, it's polite for us to stop propagation of the event.\n            // Otherwise, we end up with UX where one Escape key press\n            // unexpectedly cancels multiple things.\n            e.preventDefault();\n            e.stopPropagation();\n            this.props.onClose();\n        }\n    };\n\n    render(): React.ReactElement | null {\n        return null;\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        // This z-index is copied from the Khan Academy webapp.\n        //\n        // TODO(mdr): Should we keep this in a constants file somewhere? Or\n        //     not hardcode it at all, and provide it to Wonder Blocks via\n        //     configuration?\n        zIndex: 1080,\n    },\n});\n\nexport default withActionScheduler(ModalLauncher);\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport {MediaLayout} from \"@khanacademy/wonder-blocks-layout\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\ntype Props = {\n    /** Should the content scroll on overflow, or just expand. */\n    scrollOverflow: boolean;\n    /** The contents of the ModalContent */\n    children: React.ReactNode;\n    /** Optional styling to apply to the contents. */\n    style?: StyleType;\n};\n\ntype DefaultProps = {\n    scrollOverflow: Props[\"scrollOverflow\"];\n};\n\n/**\n * The Modal content included after the header\n */\nexport default class ModalContent extends React.Component<Props> {\n    static isClassOf(instance: any): boolean {\n        return instance && instance.type && instance.type.__IS_MODAL_CONTENT__;\n    }\n    static defaultProps: DefaultProps = {\n        scrollOverflow: true,\n    };\n\n    static __IS_MODAL_CONTENT__ = true;\n\n    render(): React.ReactNode {\n        const {scrollOverflow, style, children} = this.props;\n\n        return (\n            <MediaLayout styleSheets={styleSheets}>\n                {({styles}) => (\n                    <View\n                        style={[\n                            styles.wrapper,\n                            scrollOverflow && styles.scrollOverflow,\n                        ]}\n                    >\n                        <View style={[styles.content, style]}>{children}</View>\n                    </View>\n                )}\n            </MediaLayout>\n        );\n    }\n}\n\nconst styleSheets = {\n    all: StyleSheet.create({\n        wrapper: {\n            flex: 1,\n\n            // This helps to ensure that the paddingBottom is preserved when\n            // the contents start to overflow, this goes away on display: flex\n            display: \"block\",\n        },\n\n        scrollOverflow: {\n            overflow: \"auto\",\n        },\n\n        content: {\n            flex: 1,\n            minHeight: \"100%\",\n            padding: Spacing.xLarge_32,\n            boxSizing: \"border-box\",\n        },\n    }),\n\n    small: StyleSheet.create({\n        content: {\n            padding: `${Spacing.xLarge_32}px ${Spacing.medium_16}px`,\n        },\n    }),\n} as const;\n","import * as React from \"react\";\nimport {icons} from \"@khanacademy/wonder-blocks-icon\";\nimport IconButton from \"@khanacademy/wonder-blocks-icon-button\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport ModalContext from \"./modal-context\";\n\ntype Props = {\n    /**\n     * Whether the button is on a dark/colored background.\n     *\n     * Sets primary button background color to white, and secondary and\n     * tertiary button title to color.\n     */\n    light?: boolean;\n    /** Optional click handler */\n    onClick?: () => unknown;\n    /** Optional custom styles. */\n    style?: StyleType;\n    /**\n     * Test ID used for e2e testing.\n     *\n     * In this case, this component is internal, so `testId` is composed with\n     * the `testId` passed down from the Dialog variant + a suffix to scope it\n     * to this component.\n     *\n     * @example\n     * For testId=\"some-random-id\"\n     * The result will be: `some-random-id-modal-panel`\n     */\n    testId?: string;\n};\n\nexport default class CloseButton extends React.Component<Props> {\n    render(): React.ReactNode {\n        const {light, onClick, style, testId} = this.props;\n\n        return (\n            <ModalContext.Consumer>\n                {({closeModal}) => {\n                    if (closeModal && onClick) {\n                        throw new Error(\n                            \"You've specified 'onClose' on a modal when using ModalLauncher.  Please specify 'onClose' on the ModalLauncher instead\",\n                        );\n                    }\n\n                    return (\n                        <IconButton\n                            icon={icons.dismiss}\n                            // TODO(mdr): Translate this string for i18n.\n                            // TODO(kevinb): provide a way to set this label\n                            aria-label=\"Close modal\"\n                            onClick={onClick || closeModal}\n                            kind={light ? \"primary\" : \"tertiary\"}\n                            light={light}\n                            style={style}\n                            testId={testId}\n                        />\n                    );\n                }}\n            </ModalContext.Consumer>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport Color from \"@khanacademy/wonder-blocks-color\";\nimport {View} from \"@khanacademy/wonder-blocks-core\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport ModalContent from \"./modal-content\";\nimport ModalHeader from \"./modal-header\";\nimport ModalFooter from \"./modal-footer\";\nimport CloseButton from \"./close-button\";\n\ntype Props = {\n    /**\n     * The main contents of the ModalPanel. All other parts of the panel\n     * are positioned around it.\n     */\n    content:\n        | React.ReactElement<React.ComponentProps<typeof ModalContent>>\n        | React.ReactNode;\n    /**\n     * The modal header to show at the top of the panel.\n     */\n    header?:\n        | React.ReactElement<React.ComponentProps<typeof ModalHeader>>\n        | React.ReactNode;\n    /**\n     * A footer to show beneath the contents.\n     */\n    footer?:\n        | React.ReactElement<React.ComponentProps<typeof ModalFooter>>\n        | React.ReactNode;\n    /**\n     * When true, the close button is shown; otherwise, the close button is not shown.\n     */\n    closeButtonVisible: boolean;\n    /**\n     * Should the contents of the panel become scrollable should they\n     * become too tall?\n     */\n    scrollOverflow: boolean;\n    /**\n     * Whether to display the \"light\" version of this component instead, for\n     * use when the item is used on a dark background.\n     */\n    light: boolean;\n    /**\n     * Any optional styling to apply to the panel.\n     */\n    style?: StyleType;\n    /**\n     * Called when the close button is clicked.\n     *\n     * If you're using `ModalLauncher`, you should not use this prop!\n     * Instead, to listen for when the modal closes, add an `onClose` handler\n     * to the `ModalLauncher`.  Doing so will throw an error.\n     */\n    onClose?: () => unknown;\n    /**\n     * Test ID used for e2e testing.\n     *\n     * In this case, this `testId` comes from the `testId` prop defined in the\n     * Dialog variant (e.g. OnePaneDialog).\n     */\n    testId?: string;\n};\n\ntype DefaultProps = {\n    closeButtonVisible: Props[\"closeButtonVisible\"];\n    scrollOverflow: Props[\"scrollOverflow\"];\n    light: Props[\"light\"];\n};\n\n/**\n * ModalPanel is  the content container.\n *\n * **Implementation notes:**\n *\n * If you are creating a custom Dialog, make sure to follow these guidelines:\n * - Make sure to add this component inside the [ModalDialog](/#modaldialog).\n * - If needed, you can also add a [ModalHeader](/#modalheader) using the\n *   `header` prop. Same goes for [ModalFooter](/#modalfooter).\n * - If you need to create e2e tests, make sure to pass a `testId` prop. This\n *   will be passed down to this component using a sufix: e.g.\n *   `some-random-id-ModalPanel`. This scope will be propagated to the\n *   CloseButton element as well: e.g. `some-random-id-CloseButton`.\n *\n * ```js\n * <ModalDialog>\n *      <ModalPanel content={\"custom content goes here\"} />\n * </ModalDialog>\n * ```\n */\nexport default class ModalPanel extends React.Component<Props> {\n    static defaultProps: DefaultProps = {\n        closeButtonVisible: true,\n        scrollOverflow: true,\n        light: true,\n    };\n\n    renderMainContent(): React.ReactNode {\n        const {content, footer, scrollOverflow} = this.props;\n\n        const mainContent = ModalContent.isClassOf(content) ? (\n            (content as React.ReactElement<\n                React.ComponentProps<typeof ModalContent>\n            >)\n        ) : (\n            <ModalContent>{content}</ModalContent>\n        );\n\n        if (!mainContent) {\n            return mainContent;\n        }\n\n        return React.cloneElement(mainContent, {\n            // Pass the scrollOverflow and header in to the main content\n            scrollOverflow,\n            // We override the styling of the main content to help position\n            // it if there is a footer or close button being\n            // shown. We have to do this here as the ModalContent doesn't\n            // know about things being positioned around it.\n            style: [!!footer && styles.hasFooter, mainContent.props.style],\n        });\n    }\n\n    render(): React.ReactNode {\n        const {\n            closeButtonVisible,\n            footer,\n            header,\n            light,\n            onClose,\n            style,\n            testId,\n        } = this.props;\n\n        const mainContent = this.renderMainContent();\n\n        return (\n            <View\n                style={[styles.wrapper, !light && styles.dark, style]}\n                testId={testId && `${testId}-panel`}\n            >\n                {closeButtonVisible && (\n                    <CloseButton\n                        light={!light}\n                        onClick={onClose}\n                        style={styles.closeButton}\n                        testId={testId && `${testId}-close`}\n                    />\n                )}\n                {header}\n                {mainContent}\n                {!footer || ModalFooter.isClassOf(footer) ? (\n                    footer\n                ) : (\n                    <ModalFooter>{footer}</ModalFooter>\n                )}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    wrapper: {\n        flex: \"1 1 auto\",\n        position: \"relative\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        background: \"white\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n    },\n\n    closeButton: {\n        position: \"absolute\",\n        right: Spacing.medium_16,\n        top: Spacing.medium_16,\n        // This is to allow the button to be tab-ordered before the modal\n        // content but still be above the header and content.\n        zIndex: 1,\n    },\n\n    dark: {\n        background: Color.darkBlue,\n        color: Color.white,\n    },\n\n    hasFooter: {\n        paddingBottom: Spacing.xLarge_32,\n    },\n});\n","import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {Breadcrumbs} from \"@khanacademy/wonder-blocks-breadcrumbs\";\nimport {MediaLayout} from \"@khanacademy/wonder-blocks-layout\";\nimport type {StyleType} from \"@khanacademy/wonder-blocks-core\";\n\nimport {IDProvider} from \"@khanacademy/wonder-blocks-core\";\nimport ModalDialog from \"./modal-dialog\";\nimport ModalPanel from \"./modal-panel\";\nimport ModalHeader from \"./modal-header\";\n\ntype Common = {\n    /**\n     * The content of the modal, appearing between the titlebar and footer.\n     */\n    content: React.ReactNode;\n    /**\n     * The title of the modal, appearing in the titlebar.\n     */\n    title: string;\n    /**\n     * The content of the modal's footer. A great place for buttons!\n     *\n     * Content is right-aligned by default. To control alignment yourself,\n     * provide a container element with 100% width.\n     */\n    footer?: React.ReactNode;\n    /**\n     * Called when the close button is clicked.\n     *\n     * If you're using `ModalLauncher`, you probably shouldn't use this prop!\n     * Instead, to listen for when the modal closes, add an `onClose` handler\n     * to the `ModalLauncher`.  Doing so will result in a console.warn().\n     */\n    onClose?: () => unknown;\n    /**\n     * When true, the close button is shown; otherwise, the close button is not shown.\n     */\n    closeButtonVisible?: boolean;\n    /**\n     * When set, provides a component that can render content above the top of the modal;\n     * when not set, no additional content is shown above the modal.\n     * This prop is passed down to the ModalDialog.\n     */\n    above?: React.ReactNode;\n    /**\n     * When set, provides a component that will render content below the bottom of the modal;\n     * when not set, no additional content is shown below the modal.\n     * This prop is passed down to the ModalDialog.\n     *\n     * NOTE: Devs can customize this content by rendering the component assigned to this prop with custom styles,\n     * such as by wrapping it in a View.\n     */\n    below?: React.ReactNode;\n    /**\n     * When set, overrides the default role value. Default role is \"dialog\"\n     * Roles other than dialog and alertdialog aren't appropriate for this\n     * component\n     */\n    role?: \"dialog\" | \"alertdialog\";\n    /**\n     * Optional custom styles.\n     */\n    style?: StyleType;\n    /**\n     * Test ID used for e2e testing. This ID will be passed down to the Dialog.\n     */\n    testId?: string;\n    /**\n     * An optional id parameter for the title. If one is\n     * not provided, a unique id will be generated.\n     */\n    titleId?: string;\n    /**\n     * The ID of the content describing this dialog, if applicable.\n     */\n    \"aria-describedby\"?: string;\n};\n\ntype WithSubtitle = Common & {\n    /**\n     * The subtitle of the modal, appearing in the titlebar, below the title.\n     */\n    subtitle: string;\n};\n\ntype WithBreadcrumbs = Common & {\n    /**\n     * Adds a breadcrumb-trail, appearing in the ModalHeader, above the title.\n     */\n    breadcrumbs: React.ReactElement<React.ComponentProps<typeof Breadcrumbs>>;\n};\n\ntype Props = Common | WithSubtitle | WithBreadcrumbs;\n\ntype DefaultProps = {\n    closeButtonVisible: Props[\"closeButtonVisible\"];\n};\n\n/**\n * This is the standard layout for most straightforward modal experiences.\n *\n * The ModalHeader is required, but the ModalFooter is optional.\n * The content of the dialog itself is fully customizable, but the\n * left/right/top/bottom padding is fixed.\n *\n * ### Usage\n *\n * ```jsx\n * import {OnePaneDialog} from \"@khanacademy/wonder-blocks-modal\";\n * import {Body} from \"@khanacademy/wonder-blocks-typography\";\n *\n * <OnePaneDialog\n *     title=\"Some title\"\n *     content={\n *         <Body>\n *             {`Lorem ipsum dolor sit amet, consectetur adipiscing\n *             elit, sed do eiusmod tempor incididunt ut labore et\n *             dolore magna aliqua. Ut enim ad minim veniam,\n *             quis nostrud exercitation ullamco laboris nisi ut\n *             aliquip ex ea commodo consequat. Duis aute irure\n *             dolor in reprehenderit in voluptate velit esse\n *             cillum dolore eu fugiat nulla pariatur. Excepteur\n *             sint occaecat cupidatat non proident, sunt in culpa\n *             qui officia deserunt mollit anim id est.`}\n *         </Body>\n *     }\n * />\n * ```\n */\nexport default class OnePaneDialog extends React.Component<Props> {\n    static defaultProps: DefaultProps = {\n        closeButtonVisible: true,\n    };\n\n    renderHeader(\n        uniqueId: string,\n    ): React.ReactElement<React.ComponentProps<typeof ModalHeader>> {\n        const {\n            title,\n            // @ts-expect-error [FEI-5019] - TS2339 - Property 'breadcrumbs' does not exist on type 'Readonly<Props> & Readonly<{ children?: ReactNode; }>'.\n            breadcrumbs = undefined,\n            // @ts-expect-error [FEI-5019] - TS2339 - Property 'subtitle' does not exist on type 'Readonly<Props> & Readonly<{ children?: ReactNode; }>'.\n            subtitle = undefined,\n            testId,\n        } = this.props;\n\n        if (breadcrumbs) {\n            return (\n                <ModalHeader\n                    title={title}\n                    breadcrumbs={\n                        breadcrumbs as React.ReactElement<\n                            React.ComponentProps<typeof Breadcrumbs>\n                        >\n                    }\n                    titleId={uniqueId}\n                    testId={testId && `${testId}-header`}\n                />\n            );\n        } else if (subtitle) {\n            return (\n                <ModalHeader\n                    title={title}\n                    subtitle={subtitle as string}\n                    titleId={uniqueId}\n                    testId={testId && `${testId}-header`}\n                />\n            );\n        } else {\n            return (\n                <ModalHeader\n                    title={title}\n                    titleId={uniqueId}\n                    testId={testId && `${testId}-header`}\n                />\n            );\n        }\n    }\n\n    render(): React.ReactNode {\n        const {\n            onClose,\n            footer,\n            content,\n            above,\n            below,\n            style,\n            closeButtonVisible,\n            testId,\n            titleId,\n            role,\n            \"aria-describedby\": ariaDescribedBy,\n        } = this.props;\n\n        return (\n            <MediaLayout styleSheets={styleSheets}>\n                {({styles}) => (\n                    <IDProvider id={titleId} scope=\"modal\">\n                        {(uniqueId) => (\n                            <ModalDialog\n                                style={[styles.dialog, style]}\n                                above={above}\n                                below={below}\n                                testId={testId}\n                                aria-labelledby={uniqueId}\n                                aria-describedby={ariaDescribedBy}\n                                role={role}\n                            >\n                                <ModalPanel\n                                    onClose={onClose}\n                                    header={this.renderHeader(uniqueId)}\n                                    content={content}\n                                    footer={footer}\n                                    closeButtonVisible={closeButtonVisible}\n                                    testId={testId}\n                                />\n                            </ModalDialog>\n                        )}\n                    </IDProvider>\n                )}\n            </MediaLayout>\n        );\n    }\n}\n\nconst styleSheets = {\n    small: StyleSheet.create({\n        dialog: {\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n        },\n    }),\n\n    mdOrLarger: StyleSheet.create({\n        dialog: {\n            width: \"93.75%\",\n            maxWidth: 576,\n            height: \"81.25%\",\n            maxHeight: 624,\n        },\n    }),\n} as const;\n"],"names":["ModalDialog","React.Component","above","below","role","style","children","testId","ariaLabelledBy","ariaDescribedBy","contextValue","MEDIA_MODAL_SPEC","jsx","MediaLayoutContext","MediaLayout","styleSheets","styles","jsxs","View","StyleSheet","Spacing","ModalFooter","instance","Color","ModalHeader","breadcrumbs","light","subtitle","title","titleId","HeadingMedium","LabelSmall","FOCUSABLE_ELEMENTS","FocusTrap","node","modalRoot","ReactDOM.findDOMNode","isLast","modalRootAsHtmlEl","focusableNodes","nodeIndex","focusableNode","React.Fragment","ModalLauncherPortalAttributeName","findFocusableNodes","root","ModalBackdrop","firstFocusableElement","initialFocusId","focusableElements","dialogElement","backdropProps","needsHackyMobileSafariScrollDisabler","userAgent","_ScrollDisabler","body","ScrollDisabler","defaultContext","ModalContext","React.createContext","ModalContext$1","ModalLauncher","closedFocusId","schedule","lastElement","focusElement","onClose","props","state","prevProps","renderedChildren","ReactDOM.createPortal","ModalLauncherKeypressListener","ModalLauncher$1","withActionScheduler","ModalContent","scrollOverflow","CloseButton","onClick","closeModal","IconButton","icons.dismiss","ModalPanel","content","footer","mainContent","React.cloneElement","closeButtonVisible","header","OnePaneDialog","uniqueId","IDProvider"],"mappings":"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"}