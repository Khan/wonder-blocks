{"version":3,"file":"link-64b6fd31.js","sources":["../../packages/wonder-blocks-link/src/components/link-core.tsx","../../packages/wonder-blocks-link/src/components/link.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {Link} from \"react-router-dom\";\nimport {__RouterContext} from \"react-router\";\n\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport Color, {mix, fade} from \"@khanacademy/wonder-blocks-color\";\nimport {isClientSideUrl} from \"@khanacademy/wonder-blocks-clickable\";\nimport Icon from \"@khanacademy/wonder-blocks-icon\";\nimport Spacing from \"@khanacademy/wonder-blocks-spacing\";\n\nimport type {\n    ChildrenProps,\n    ClickableState,\n} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {StyleDeclaration} from \"aphrodite\";\nimport type {IconAsset} from \"@khanacademy/wonder-blocks-icon\";\nimport type {SharedProps} from \"./link\";\n\ntype Props = SharedProps &\n    ChildrenProps &\n    ClickableState & {\n        href: string;\n    };\n\nconst StyledAnchor = addStyle(\"a\");\nconst StyledLink = addStyle(Link);\n\nconst LinkCore = React.forwardRef(\n    (\n        props: Props,\n        ref: React.ForwardedRef<typeof Link | HTMLAnchorElement>,\n    ) => {\n        const renderInner = (router: any): React.ReactNode => {\n            const {\n                children,\n                skipClientNav,\n                focused,\n                hovered,\n                href,\n                inline = false,\n                kind = \"primary\",\n                light = false,\n                visitable = false,\n                pressed,\n                style,\n                testId,\n                waiting: _,\n                target,\n                startIcon,\n                endIcon,\n                ...restProps\n            } = props;\n\n            const linkStyles = _generateStyles(inline, kind, light, visitable);\n            const restingStyles = inline\n                ? linkStyles.restingInline\n                : linkStyles.resting;\n\n            const defaultStyles = [\n                sharedStyles.shared,\n                restingStyles,\n                pressed && linkStyles.active,\n                // A11y: The focus ring should always be present when the\n                // the link has focus, even the link is being hovered over.\n                // TODO(WB-1498): Udpate ClickableBehavior so that focus doesn't\n                // stop on mouseleave. We want the focus ring to remain on a\n                // focused link even after hovering and un-hovering on it.\n                !pressed && hovered && linkStyles.hover,\n                !pressed && focused && linkStyles.focus,\n            ];\n\n            const commonProps = {\n                \"data-test-id\": testId,\n                style: [defaultStyles, style],\n                target,\n                ...restProps,\n            } as const;\n\n            const linkUrl = new URL(href, window.location.origin);\n\n            const isExternalLink = linkUrl.origin !== window.location.origin;\n\n            const externalIconPath: IconAsset = {\n                small: \"M14 6.5C14 6.63261 13.9473 6.75979 13.8536 6.85355C13.7598 6.94732 13.6326 7 13.5 7C13.3674 7 13.2402 6.94732 13.1464 6.85355C13.0527 6.75979 13 6.63261 13 6.5V3.7075L8.85437 7.85375C8.76055 7.94757 8.63331 8.00028 8.50062 8.00028C8.36794 8.00028 8.2407 7.94757 8.14688 7.85375C8.05306 7.75993 8.00035 7.63268 8.00035 7.5C8.00035 7.36732 8.05306 7.24007 8.14688 7.14625L12.2925 3H9.5C9.36739 3 9.24021 2.94732 9.14645 2.85355C9.05268 2.75979 9 2.63261 9 2.5C9 2.36739 9.05268 2.24021 9.14645 2.14645C9.24021 2.05268 9.36739 2 9.5 2H13.5C13.6326 2 13.7598 2.05268 13.8536 2.14645C13.9473 2.24021 14 2.36739 14 2.5V6.5ZM11.5 8C11.3674 8 11.2402 8.05268 11.1464 8.14645C11.0527 8.24021 11 8.36739 11 8.5V13H3V5H7.5C7.63261 5 7.75979 4.94732 7.85355 4.85355C7.94732 4.75979 8 4.63261 8 4.5C8 4.36739 7.94732 4.24021 7.85355 4.14645C7.75979 4.05268 7.63261 4 7.5 4H3C2.73478 4 2.48043 4.10536 2.29289 4.29289C2.10536 4.48043 2 4.73478 2 5V13C2 13.2652 2.10536 13.5196 2.29289 13.7071C2.48043 13.8946 2.73478 14 3 14H11C11.2652 14 11.5196 13.8946 11.7071 13.7071C11.8946 13.5196 12 13.2652 12 13V8.5C12 8.36739 11.9473 8.24021 11.8536 8.14645C11.7598 8.05268 11.6326 8 11.5 8Z\",\n            };\n\n            const externalIcon = (\n                <Icon\n                    icon={externalIconPath}\n                    size=\"small\"\n                    style={[\n                        linkContentStyles.endIcon,\n                        linkContentStyles.centered,\n                    ]}\n                    testId=\"external-icon\"\n                />\n            );\n\n            const linkContent = (\n                <>\n                    {startIcon && (\n                        <Icon\n                            icon={startIcon}\n                            size=\"small\"\n                            style={[\n                                linkContentStyles.startIcon,\n                                linkContentStyles.centered,\n                            ]}\n                            testId=\"start-icon\"\n                            aria-hidden=\"true\"\n                        />\n                    )}\n                    {children}\n                    {endIcon ? (\n                        <Icon\n                            icon={endIcon}\n                            size=\"small\"\n                            style={[\n                                linkContentStyles.endIcon,\n                                linkContentStyles.centered,\n                            ]}\n                            testId=\"end-icon\"\n                            aria-hidden=\"true\"\n                        />\n                    ) : (\n                        isExternalLink && target === \"_blank\" && externalIcon\n                    )}\n                </>\n            );\n\n            return router && !skipClientNav && isClientSideUrl(href) ? (\n                <StyledLink\n                    {...commonProps}\n                    to={href}\n                    ref={ref as React.ForwardedRef<typeof Link>}\n                >\n                    {linkContent}\n                </StyledLink>\n            ) : (\n                <StyledAnchor\n                    {...commonProps}\n                    href={href}\n                    ref={ref as React.ForwardedRef<HTMLAnchorElement>}\n                >\n                    {linkContent}\n                </StyledAnchor>\n            );\n        };\n\n        return (\n            <__RouterContext.Consumer>\n                {(router) => renderInner(router)}\n            </__RouterContext.Consumer>\n        );\n    },\n);\n\nconst styles: Record<string, any> = {};\n\nconst linkContentStyles = StyleSheet.create({\n    startIcon: {\n        marginInlineEnd: Spacing.xxxSmall_4,\n    },\n    endIcon: {\n        marginInlineStart: Spacing.xxxSmall_4,\n    },\n    centered: {\n        // Manually align the bottom of start/end icons with the text baseline.\n        verticalAlign: \"-10%\",\n    },\n});\n\nconst sharedStyles = StyleSheet.create({\n    shared: {\n        cursor: \"pointer\",\n        textDecoration: \"none\",\n        outline: \"none\",\n        alignItems: \"center\",\n    },\n});\n\nconst _generateStyles = (\n    inline: boolean,\n    kind: \"primary\" | \"secondary\",\n    light: boolean,\n    visitable: boolean,\n) => {\n    const buttonType = `${kind}-${inline.toString()}-${light.toString()}-${visitable.toString()}`;\n    if (styles[buttonType]) {\n        return styles[buttonType];\n    }\n\n    if (kind === \"secondary\" && light) {\n        throw new Error(\"Secondary Light links are not supported\");\n    }\n\n    if (visitable && kind !== \"primary\") {\n        throw new Error(\"Only primary link is visitable\");\n    }\n\n    const {blue, pink, purple, white, offBlack, offBlack32, offBlack64} = Color;\n\n    // Standard purple\n    const linkPurple = mix(fade(offBlack, 0.08), purple);\n    // Light blue\n    const fadedBlue = mix(fade(blue, 0.32), white);\n    // Light pink\n    const activeLightVisited = mix(fade(white, 0.32), pink);\n    // Dark blue\n    const activeDefaultPrimary = mix(offBlack32, blue);\n\n    const primaryDefaultTextColor = light ? white : blue;\n    const secondaryDefaultTextColor = inline ? offBlack : offBlack64;\n    const defaultTextColor =\n        kind === \"primary\"\n            ? primaryDefaultTextColor\n            : secondaryDefaultTextColor;\n\n    const primaryActiveColor = light ? fadedBlue : activeDefaultPrimary;\n    const secondaryActiveColor = inline ? activeDefaultPrimary : offBlack;\n    const activeColor =\n        kind === \"primary\" ? primaryActiveColor : secondaryActiveColor;\n\n    const defaultVisited = visitable\n        ? {\n              \":visited\": {\n                  color: light ? pink : linkPurple,\n              },\n          }\n        : Object.freeze({});\n    const activeVisited = visitable\n        ? {\n              \":visited\": {\n                  color: light\n                      ? activeLightVisited\n                      : mix(offBlack32, linkPurple),\n              },\n          }\n        : Object.freeze({});\n\n    const newStyles: StyleDeclaration = {\n        resting: {\n            color: defaultTextColor,\n            ...defaultVisited,\n        },\n        restingInline: {\n            color: defaultTextColor,\n            // TODO(WB-1521): Update text decoration to the 1px dashed\n            // underline after the Link audit.\n            // textDecoration: \"underline currentcolor solid 1px\",\n            textDecoration: \"underline currentcolor solid\",\n            // TODO(WB-1521): Update the underline offset to be 4px after\n            // the Link audit.\n            // textUnderlineOffset: 4,\n            textUnderlineOffset: 2,\n            ...defaultVisited,\n        },\n        hover: {\n            // TODO(WB-1521): Update text decoration to the 1px dashed\n            // underline after the Link audit.\n            // textDecoration: \"underline currentcolor dashed 2px\",\n            textDecoration: \"underline currentcolor solid\",\n            color: defaultTextColor,\n            // TODO(WB-1521): Update the underline offset to be 4px after\n            // the Link audit.\n            // textUnderlineOffset: 4,\n            ...defaultVisited,\n        },\n        focus: {\n            // Focus styles only show up with keyboard navigation.\n            // Mouse users don't see focus styles.\n            \":focus-visible\": {\n                color: defaultTextColor,\n                outline: `1px solid ${light ? white : blue}`,\n                borderRadius: 3,\n                ...defaultVisited,\n            },\n        },\n        active: {\n            color: activeColor,\n            textDecoration: \"underline currentcolor solid\",\n            // TODO(WB-1521): Update the underline offset to be 4px after\n            // the Link audit.\n            // textUnderlineOffset: 4,\n            ...activeVisited,\n        },\n    };\n\n    styles[buttonType] = StyleSheet.create(newStyles);\n    return styles[buttonType];\n};\n\nexport default LinkCore;\n","import * as React from \"react\";\nimport {__RouterContext} from \"react-router\";\nimport {Link as ReactRouterLink} from \"react-router-dom\";\nimport {getClickableBehavior} from \"@khanacademy/wonder-blocks-clickable\";\n\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport type {Typography} from \"@khanacademy/wonder-blocks-typography\";\nimport type {IconAsset} from \"@khanacademy/wonder-blocks-icon\";\nimport LinkCore from \"./link-core\";\n\n// TODO(FEI-5000): Convert back to conditional props after TS migration is complete.\nexport type SharedProps = AriaProps & {\n    /**\n     * Text to appear on the link. It can be a plain text or a Typography element.\n     */\n    children: string | React.ReactElement<React.ComponentProps<Typography>>;\n    /**\n     * URL to navigate to.\n     */\n    href: string;\n    /**\n     * An optional id attribute.\n     */\n    id?: string;\n    /**\n     * Indicates that this link is used within a body of text.\n     * This styles the link with an underline to distinguish it\n     * from surrounding text.\n     */\n    inline?: boolean;\n    /**\n     * Kind of Link. Note: Secondary light Links are not supported.\n     */\n    kind?: \"primary\" | \"secondary\";\n    /**\n     * Whether the button is on a dark/colored background.\n     */\n    light?: boolean;\n    /**\n     * Whether the link should change color once it's visited.\n     * secondary or primary (light) links are not allowed to be visitable.\n     */\n    visitable?: boolean;\n    /**\n     * Specifies the type of relationship between the current document and the\n     * linked document. Should only be used when `href` is specified. This\n     * defaults to \"noopener noreferrer\" when `target=\"_blank\"`, but can be\n     * overridden by setting this prop to something else.\n     */\n    rel?: string;\n    /**\n     * Set the tabindex attribute on the rendered element.\n     */\n    tabIndex?: number;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n    /**\n     * Whether to avoid using client-side navigation.\n     *\n     * If the URL passed to href is local to the client-side, e.g.\n     * /math/algebra/eval-exprs, then it tries to use react-router-dom's Link\n     * component which handles the client-side navigation. You can set\n     * `skipClientNav` to true avoid using client-side nav entirely.\n     *\n     * NOTE: All URLs containing a protocol are considered external, e.g.\n     * https://khanacademy.org/math/algebra/eval-exprs will trigger a full\n     * page reload.\n     */\n    skipClientNav?: boolean;\n    /**\n     * Custom styles.\n     */\n    style?: StyleType;\n    // TODO(yejia): use this if ADR #47 has been implemented\n    /*\n    style?: Style<Exact<{\n        width?: number | string\n        position: Position,\n        ...MarginStyles,\n        ...FlexItemStyles,\n    }>>,\n    */\n\n    /**\n     * Adds CSS classes to the Link.\n     */\n    className?: string;\n    // NOTE(jeresig): Currently React Docgen (used by Styleguidist) doesn't\n    // support ... inside of an exact object type. Thus we had to move the\n    // following propers into this SharedProps, even though they should be\n    // external. Once that's fixed we can split them back apart.\n\n    /**\n     * Function to call when button is clicked.\n     *\n     * This callback should be used for things like marking BigBingo\n     * conversions. It should NOT be used to redirect to a different URL or to\n     * prevent navigation via e.preventDefault(). The event passed to this\n     * handler will have its preventDefault() and stopPropagation() methods\n     * stubbed out.\n     */\n    onClick?: (e: React.SyntheticEvent) => unknown;\n    /**\n     * Run async code in the background while client-side navigating. If the\n     * browser does a full page load navigation, the callback promise must be\n     * settled before the navigation will occur. Errors are ignored so that\n     * navigation is guaranteed to succeed.\n     */\n    safeWithNav?: () => Promise<unknown>;\n    /**\n     * Respond to raw \"keydown\" event.\n     */\n    onKeyDown?: (e: React.KeyboardEvent) => unknown;\n    /**\n     * Respond to raw \"keyup\" event.\n     */\n    onKeyUp?: (e: React.KeyboardEvent) => unknown;\n    /**\n     * A target destination window for a link to open in.  We only support\n     * \"_blank\" which opens the URL in a new tab.\n     *\n     * TODO(WB-1262): only allow this prop when `href` is also set.t\n     */\n    target?: \"_blank\";\n    /**\n     * Run async code before navigating to the URL passed to `href`. If the\n     * promise returned rejects then navigation will not occur.\n     *\n     * If both safeWithNav and beforeNav are provided, beforeNav will be run\n     * first and safeWithNav will only be run if beforeNav does not reject.\n     *\n     * WARNING: Using this with `target=\"_blank\"` will trigger built-in popup\n     * blockers in Firefox and Safari.  This is because we do navigation\n     * programmatically and `beforeNav` causes a delay which means that the\n     * browser can't make a directly link between a user action and the\n     * navigation.\n     */\n    beforeNav?: () => Promise<unknown>;\n    /**\n     * An optional title attribute.\n     */\n    title?: string;\n    /**\n     * An optional icon displayed before the link label.\n     */\n    startIcon?: IconAsset;\n    /**\n     * An optional icon displayed after the link label.\n     * If `target=\"_blank\"` and `endIcon` is passed in, `endIcon` will override\n     * the default `externalIcon`.\n     */\n    endIcon?: IconAsset;\n};\n\n/**\n * Reusable link component.\n *\n * Consisting of a [`ClickableBehavior`](#clickablebehavior) surrounding a\n * `LinkCore`. `ClickableBehavior` handles interactions and state changes.\n * `LinkCore` is a stateless component which displays the different states\n * the `Link` can take.\n *\n * ### Usage\n *\n * ```jsx\n * <Link\n *     href=\"https://khanacademy.org/\"\n * >\n *     Label\n * </Link>\n * ```\n */\nconst Link = React.forwardRef(\n    (\n        props: SharedProps,\n        ref: React.ForwardedRef<typeof ReactRouterLink | HTMLAnchorElement>,\n    ) => {\n        const {\n            onClick,\n            beforeNav = undefined,\n            safeWithNav,\n            href,\n            skipClientNav,\n            children,\n            tabIndex,\n            onKeyDown,\n            onKeyUp,\n            target = undefined,\n            inline = false,\n            kind = \"primary\",\n            light = false,\n            visitable = false,\n            ...sharedProps\n        } = props;\n\n        const renderClickableBehavior = (router: any): React.ReactNode => {\n            const ClickableBehavior = getClickableBehavior(\n                href,\n                skipClientNav,\n                router,\n            );\n\n            if (beforeNav) {\n                return (\n                    <ClickableBehavior\n                        disabled={false}\n                        href={href}\n                        role=\"link\"\n                        onClick={onClick}\n                        beforeNav={beforeNav}\n                        safeWithNav={safeWithNav}\n                        onKeyDown={onKeyDown}\n                        onKeyUp={onKeyUp}\n                    >\n                        {(state, {...childrenProps}) => {\n                            return (\n                                <LinkCore\n                                    {...sharedProps}\n                                    {...state}\n                                    {...childrenProps}\n                                    skipClientNav={skipClientNav}\n                                    href={href}\n                                    target={target}\n                                    tabIndex={tabIndex}\n                                    inline={inline}\n                                    kind={kind}\n                                    light={light}\n                                    visitable={visitable}\n                                    ref={ref}\n                                >\n                                    {children}\n                                </LinkCore>\n                            );\n                        }}\n                    </ClickableBehavior>\n                );\n            } else {\n                return (\n                    <ClickableBehavior\n                        disabled={false}\n                        href={href}\n                        role=\"link\"\n                        onClick={onClick}\n                        safeWithNav={safeWithNav}\n                        target={target}\n                        onKeyDown={onKeyDown}\n                        onKeyUp={onKeyUp}\n                    >\n                        {(state, {...childrenProps}) => {\n                            return (\n                                <LinkCore\n                                    {...sharedProps}\n                                    {...state}\n                                    {...childrenProps}\n                                    skipClientNav={skipClientNav}\n                                    href={href}\n                                    target={target}\n                                    tabIndex={tabIndex}\n                                    inline={inline}\n                                    kind={kind}\n                                    light={light}\n                                    visitable={visitable}\n                                    ref={ref}\n                                >\n                                    {children}\n                                </LinkCore>\n                            );\n                        }}\n                    </ClickableBehavior>\n                );\n            }\n        };\n\n        return (\n            <__RouterContext.Consumer>\n                {(router) => renderClickableBehavior(router)}\n            </__RouterContext.Consumer>\n        );\n    },\n);\n\nexport default Link;\n"],"names":["StyledAnchor","addStyle","StyledLink","Link","LinkCore","React.forwardRef","props","ref","renderInner","router","children","skipClientNav","focused","hovered","href","inline","kind","light","visitable","pressed","style","testId","_","target","startIcon","endIcon","restProps","linkStyles","_generateStyles","restingStyles","defaultStyles","sharedStyles","commonProps","isExternalLink","externalIcon","jsx","Icon","linkContentStyles","linkContent","jsxs","Fragment","isClientSideUrl","__RouterContext","styles","StyleSheet","Spacing","buttonType","blue","pink","purple","white","offBlack","offBlack32","offBlack64","Color","linkPurple","mix","fade","fadedBlue","activeLightVisited","activeDefaultPrimary","defaultTextColor","activeColor","defaultVisited","activeVisited","newStyles","onClick","beforeNav","safeWithNav","tabIndex","onKeyDown","onKeyUp","sharedProps","renderClickableBehavior","ClickableBehavior","getClickableBehavior","state","childrenProps"],"mappings":"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"}