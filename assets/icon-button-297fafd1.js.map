{"version":3,"file":"icon-button-297fafd1.js","sources":["../../packages/wonder-blocks-icon-button/src/components/icon-button-core.tsx","../../packages/wonder-blocks-icon-button/src/components/icon-button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {StyleSheet} from \"aphrodite\";\nimport {Link} from \"react-router-dom\";\nimport {__RouterContext} from \"react-router\";\n\nimport Color, {\n    SemanticColor,\n    mix,\n    fade,\n} from \"@khanacademy/wonder-blocks-color\";\nimport {addStyle} from \"@khanacademy/wonder-blocks-core\";\nimport {isClientSideUrl} from \"@khanacademy/wonder-blocks-clickable\";\nimport Icon from \"@khanacademy/wonder-blocks-icon\";\n\nimport type {\n    ChildrenProps,\n    ClickableState,\n} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {SharedProps} from \"./icon-button\";\n\ntype Props = SharedProps &\n    ChildrenProps &\n    ClickableState & {\n        /**\n         * URL to navigate to.\n         *\n         * Used to determine whether to render an `<a>` or `<button>` tag. Also\n         * passed in as the `<a>` tag's `href` if present.\n         */\n        href?: string;\n    };\n\nconst StyledAnchor = addStyle(\"a\");\nconst StyledButton = addStyle(\"button\");\nconst StyledLink = addStyle(Link);\n\nconst IconButtonCore: React.ForwardRefExoticComponent<\n    Props &\n        React.RefAttributes<typeof Link | HTMLButtonElement | HTMLAnchorElement>\n> = React.forwardRef<\n    typeof Link | HTMLButtonElement | HTMLAnchorElement,\n    Props\n>((props: Props, ref) => {\n    const {\n        skipClientNav,\n        color,\n        disabled,\n        focused,\n        hovered,\n        href,\n        icon,\n        kind = \"primary\",\n        light = false,\n        pressed,\n        style,\n        testId,\n        waiting: _,\n        ...restProps\n    } = props;\n\n    const renderInner = (router: any): React.ReactNode => {\n        const buttonColor =\n            color === \"destructive\"\n                ? SemanticColor.controlDestructive\n                : SemanticColor.controlDefault;\n\n        const buttonStyles = _generateStyles(buttonColor, kind, light);\n\n        const defaultStyle = [\n            sharedStyles.shared,\n            disabled && sharedStyles.disabled,\n            buttonStyles.default,\n            disabled && buttonStyles.disabled,\n            !disabled &&\n                (pressed\n                    ? buttonStyles.active\n                    : (hovered || focused) && buttonStyles.focus),\n        ];\n\n        const child = <Icon size=\"medium\" color=\"currentColor\" icon={icon} />;\n\n        const commonProps = {\n            \"data-test-id\": testId,\n            style: [defaultStyle, style],\n            ...restProps,\n        } as const;\n\n        if (href && !disabled) {\n            return router && !skipClientNav && isClientSideUrl(href) ? (\n                <StyledLink\n                    {...commonProps}\n                    to={href}\n                    ref={ref as React.Ref<typeof Link>}\n                >\n                    {child}\n                </StyledLink>\n            ) : (\n                <StyledAnchor\n                    {...commonProps}\n                    href={href}\n                    ref={ref as React.Ref<HTMLAnchorElement>}\n                >\n                    {child}\n                </StyledAnchor>\n            );\n        } else {\n            return (\n                <StyledButton\n                    type=\"button\"\n                    {...commonProps}\n                    disabled={disabled}\n                    ref={ref as React.Ref<HTMLButtonElement>}\n                >\n                    {child}\n                </StyledButton>\n            );\n        }\n    };\n\n    return (\n        <__RouterContext.Consumer>\n            {(router) => renderInner(router)}\n        </__RouterContext.Consumer>\n    );\n});\n\nexport default IconButtonCore;\n\nconst sharedStyles = StyleSheet.create({\n    shared: {\n        position: \"relative\",\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        boxSizing: \"border-box\",\n        height: 40,\n        width: 40,\n        padding: 0,\n        cursor: \"pointer\",\n        border: \"none\",\n        outline: \"none\",\n        textDecoration: \"none\",\n        background: \"none\",\n        margin: -8,\n        // This removes the 300ms click delay on mobile browsers by indicating that\n        // \"double-tap to zoom\" shouldn't be used on this element.\n        touchAction: \"manipulation\",\n        \":focus\": {\n            // Mobile: Removes a blue highlight style shown when the user clicks a button\n            WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\n        },\n    },\n    disabled: {\n        cursor: \"default\",\n    },\n});\n\nconst styles: Record<string, any> = {};\n\nconst _generateStyles = (\n    color: string,\n    kind: \"primary\" | \"secondary\" | \"tertiary\",\n    light: boolean,\n) => {\n    const buttonType = color + kind + light.toString();\n    if (styles[buttonType]) {\n        return styles[buttonType];\n    }\n\n    if (light && kind !== \"primary\") {\n        throw new Error(\"Light is only supported for primary IconButtons\");\n    }\n\n    const {white, offBlack32, offBlack64, offBlack} = Color;\n\n    const newStyles = {\n        default: {},\n        focus: {\n            color: light ? white : color,\n            borderWidth: 2,\n            borderColor: light ? white : color,\n            borderStyle: \"solid\",\n            borderRadius: 4,\n        },\n        active: {\n            color: light\n                ? mix(fade(color, 0.32), white)\n                : mix(offBlack32, color),\n            borderWidth: 2,\n            borderColor: light\n                ? mix(fade(color, 0.32), white)\n                : mix(offBlack32, color),\n            borderStyle: \"solid\",\n            borderRadius: 4,\n        },\n        disabled: {\n            color: light ? mix(fade(white, 0.32), color) : offBlack32,\n            cursor: \"default\",\n        },\n    } as const;\n    if (kind === \"primary\") {\n        // @ts-expect-error [FEI-5019] - TS2540 - Cannot assign to 'default' because it is a read-only property.\n        newStyles[\"default\"] = {\n            color: light ? white : color,\n        };\n    } else if (kind === \"secondary\") {\n        // @ts-expect-error [FEI-5019] - TS2540 - Cannot assign to 'default' because it is a read-only property.\n        newStyles[\"default\"] = {\n            color: offBlack,\n        };\n    } else if (kind === \"tertiary\") {\n        // @ts-expect-error [FEI-5019] - TS2540 - Cannot assign to 'default' because it is a read-only property.\n        newStyles[\"default\"] = {\n            color: offBlack64,\n        };\n    } else {\n        throw new Error(\"IconButton kind not recognized\");\n    }\n\n    styles[buttonType] = StyleSheet.create(newStyles);\n    return styles[buttonType];\n};\n","import * as React from \"react\";\nimport {__RouterContext} from \"react-router\";\n\nimport {getClickableBehavior} from \"@khanacademy/wonder-blocks-clickable\";\nimport type {IconAsset} from \"@khanacademy/wonder-blocks-icon\";\nimport type {AriaProps, StyleType} from \"@khanacademy/wonder-blocks-core\";\nimport {Link} from \"react-router-dom\";\nimport IconButtonCore from \"./icon-button-core\";\n\nexport type SharedProps = Partial<Omit<AriaProps, \"aria-disabled\">> & {\n    /**\n     * A Wonder Blocks icon asset, an object specifing paths for one or more of\n     * the following sizes: small, medium, large, xlarge.\n     */\n    icon: IconAsset;\n    /**\n     * The color of the icon button, either blue or red.\n     */\n    color?: \"default\" | \"destructive\";\n    /**\n     * The kind of the icon button, either primary, secondary, or tertiary.\n     *\n     * In default state:\n     * - Primary icon buttons are color: props.color\n     * - Secondary buttons are offBlack\n     * - Tertiary buttons are offBlack64\n     *\n     * In the hover/focus/press states, all variants have a border.\n     */\n    kind?: \"primary\" | \"secondary\" | \"tertiary\";\n    /**\n     * Whether the icon button is on a dark/colored background.\n     */\n    light?: boolean;\n    /**\n     * Whether the icon button is disabled.\n     */\n    disabled?: boolean;\n    /**\n     * Test ID used for e2e testing.\n     */\n    testId?: string;\n    /**\n     * Optional custom styles.\n     */\n    style?: StyleType;\n    // TODO(yejia): use this if ADR #47 has been implemented\n    /*\n    style?: Style<Exact<{\n        width?: number | string\n        position: Position,\n        ...MarginStyles,\n        ...FlexItemStyles,\n    }>>,\n    */\n\n    /**\n     * Adds CSS classes to the IconButton.\n     */\n    className?: string;\n    // NOTE(jeresig): Currently React Docgen (used by Styleguidist) doesn't\n    // support ... inside of an exact object type. Thus we had to move the\n    // following propers into this SharedProps, even though they should be\n    // external. Once that's fixed we can split them back apart.\n\n    /**\n     * URL to navigate to.\n     *\n     * Note: Either href or onClick must be defined\n     */\n    href?: string;\n    // TODO(WB-1262): only allow this prop when `href` is also set.\n    /**\n     * A target destination window for a link to open in.\n     */\n    target?: \"_blank\";\n    /**\n     * Specifies the type of relationship between the current document and the\n     * linked document. Should only be used when `href` is specified. This\n     * defaults to \"noopener noreferrer\" when `target=\"_blank\"`, but can be\n     * overridden by setting this prop to something else.\n     */\n    rel?: string;\n    /**\n     * Set the tabindex attribute on the rendered element.\n     */\n    tabIndex?: number;\n    /**\n     * Whether to avoid using client-side navigation.\n     *\n     * If the URL passed to href is local to the client-side, e.g.\n     * /math/algebra/eval-exprs, then it tries to use react-router-dom's Link\n     * component which handles the client-side navigation. You can set\n     * `skipClientNav` to true avoid using client-side nav entirely.\n     *\n     * NOTE: All URLs containing a protocol are considered external, e.g.\n     * https://khanacademy.org/math/algebra/eval-exprs will trigger a full\n     * page reload.\n     */\n    skipClientNav?: boolean;\n    /**\n     * Function to call when button is clicked.\n     *\n     * This callback should be used for things like marking BigBingo\n     * conversions. It should NOT be used to redirect to a different URL or to\n     * prevent navigation via e.preventDefault(). The event passed to this\n     * handler will have its preventDefault() and stopPropagation() methods\n     * stubbed out.\n     *\n     * Note: onClick is optional if href is present, but must be defined if\n     * href is not\n     */\n    onClick?: (e: React.SyntheticEvent) => unknown;\n};\n\n/**\n * An IconButton is a button whose contents are an SVG image.\n *\n * To use, supply an onClick function, a wonder-blocks icon asset (see\n * the Icon section) and an aria-label to describe the button functionality.\n * Optionally specify href (URL), clientSideNav, color\n * (Wonder Blocks Blue or Red), kind (\"primary\", \"secondary\", or \"tertiary\"),\n * light (whether the IconButton will be rendered on a dark background),\n * disabled , test ID, and custom styling.\n *\n * The size of an IconButton matches the size of icon it wraps which is 24x24\n * pixels.  The focus ring which is displayed on hover and focus is much\n * larger but does not affect its size.  This matches the behavior of Button.\n *\n * IconButtons require a certain amount of space between them to ensure the\n * focus rings don't overlap.  The minimum amount of spacing is 16px, but\n * you should refer to the mocks provided by design.  Using a Strut in between\n * IconButtons is the preferred way to for adding this spacing.\n *\n * Many layouts require alignment of visual left (or right) side of an\n * IconButton.  This requires a little bit of pixel nudging since each icon\n * as a different amount of internal padding.\n *\n * See the Toolbar documentation for examples of IconButton use that follow\n * the best practices described above.\n *\n * ```js\n * import {icons} from \"@khanacademy/wonder-blocks-icon\";\n * import IconButton from \"@khanacademy/wonder-blocks-icon-button\";\n *\n * <IconButton\n *     icon={icons.anIcon}\n *     aria-label=\"An Icon\"\n *     onClick={(e) => console.log(\"Hello, world!\")}\n * />\n * ```\n */\nconst IconButton: React.ForwardRefExoticComponent<\n    SharedProps &\n        React.RefAttributes<typeof Link | HTMLButtonElement | HTMLAnchorElement>\n> = React.forwardRef<\n    typeof Link | HTMLButtonElement | HTMLAnchorElement,\n    SharedProps\n>((props: SharedProps, ref) => {\n    const {\n        onClick,\n        href,\n        skipClientNav,\n        tabIndex,\n        target,\n        color = \"default\",\n        kind = \"primary\",\n        light = false,\n        disabled = false,\n        ...sharedProps\n    } = props;\n    const renderClickableBehavior = (router: any): React.ReactNode => {\n        const ClickableBehavior = getClickableBehavior(\n            href,\n            skipClientNav,\n            router,\n        );\n\n        return (\n            <ClickableBehavior\n                disabled={disabled}\n                href={href}\n                onClick={onClick}\n                role=\"button\"\n                target={target}\n            >\n                {(state, {...childrenProps}) => {\n                    return (\n                        <IconButtonCore\n                            {...sharedProps}\n                            {...state}\n                            {...childrenProps}\n                            color={color}\n                            kind={kind}\n                            light={light}\n                            disabled={disabled}\n                            skipClientNav={skipClientNav}\n                            href={href}\n                            target={target}\n                            tabIndex={tabIndex}\n                            ref={ref}\n                        />\n                    );\n                }}\n            </ClickableBehavior>\n        );\n    };\n\n    return (\n        <__RouterContext.Consumer>\n            {(router) => renderClickableBehavior(router)}\n        </__RouterContext.Consumer>\n    );\n});\n\nexport default IconButton;\n"],"names":["StyledAnchor","addStyle","StyledButton","StyledLink","Link","IconButtonCore","React.forwardRef","props","ref","skipClientNav","color","disabled","focused","hovered","href","icon","kind","light","pressed","style","testId","_","restProps","renderInner","router","buttonColor","SemanticColor","buttonStyles","_generateStyles","defaultStyle","sharedStyles","child","jsx","Icon","commonProps","isClientSideUrl","__RouterContext","StyleSheet","styles","buttonType","white","offBlack32","offBlack64","offBlack","Color","newStyles","mix","fade","IconButton","onClick","tabIndex","target","sharedProps","renderClickableBehavior","ClickableBehavior","getClickableBehavior","state","childrenProps","IconButton$1"],"mappings":"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"}