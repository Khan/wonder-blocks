{"version":3,"file":"clickable-behavior.stories-aeda8026.js","sources":["../../__docs__/wonder-blocks-clickable/clickable-behavior.argtypes.ts"],"sourcesContent":["import type {InputType} from \"@storybook/csf\";\n\nimport clickableArgtypes from \"./clickable.argtypes\";\n\nexport default {\n    children: {\n        description:\n            \"A function that returns the a React `Element`. The function is passed an object with three boolean properties: hovered, focused, and pressed, and a `childrenProps` argument that contains all the event handlers that should be passed to the React `Element` itself.\",\n        type: {\n            name: \"other\",\n            value: \"(state: ClickableState, childrenProps: ChildrenProps) => React.Node\",\n            required: true,\n        },\n        table: {\n            type: {\n                summary:\n                    \"(state: ClickableState, childrenProps: ChildrenProps) => React.Node\",\n            },\n        },\n    },\n    tabIndex: {\n        control: {type: \"number\"},\n        description: `Used to indicate the tab order of an element.\n            Use 0 to make an element focusable, and use -1 to make an\n            element non-focusable via keyboard navigation.`,\n        table: {\n            type: {summary: \"number\"},\n        },\n    },\n    /**\n     * States\n     */\n    disabled: {\n        ...clickableArgtypes.disabled,\n        description:\n            \"Whether the component is disabled.\\n\\n\" +\n            \"If the component is disabled, this component will return handlers that do nothing.\",\n    },\n    /**\n     * Events\n     */\n    onClick: {\n        ...clickableArgtypes.onClick,\n        description:\n            \"An onClick function which ClickableBehavior can execute when clicked.\",\n    },\n    onkeyDown: clickableArgtypes.onkeyDown,\n    onKeyUp: clickableArgtypes.onKeyUp,\n    /**\n     * Navigation\n     */\n    skipClientNav: clickableArgtypes.skipClientNav,\n    rel: clickableArgtypes.rel,\n    target: clickableArgtypes.target,\n    href: {\n        ...clickableArgtypes.href,\n        description:\n            \"Optional `href` which `ClickableBehavior` should direct to, uses client-side routing by default if react-router is present.\\n\\n\" +\n            \"For keyboard navigation, the default is that both an enter and space press would also navigate to this location. See the triggerOnEnter and triggerOnSpace props for more details\",\n    },\n    beforeNav: clickableArgtypes.beforeNav,\n    safeWithNav: clickableArgtypes.safeWithNav,\n\n    /**\n     * Accessibility\n     */\n    role: clickableArgtypes.role,\n} satisfies Record<string, InputType>;\n"],"names":["argTypes","clickableArgtypes"],"mappings":"khBAIA,MAAeA,EAAA,CACX,SAAU,CACN,YACI,yQACJ,KAAM,CACF,KAAM,QACN,MAAO,sEACP,SAAU,EACd,EACA,MAAO,CACH,KAAM,CACF,QACI,qEACR,CACJ,CACJ,EACA,SAAU,CACN,QAAS,CAAC,KAAM,QAAQ,EACxB,YAAa;AAAA;AAAA,4DAGb,MAAO,CACH,KAAM,CAAC,QAAS,QAAQ,CAC5B,CACJ,EAIA,SAAU,CACN,GAAGC,EAAkB,SACrB,YACI;AAAA;AAAA,mFAER,EAIA,QAAS,CACL,GAAGA,EAAkB,QACrB,YACI,uEACR,EACA,UAAWA,EAAkB,UAC7B,QAASA,EAAkB,QAI3B,cAAeA,EAAkB,cACjC,IAAKA,EAAkB,IACvB,OAAQA,EAAkB,OAC1B,KAAM,CACF,GAAGA,EAAkB,KACrB,YACI,kTAER,EACA,UAAWA,EAAkB,UAC7B,YAAaA,EAAkB,YAK/B,KAAMA,EAAkB,IAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}