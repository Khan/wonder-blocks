// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests
// edit packages/wonder-blocks-forms/docs.md and run `npm run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";
import Dropdown from "./components/dropdown.js";

describe("wonder-blocks-forms", () => {
    it("example 1", () => {
        const example = (
            <Dropdown
                items={[
                    {label: "item 1", value: 1},
                    {label: "item 2", value: 2},
                    {label: "item 3", value: 3},
                ]}
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const example = (
            <Dropdown
                show={true}
                items={[
                    {label: "item 1", value: 1},
                    {label: "item 2", value: 2},
                    {label: "item 3", value: 3},
                ]}
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        class Parent extends React.Component {
            constructor(props) {
                super(props);
                this.state = {
                    show: false,
                    selection: null,
                };
            }

            handleOpen() {
                this.setState({show: true});
            }

            handleClose() {
                console.log("handle close");
                this.setState({show: true});
            }

            handleChange(selection: any) {
                this.setState({selection});
                this.setState({show: false});
            }

            render() {
                console.log(`show = ${this.state.show}`);
                return (
                    <Dropdown
                        controlled={false}
                        show={this.state.show}
                        selection={this.state.selection}
                        onOpen={() => this.handleOpen()}
                        onClose={() => this.handleClose()}
                        onChange={(e, selection) =>
                            this.handleChange(selection)
                        }
                        items={[
                            {label: "item 1", value: 1},
                            {label: "item 2", value: 2},
                            {label: "item 3", value: 3},
                            {label: "item 4", value: 4},
                        ]}
                    />
                );
            }
        }

        const example = <Parent />;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
