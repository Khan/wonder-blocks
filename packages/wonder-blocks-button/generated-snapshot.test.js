// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-button
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import Button from "./components/button.js";

describe("wonder-blocks-button", () => {
    it("example 1", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                >
                    Primary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                >
                    Secondary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                >
                    Tertiary
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    color="destructive"
                >
                    Primary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                    color="destructive"
                >
                    Secondary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                    color="destructive"
                >
                    Tertiary
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    disabled={true}
                >
                    Primary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                    disabled={true}
                >
                    Secondary
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                    disabled={true}
                >
                    Tertiary
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 4", () => {
        const Color = require("@khanacademy/wonder-blocks-color").default;
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
                backgroundColor: Color.darkBlue,
                padding: 10,
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                >
                    Primary
                </Button>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                >
                    Secondary
                </Button>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                >
                    Tertiary
                </Button>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    disabled={true}
                >
                    Primary
                </Button>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                    disabled={true}
                >
                    Secondary
                </Button>
                <Button
                    light={true}
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                    disabled={true}
                >
                    Tertiary
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 5", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    size="small"
                >
                    Label
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="secondary"
                    size="small"
                >
                    Label
                </Button>
                <Button
                    style={styles.button}
                    onClick={(e) => window.alert("Hello, world!")}
                    kind="tertiary"
                    size="small"
                >
                    Label
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 6", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button href="#button-1" style={styles.button}>
                    href
                </Button>
                <Button
                    kind="secondary"
                    onClick={(e) => window.alert("Hello, world!")}
                    style={styles.button}
                >
                    onClick
                </Button>
                <Button
                    kind="tertiary"
                    href="#button-1"
                    onClick={(e) => window.alert("Hello, world!")}
                    style={styles.button}
                >
                    both
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 7", () => {
        const {StyleSheet} = require("aphrodite");
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {MemoryRouter, Route, Switch} = require("react-router-dom");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
                alignItems: "center",
            },
            button: {
                marginRight: 10,
            },
        });

        // NOTE: In actual code you would use BrowserRouter instead
        const example = (
            <MemoryRouter>
                <View style={styles.row}>
                    <Button href="/foo" style={styles.button}>
                        Uses Client-side Nav
                    </Button>
                    <Button href="/foo" style={styles.button} skipClientNav>
                        Avoids Client-side Nav
                    </Button>
                    <Switch>
                        <Route path="/foo">
                            <View id="foo">Hello, world!</View>
                        </Route>
                    </Switch>
                </View>
            </MemoryRouter>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 8", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");

        const example = (
            <View>
                <Button>Label</Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 9", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            column: {
                alignItems: "flex-start",
            },
            row: {
                flexDirection: "row",
            },
            gap: {
                height: 16,
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View>
                <View style={styles.row}>
                    <Button>Button in a row</Button>
                </View>
                <View style={styles.gap} />
                <View style={styles.column}>
                    <Button>Button in a column</Button>
                </View>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 10", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            gap: {
                height: 16,
            },
            button: {
                marginRight: 10,
                minWidth: 144,
            },
        });

        const example = (
            <View style={styles.row}>
                <Button style={styles.button} kind="secondary">
                    label
                </Button>
                <Button style={styles.button}>
                    label in a different language
                </Button>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 11", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            button: {
                marginRight: 10,
            },
        });

        const example = (
            <View>
                <View style={styles.row}>
                    <Button style={styles.button} kind="tertiary">
                        Tertiary
                    </Button>
                    <Button style={styles.badButton}>Primary</Button>
                </View>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
