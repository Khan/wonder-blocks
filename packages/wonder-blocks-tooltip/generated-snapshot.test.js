// @flow
// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-tooltip
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";
import Tooltip from "./components/tooltip.js";
import TooltipAnchor from "./components/tooltip-anchor.js";

describe("wonder-blocks-tooltip", () => {
    it("example 1", () => {
        const React = require("react");
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");
        const {Tooltip} = require("@khanacademy/wonder-blocks-tooltip");
        const {
            StandardModal,
            ModalLauncher,
        } = require("@khanacademy/wonder-blocks-modal");

        const tooltip = (
            <Tooltip content={"Some long text"}>
                <View>Anchor</View>
            </Tooltip>
        );

        const scrollyContent = (
            <div
                style={{
                    height: 100,
                    overflow: "auto",
                    border: "1px solid",
                    margin: 10,
                }}
            >
                <div style={{height: "200vh"}}>{tooltip}</div>
            </div>
        );

        const modalContent = (
            <div style={{height: "200vh"}}>{scrollyContent}</div>
        );

        const modal = (
            <StandardModal
                title="My modal"
                footer="Still my modal"
                content={modalContent}
            />
        );

        const example = (
            <div>
                {tooltip}

                {scrollyContent}

                <ModalLauncher modal={modal}>
                    {({openModal}) => (
                        <button onClick={openModal}>Click here!</button>
                    )}
                </ModalLauncher>
            </div>
        );

        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");
        const id = "tooltipanchor-justtext-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    No anchor
                </Text>
                <TooltipAnchor
                    anchorRef={anchorRef}
                    onStateChanged={onStateChanged}
                >
                    This is a string without any other elements
                </TooltipAnchor>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");
        const id = "tooltipanchor-textelement-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    No anchor
                </Text>
                <TooltipAnchor
                    anchorRef={anchorRef}
                    onStateChanged={onStateChanged}
                >
                    <Text>Something we want to anchor</Text>
                </TooltipAnchor>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 4", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");

        const id = "tooltipanchor-interactive-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    Anchor is inactive
                </Text>
                <TooltipAnchor
                    anchorRef={anchorRef}
                    onStateChanged={onStateChanged}
                >
                    <a href="#tooltip">
                        <Text>Another thing</Text>
                    </a>
                </TooltipAnchor>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 5", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");

        const id = "tooltipanchor-embedded-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    Anchor is inactive
                </Text>
                <Text>
                    Some text with this{" "}
                    <TooltipAnchor
                        anchorRef={anchorRef}
                        onStateChanged={onStateChanged}
                    >
                        <Text style={{border: "solid 1px red"}}>anchor</Text>
                    </TooltipAnchor>{" "}
                    in the middle
                </Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 6", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");

        const id = "tooltipanchor-complex-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    Anchor is inactive
                </Text>
                <TooltipAnchor
                    anchorRef={anchorRef}
                    onStateChanged={onStateChanged}
                >
                    <View>
                        <Text>
                            Some rich content with a focusable component.
                        </Text>
                        <Text>
                            We want the tooltip to show when the input is
                            focused but not require the whole content to be
                            focusable.
                        </Text>
                        <input type="text" />
                    </View>
                </TooltipAnchor>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 7", () => {
        const {View, Text} = require("@khanacademy/wonder-blocks-core");

        const id = "tooltipanchor-nofocusivity-status";

        let haveRef;
        let active;

        function updateStatus() {
            const el = document.getElementById(id);
            if (!el) {
                return;
            }
            if (!haveRef) {
                el.textContent = "No anchor reference";
            } else {
                el.textContent = active
                    ? "Anchor is active"
                    : "Anchor is inactive";
            }
        }

        function anchorRef(e) {
            haveRef = !!e;
            updateStatus();
        }

        function onStateChanged(a) {
            active = a;
            updateStatus();
        }

        const example = (
            <View>
                <Text
                    style={{marginBottom: 8, backgroundColor: "lightgray"}}
                    id={id}
                >
                    Anchor is inactive
                </Text>
                <TooltipAnchor
                    forceAnchorFocusivity={false}
                    anchorRef={anchorRef}
                    onStateChanged={onStateChanged}
                >
                    <View>
                        <Text>
                            Some rich content with a focusable component.
                        </Text>
                        <Text>
                            We want the tooltip to show when the input is
                            focused but not require the whole content to be
                            focusable.
                        </Text>
                        <input type="text" />
                    </View>
                </TooltipAnchor>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
