// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-typography
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import {View} from "@khanacademy/wonder-blocks-core";
import {
    Title,
    HeadingLarge,
    HeadingMedium,
    HeadingSmall,
    HeadingXSmall,
    BodySerifBlock,
    BodySerif,
    BodyMonospace,
    Body,
    LabelLarge,
    LabelMedium,
    LabelSmall,
    LabelXSmall,
    Tagline,
    Caption,
    Footnote,
} from "@khanacademy/wonder-blocks-typography";
import {StyleSheet} from "aphrodite";
import Color from "@khanacademy/wonder-blocks-color";
import {OptionItem, SingleSelect} from "@khanacademy/wonder-blocks-dropdown";

describe("wonder-blocks-typography", () => {
    it("example 1", () => {
        // NOTE(mdr): I added an `id` attribute to each of these tags, to ensure that
        //     they all pass the `id` attribute correctly. This fact will be saved in
        //     snapshot tests.
        const example = (
            <View>
                <Title id="example-Title">Title</Title>
                <HeadingLarge id="example-HeadingLarge">
                    HeadingLarge
                </HeadingLarge>
                <HeadingMedium id="example-HeadingMedium">
                    HeadingMedium
                </HeadingMedium>
                <HeadingSmall id="example-HeadingSmall">
                    HeadingSmall
                </HeadingSmall>
                <HeadingXSmall id="example-HeadingXSmall">
                    HeadingXSmall
                </HeadingXSmall>
                <BodySerifBlock id="example-BodySerifBlock">
                    BodySerifBlock
                </BodySerifBlock>
                <BodySerif id="example-BodySerif">BodySerif</BodySerif>
                <BodyMonospace id="example-BodyMonospace">
                    BodyMonospace
                </BodyMonospace>
                <Body id="example-Body">Body</Body>
                <LabelLarge id="example-LabelLarge">LabelLarge</LabelLarge>
                <LabelMedium id="example-LabelMedium">LabelMedium</LabelMedium>
                <LabelSmall id="example-LabelSmall">LabelSmall</LabelSmall>
                <LabelXSmall id="example-LabelXSmall">LabelXSmall</LabelXSmall>
                <Tagline id="example-Tagline">Tagline</Tagline>
                <Caption id="example-Caption">Caption</Caption>
                <Footnote id="example-Footnote">Footnote</Footnote>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 2", () => {
        const styles = StyleSheet.create({
            blueText: {
                color: Color.blue,
            },
        });
        const example = <Title style={styles.blueText}>Blue Title</Title>;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 3", () => {
        const example = <Title aria-label="Accessible Title">Title</Title>;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 4", () => {
        const example = (
            <View>
                <Title>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </Title>
                <HeadingLarge>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </HeadingLarge>
                <HeadingMedium>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </HeadingMedium>
                <HeadingSmall>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </HeadingSmall>
                <HeadingXSmall>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </HeadingXSmall>
                <BodySerifBlock>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </BodySerifBlock>
                <BodySerif>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </BodySerif>
                <BodyMonospace>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </BodyMonospace>
                <Body>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </Body>
                <LabelLarge>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </LabelLarge>
                <LabelMedium>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </LabelMedium>
                <LabelSmall>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </LabelSmall>
                <LabelXSmall>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </LabelXSmall>
                <Tagline>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </Tagline>
                <Caption>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </Caption>
                <Footnote>
                    Для каждого ученика, независимо от возраста. Реальные
                    результаты!
                </Footnote>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 5", () => {
        const example = (
            <View>
                <Title>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </Title>
                <HeadingLarge>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </HeadingLarge>
                <HeadingMedium>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </HeadingMedium>
                <HeadingSmall>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </HeadingSmall>
                <HeadingXSmall>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </HeadingXSmall>
                <BodySerifBlock>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </BodySerifBlock>
                <BodySerif>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </BodySerif>
                <BodyMonospace>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </BodyMonospace>
                <Body>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </Body>
                <LabelLarge>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </LabelLarge>
                <LabelMedium>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </LabelMedium>
                <LabelSmall>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </LabelSmall>
                <LabelXSmall>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </LabelXSmall>
                <Tagline>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </Tagline>
                <Caption>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </Caption>
                <Footnote>
                    Dành cho mọi học sinh, mọi lớp học. Kết quả thực tế.
                </Footnote>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 6", () => {
        const languages = {
            arabic: {
                text: "مرحبا",
                dir: "rtl",
            },
            armenian: {
                text: "Բարեւ",
            },
            greek: {
                text: "γεια σας",
            },
            hebrew: {
                text: "שלום",
                dir: "rtl",
            },
        };

        class LanguageSelector extends React.Component {
            constructor() {
                super();
                this.state = {
                    selectedValue: "arabic",
                };
            }

            renderTypography() {
                const {text, dir} = this.props.languages[
                    this.state.selectedValue
                ];
                return (
                    <React.Fragment>
                        <Title dir={dir}>{text}</Title>
                        <HeadingLarge dir={dir}>{text}</HeadingLarge>
                        <HeadingMedium dir={dir}>{text}</HeadingMedium>
                        <HeadingSmall dir={dir}>{text}</HeadingSmall>
                        <HeadingXSmall dir={dir}>{text}</HeadingXSmall>
                        <BodySerifBlock dir={dir}>{text}</BodySerifBlock>
                        <BodySerif dir={dir}>{text}</BodySerif>
                        <BodyMonospace dir={dir}>{text}</BodyMonospace>
                        <Body dir={dir}>{text}</Body>
                        <LabelLarge dir={dir}>{text}</LabelLarge>
                        <LabelMedium dir={dir}>{text}</LabelMedium>
                        <LabelSmall dir={dir}>{text}</LabelSmall>
                        <LabelXSmall dir={dir}>{text}</LabelXSmall>
                        <Tagline dir={dir}>{text}</Tagline>
                        <Caption dir={dir}>{text}</Caption>
                        <Footnote dir={dir}>{text}</Footnote>
                    </React.Fragment>
                );
            }

            render() {
                return (
                    <React.Fragment>
                        <SingleSelect
                            aria-labelledby="language-selector"
                            id="unique-language-selector"
                            placeholder="Select language"
                            onChange={(selectedValue) =>
                                this.setState({
                                    selectedValue,
                                })
                            }
                            selectedValue={this.state.selectedValue}
                        >
                            {Object.keys(this.props.languages).map(
                                (item, key) => (
                                    <OptionItem
                                        label={item}
                                        value={item}
                                        key={key}
                                    />
                                ),
                            )}
                        </SingleSelect>

                        {this.renderTypography()}
                    </React.Fragment>
                );
            }
        }

        const example = (
            <View>
                <LanguageSelector languages={languages} />
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it("example 7", () => {
        const Code = ({children}) => (
            <BodyMonospace
                style={{
                    whiteSpace: "pre",
                }}
            >
                {children}
            </BodyMonospace>
        );

        const code = `const things = {
    areTested\: "This is my new Code element with my code.",
};`;
        const example = <Code>{code}</Code>;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
