// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-core
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import ClickableBehavior from "./components/clickable-behavior.js";
import MediaLayout from "./components/media-layout.js";
import NoSSR from "./components/no-ssr.js";
import Text from "./components/text.js";
import UniqueIDProvider from "./components/unique-id-provider.js";
import View from "./components/view.js";

describe("wonder-blocks-core", () => {
    it("example 1", () => {
        const example = (
            <NoSSR
                placeholder={() => (
                    <View>
                        This gets rendered on client and server for the first
                        render call in the component tree
                    </View>
                )}
            >
                {() => (
                    <View>
                        This is rendered only by the client for all but the very
                        first render of the component tree.
                    </View>
                )}
            </NoSSR>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const {
            Body,
            BodyMonospace,
        } = require("@khanacademy/wonder-blocks-typography");

        const trackingArray = [];
        const renderAndTrackText = (text) => {
            trackingArray.push(text);
            return text;
        };

        const example = (
            <NoSSR
                placeholder={() => (
                    <View>
                        {renderAndTrackText("Root: placeholder render")}
                    </View>
                )}
            >
                {() => {
                    trackingArray.push("Root: children render");
                    return (
                        <NoSSR
                            placeholder={() => (
                                <View>
                                    {renderAndTrackText(
                                        "Child: placeholder render",
                                    )}
                                </View>
                            )}
                        >
                            {() => (
                                // We're not adding to the array here as that would trigger yet another render.
                                <View>
                                    <Body key="body">
                                        This should output that Root rendered
                                        its placeholder, then its children which
                                        in turn rendered the child's children.
                                        Giving us 3 specific renders.
                                    </Body>
                                    {trackingArray.map((t, i) => (
                                        <BodyMonospace key={i}>
                                            {t}
                                        </BodyMonospace>
                                    ))}
                                    <BodyMonospace key="child">
                                        Child: children render
                                    </BodyMonospace>
                                </View>
                            )}
                        </NoSSR>
                    );
                }}
            </NoSSR>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            container: {
                padding: 32,
                backgroundColor: "plum",
            },
            text: {
                fontFamily: "sans-serif",
                fontSize: 24,
            },
        });

        const example = (
            <View style={styles.container}>
                <Text style={styles.text}>Hello, world!</Text>
                <View
                    style={[
                        styles.container,
                        {backgroundColor: "goldenrod", padding: 4},
                    ]}
                >
                    Even with an array and inline styles!
                </View>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 4", () => {
        const example = (
            <View>
                <View onClick={() => alert("Clicked!")}>Click me!</View>

                <Text aria-hidden="true">
                    This text is hidden from screen readers.
                </Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 5", () => {
        const {
            Body,
            HeadingSmall,
        } = require("@khanacademy/wonder-blocks-typography");
        const {Spring, Strut} = require("@khanacademy/wonder-blocks-layout");
        const Button = require("@khanacademy/wonder-blocks-button").default;

        let providerRef = null;

        const renders = [];
        const provider = (
            <UniqueIDProvider ref={(ref) => (providerRef = ref)}>
                {(ids) => {
                    renders.push(ids.get("my-unique-id"));
                    return (
                        <View>
                            {renders.map((id, i) => (
                                <Body key={i}>
                                    Render {i}: {id}
                                </Body>
                            ))}
                        </View>
                    );
                }}
            </UniqueIDProvider>
        );

        const onClick = () => {
            if (providerRef) {
                providerRef.forceUpdate();
            }
        };

        const example = (
            <View>
                <View style={{flexDirection: "row"}}>
                    <Button onClick={onClick}>Click Me to Rerender</Button>
                    <Spring />
                </View>
                <Strut size={16} />
                <HeadingSmall>The UniqueIDProvider:</HeadingSmall>
                {provider}
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 6", () => {
        const {
            Body,
            BodyMonospace,
            HeadingSmall,
        } = require("@khanacademy/wonder-blocks-typography");
        const {Spring, Strut} = require("@khanacademy/wonder-blocks-layout");

        let firstId = null;
        let secondId = null;

        const children = (idf) => {
            const id1 = idf.get("an-id");
            const id2 = idf.get("something");
            firstId = firstId || id1;
            secondId = secondId || id2;
            return (
                <View>
                    <HeadingSmall>The initial render:</HeadingSmall>
                    <View>
                        <BodyMonospace>get("an-id"): {firstId}</BodyMonospace>
                        <BodyMonospace>
                            get("something"): {secondId}
                        </BodyMonospace>
                    </View>
                    <Strut size={16} />
                    <HeadingSmall>Subsequent requests:</HeadingSmall>
                    <View>
                        <BodyMonospace>get("an-id"): {id1}</BodyMonospace>
                        <BodyMonospace>get("something"): {id2}</BodyMonospace>
                    </View>
                </View>
            );
        };

        const example = (
            <UniqueIDProvider mockOnFirstRender={true}>
                {children}
            </UniqueIDProvider>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 7", () => {
        const {
            Body,
            HeadingSmall,
            BodyMonospace,
        } = require("@khanacademy/wonder-blocks-typography");
        const {Spring, Strut} = require("@khanacademy/wonder-blocks-layout");

        const children = ({get}) => (
            <View>
                <Body>
                    The id returned for "my-identifier": {get("my-identifier")}
                </Body>
            </View>
        );

        const example = (
            <View>
                <HeadingSmall>First Provider with scope: first</HeadingSmall>
                <UniqueIDProvider scope="first">{children}</UniqueIDProvider>
                <HeadingSmall>Second Provider with scope: second</HeadingSmall>
                <UniqueIDProvider scope="second">{children}</UniqueIDProvider>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 8", () => {
        const {
            BodyMonospace,
        } = require("@khanacademy/wonder-blocks-typography");
        const {Strut} = require("@khanacademy/wonder-blocks-layout");

        // TODO(somewhatabstract): Update this to be nice once we can get BodyMonospace
        // to allow us to properly preserve whitespace or have an alternative. Or remove
        // this entirely when our styleguide renders our interface definitions.
        const example = (
            <View>
                <BodyMonospace>
                    interface IIdentifierFactory &#123;
                </BodyMonospace>
                <View style={{flexDirection: "row"}}>
                    <Strut size={"2em"} />
                    <BodyMonospace>get(id: string): string;</BodyMonospace>
                </View>
                <BodyMonospace>&#125;</BodyMonospace>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 9", () => {
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            container: {
                padding: 32,
                backgroundColor: "plum",
            },
            text: {
                fontFamily: "sans-serif",
                fontSize: 24,
            },
        });

        const example = (
            <View style={styles.container}>
                <Text style={styles.text}>Hello, world!</Text>
                <View
                    style={[
                        styles.container,
                        {backgroundColor: "goldenrod", padding: 4},
                    ]}
                >
                    Even with an array and inline styles!
                </View>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 10", () => {
        const example = (
            <View>
                <View onClick={() => alert("Clicked!")}>Click me!</View>

                <Text aria-hidden="true">
                    This text is hidden from screen readers.
                </Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
