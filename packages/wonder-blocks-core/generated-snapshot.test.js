// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests
// edit packages/wonder-blocks-core/docs.md and run `npm run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";
import Text from "./components/text.js";
import View from "./components/view.js";

describe("wonder-blocks-core", () => {
    it("example 1", () => {
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            container: {
                padding: 32,
                backgroundColor: "plum",
            },
            text: {
                fontFamily: "sans-serif",
                fontSize: 24,
            },
        });

        const example = (
            <View style={styles.container}>
                <Text style={styles.text}>Hello, world!</Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const example = (
            <View>
                <View onClick={() => alert("Clicked!")}>Click me!</View>

                <Text aria-hidden>
                    This text is hidden from screen readers.
                </Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        // This should actually be `import {addStyle} from "wonder-blocks-core"`
        const {addStyle} = require("./util/add-style.js");
        const {StyleSheet} = require("aphrodite");

        const StyledInput = addStyle("input");

        const styles = StyleSheet.create({
            input: {
                backgroundColor: "pink",
                fontSize: 30,
            },
        });

        const example = (
            <StyledInput
                style={styles.input}
                type="text"
                placeholder="hello, world"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
