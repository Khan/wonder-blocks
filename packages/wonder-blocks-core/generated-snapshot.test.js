// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-core
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import ClickableBehavior from "./components/clickable-behavior.js";
import MediaLayout from "./components/media-layout.js";
import NoSSR from "./components/no-ssr.js";
import Text from "./components/text.js";
import View from "./components/view.js";

describe("wonder-blocks-core", () => {
    it("example 1", () => {
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            container: {
                padding: 32,
                backgroundColor: "plum",
            },
            text: {
                fontFamily: "sans-serif",
                fontSize: 24,
            },
        });

        const example = (
            <View style={styles.container}>
                <Text style={styles.text}>Hello, world!</Text>
                <View
                    style={[
                        styles.container,
                        {backgroundColor: "goldenrod", padding: 4},
                    ]}
                >
                    Even with an array and inline styles!
                </View>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const example = (
            <View>
                <View onClick={() => alert("Clicked!")}>Click me!</View>

                <Text aria-hidden="true">
                    This text is hidden from screen readers.
                </Text>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        const {addStyle} = require("./index.js");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            // default style for all instances of StyledInput
            input: {
                fontSize: 30,
            },
            // style for a particular instance of StyledInput
            pink: {
                backgroundColor: "pink",
            },
        });

        const StyledInput = addStyle("input", styles.input);

        const example = (
            <StyledInput
                style={styles.pink}
                type="text"
                placeholder="hello, world"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 4", () => {
        const Color = require("@khanacademy/wonder-blocks-color").default;
        const {Row, FlexCell} = require("@khanacademy/wonder-blocks-grid");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            background: {
                background: Color.offBlack,
            },

            cell: {
                height: 100,
                padding: 5,
            },

            small: {
                background: Color.blue,
            },

            medium: {
                background: Color.green,
            },

            large: {
                background: Color.gold,
            },
        });

        const cellStyles = [styles.cell, (size) => styles[size]];

        const example = (
            <View style={styles.background}>
                <MediaLayout>
                    <Row>
                        <FlexCell style={cellStyles}>
                            {({totalColumns, mediaSize}) => (
                                <Text>
                                    Layout Size: {mediaSize} Total Columns:{" "}
                                    {totalColumns}
                                </Text>
                            )}
                        </FlexCell>
                    </Row>
                </MediaLayout>
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 5", () => {
        const example = (
            <NoSSR
                placeholder={() => (
                    <View>
                        This gets rendered on client and server for the first
                        render call
                    </View>
                )}
            >
                {() => (
                    <View>
                        This is rendered only by the client for all but the
                        first render.
                    </View>
                )}
            </NoSSR>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
