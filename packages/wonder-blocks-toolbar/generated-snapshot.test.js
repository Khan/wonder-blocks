// @flow
// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-toolbar
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import Toolbar from "./components/toolbar.js";

describe("wonder-blocks-toolbar", () => {
    it("example 1", () => {
        const example = (
            <Toolbar
                contentKind="Video"
                showClose={true}
                title="Counting with small numbers"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const Button = require("@khanacademy/wonder-blocks-button").default;

        const startExercise = <Button>Next Video</Button>;

        const example = (
            <Toolbar
                contentKind="Video"
                rightContent={[startExercise]}
                showClose={false}
                title="Counting with small numbers"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 3", () => {
        const Link = require("@khanacademy/wonder-blocks-link").default;

        // TODO(scottgrant): This is a placeholder icon. The icon in Zeplin was rotated.
        const caretPath =
            "M18.629 15.997l-7.083-7.081L13.462 7l8.997 8.997L13.457 25l-1.916-1.916z";
        const caretIcon = (
            <svg role="img" width="24px" height="24px">
                <path fill="#1865f2" d={caretPath} />
            </svg>
        );
        //const goToExercise = <Link>Go to exercise {caretIcon}</Link>;
        const goToExercise = <a href="#">Go to exercise</a>;

        const example = (
            <Toolbar
                rightContent={[goToExercise]}
                showClose={true}
                subtitle="0 of 7 questions answered"
                title="Exercise Title"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 4", () => {
        const Button = require("@khanacademy/wonder-blocks-button").default;

        const questionCount = <span>7 questions</span>;
        const startExercise = <Button>Start exercise</Button>;

        const example = (
            <Toolbar
                rightContent={[questionCount, startExercise]}
                showClose={false}
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 5", () => {
        const Button = require("@khanacademy/wonder-blocks-button").default;

        const nextExercise = <Button>Next exercise</Button>;
        const questionCount = <span>7 questions</span>;
        const tryAgain = <Button kind="secondary">Try again</Button>;

        const example = (
            <Toolbar
                rightContent={[questionCount, tryAgain, nextExercise]}
                showClose={false}
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 6", () => {
        const Button = require("@khanacademy/wonder-blocks-button").default;

        const circle = (size, fill, border) => {
            const style = {
                backgroundColor: fill,
                border: `2px solid ${border}`,
                borderRadius: "50%",
                display: "inline-block",
                height: size,
                width: size,
            };
            const outerStyle = {
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                margin: 3,
            };

            return (
                <span style={outerStyle}>
                    <span style={style} />
                </span>
            );
        };

        const circleComplete = circle(4, "#00a60e", "#00a60e");
        const circleActive = circle(8, "#00a60e", "#00a60e");
        const circleIncomplete = circle(4, "white", "rgba(33, 36, 44, 0.2)");
        const circleStyle = {
            display: "flex",
            flexDirection: "row",
            justifyContent: "space-between",
        };
        const questionCount = (
            <span style={circleStyle}>
                <span style={{marginRight: 12}}>
                    Get 5 of 7 questions to level up to Familiar
                </span>
                {circleComplete} {circleComplete}
                {circleActive}
                {circleIncomplete} {circleIncomplete} {circleIncomplete}{" "}
                {circleIncomplete}
            </span>
        );
        const nextQuestion = <Button>Next question</Button>;

        const example = (
            <Toolbar
                rightContent={[questionCount, nextQuestion]}
                showClose={false}
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 7", () => {
        const Link = require("@khanacademy/wonder-blocks-link").default;

        // TODO(scottgrant): This is a placeholder icon. The icon in Zeplin was rotated.
        const caretPath =
            "M18.629 15.997l-7.083-7.081L13.462 7l8.997 8.997L13.457 25l-1.916-1.916z";
        const caretIcon = (
            <svg role="img" width="24px" height="24px">
                <path fill="#1865f2" d={caretPath} />
            </svg>
        );
        //const goToExercise = <Link>Go to exercise {caretIcon}</Link>;
        const goToExercise = <a href="#">Go to exercise</a>;

        const example = (
            <Toolbar
                contentKind="Exercise"
                rightContent={[goToExercise]}
                showClose={true}
                subtitle="1 of 14 questions answered"
                title="Patterns of migration and communal bird-feeding given the serious situation of things that will make this string long and obnoxious"
            />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 8", () => {
        const example = <Toolbar showClose={true} title="Title" />;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 9", () => {
        const Button = require("@khanacademy/wonder-blocks-button").default;

        const startExercise = <Button>Next Video</Button>;

        const example = (
            <Toolbar rightContent={[startExercise]} showClose={false} />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 10", () => {
        const style = {
            backgroundColor: "#0a2a66",
            boxShadow: "0 1px 0 0 rgba(255, 255, 255, 0.64)",
            color: "white",
        };

        const example = (
            <Toolbar showClose={true} style={style} title="Title" />
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 11", () => {
        const example = <Toolbar size="small" />;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 12", () => {
        const example = <Toolbar size="medium" />;
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
