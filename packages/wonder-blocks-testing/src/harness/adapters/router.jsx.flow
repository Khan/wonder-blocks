/**
 * @flow
 */
import * as React from "react";
import { MemoryRouter } from "react-router-dom";
import type { LocationShape } from "react-router-dom";
import type { TestHarnessAdapter } from "../types";
declare type MemoryRouterProps = React.ElementConfig<typeof MemoryRouter>;

/**
 * Configuration for the withLocation test harness adapter.
 */
declare type Config =
  | $ReadOnly<
      | {|
          /**
           * See MemoryRouter prop for initialEntries.
           */
          initialEntries: $PropertyType<MemoryRouterProps, "initialEntries">,

          /**
           * See MemoryRouter prop for initialIndex.
           */
          initialIndex?: $PropertyType<MemoryRouterProps, "initialIndex">,

          /**
           * See MemoryRouter prop for getUserConfirmation.
           */
          getUserConfirmation?: $PropertyType<
            MemoryRouterProps,
            "getUserConfirmation"
          >,

          /**
           * A path match to use.
           *
           * When this is specified, the harnessed component will be
           * rendered inside a `Route` handler with this path.
           *
           * If the path matches the location, then the route will
           * render the component.
           *
           * If the path does not match the location, then the route
           * will not render the component.
           */
          path?: string,
        |}
      | {|
          /**
           * The location to use.
           */
          location: string | LocationShape,

          /**
           * Force the use of a StaticRouter, instead of MemoryRouter.
           */
          forceStatic: true,

          /**
           * A path match to use.
           *
           * When this is specified, the harnessed component will be
           * rendered inside a `Route` handler with this path.
           *
           * If the path matches the location, then the route will
           * render the component.
           *
           * If the path does not match the location, then the route
           * will not render the component.
           */
          path?: string,
        |}
      | {|
          /**
           * The initial location to use.
           */
          location: string | LocationShape,

          /**
           * A path match to use.
           *
           * When this is specified, the harnessed component will be
           * rendered inside a `Route` handler with this path.
           *
           * If the path matches the location, then the route will
           * render the component.
           *
           * If the path does not match the location, then the route
           * will not render the component.
           */
          path?: string,
        |}
    >
  | string;
/**
 * The default configuration for this adapter.
 */
declare export var defaultConfig: {|
  +location: "/",
|};
/**
 * Adapter that sets up a router and AppShell location-specific contexts.
 *
 * This allows you to ensure that components are being tested in the
 * AppShell world.
 *
 * NOTE(somewhatabstract): The AppShell component itself already does
 * the work of setting up routing and the AppShellContext and so using this
 * adapter with the App component will have zero-effect since AppShell will
 * override it.
 */
declare export var adapter: TestHarnessAdapter<Config>;
