// This file is auto-generated by gen-snapshot-tests.js
// Do not edit this file.  To make changes to these snapshot tests:
//   1. edit the markdown documentation files in the package,
//        packages/wonder-blocks-form
//   2. Run `yarn run gen-snapshot-tests`.
import React from "react";
import renderer from "react-test-renderer";

// Mock react-dom as jest doesn't like findDOMNode.
jest.mock("react-dom");
import Checkbox from "./components/checkbox.js";
import CheckboxCore from "./components/checkbox-core.js";

describe("wonder-blocks-form", () => {
    it("example 1", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet} = require("aphrodite");

        const styles = StyleSheet.create({
            row: {
                flexDirection: "row",
            },
            marginRight: {
                marginRight: 16,
            },
        });

        const handleChanged = (checked) =>
            console.log(
                `clicked on checkbox with checked=${checked.toString()}`,
            );

        const example = (
            <View style={[styles.row]}>
                <Checkbox
                    error={false}
                    checked={false}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
                <Checkbox
                    error={false}
                    checked={true}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
                <Checkbox
                    error={true}
                    checked={false}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
                <Checkbox
                    error={true}
                    checked={true}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
                <Checkbox
                    disabled={true}
                    checked={false}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
                <Checkbox
                    disabled={true}
                    checked={true}
                    style={[styles.marginRight]}
                    onChange={(checked) => handleChanged(checked)}
                />
            </View>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it("example 2", () => {
        const {View} = require("@khanacademy/wonder-blocks-core");
        const {StyleSheet, css} = require("aphrodite");

        const styles = StyleSheet.create({
            cell: {
                padding: 10,
            },
            checkbox: {
                marginLeft: 5,
                marginRight: 5,
            },
        });

        const states = ["default", "error", "disabled"];
        const clickableStates = ["default", "hovered", "pressed"];
        const checkedStates = [false, true];

        const example = (
            <table>
                <thead>
                    <tr>
                        <th />
                        <th colSpan="2">Default</th>
                        <th colSpan="2">Hover/focus</th>
                        <th colSpan="2">Active/press</th>
                    </tr>
                </thead>
                <tbody>
                    {states.map((state) => (
                        <tr key={state}>
                            <td>{state}</td>
                            {clickableStates.map((clickableState) => {
                                const checkboxes = checkedStates.map(
                                    (checked) => {
                                        return (
                                            <td
                                                key={`${clickableState}-${checked}`}
                                                className={css(styles.cell)}
                                            >
                                                <CheckboxCore
                                                    checked={checked}
                                                    disabled={
                                                        state === "disabled"
                                                    }
                                                    error={state === "error"}
                                                    hovered={
                                                        clickableState ===
                                                        "hovered"
                                                    }
                                                    pressed={
                                                        clickableState ===
                                                        "pressed"
                                                    }
                                                    style={[styles.checkbox]}
                                                />
                                            </td>
                                        );
                                    },
                                );
                                return checkboxes;
                            })}
                        </tr>
                    ))}
                </tbody>
            </table>
        );
        const tree = renderer.create(example).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
