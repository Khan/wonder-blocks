const marked = require("marked");
const fs = require("fs");
const path = require("path");
const unescape = require("unescape");
const glob = require("glob");
const babel = require("babel-core");
const babylon = require("babylon");

const styleguideConfig = require("./styleguide.config.js");
// const Preview = require('react-styleguidist/lib/rsg-components/Preview/Preview');

for (const section of styleguideConfig.sections) {

    const content = fs.readFileSync(section.content, "utf8");
    const tokens = marked.lexer(content);
    const examples = tokens.filter(token => token.type === "code").map(token => token.text);

    const root = path.dirname(section.content);
    const modName = root.split("/")[1];

    if (section.components) {
        const lines = [
            "// This file is auto-generated by gen-tests.js",
            `import React from "react";`,
            `import renderer from "react-test-renderer"`,
        ];

        glob(section.components, {}, (err, files) => {

            for (const file of files) {
                const src = fs.readFileSync(file, "utf8");
                const match = src.match(/export default class ([^ ]+)/);
                
                const compName = match[1];
                const relFile = path.relative(root, file);

                lines.push(`import ${compName} from "./${relFile}";`);
            }

            lines.push("");
            lines.push(`describe("${modName}", () => {`);

            examples.forEach((example, exampleIndex) => {
                lines.push(`    it("example ${exampleIndex + 1}", () => {`);

                const ast = babylon.parse(example, {
                    plugins: ["jsx", "flow"],
                });   

                const lastStatement = ast.program.body[ast.program.body.length - 1];

                if (lastStatement.type !== "ExpressionStatement") {
                    throw new Error("last line should be an expression");
                }

                if (lastStatement.expression.type !== "JSXElement") {
                    throw new Error("last line should be a JSX Element");
                }

                // TODO(kevinb): add a `;` at the end of the last statement
                lines.push(...example.split("\n").map((line, index) => 
                    index + 1 === lastStatement.loc.start.line
                        ? `        const example = ${line}`
                        : `        ${line}`));

                lines.push("        const tree = renderer.create(example).toJSON();");
                lines.push("        expect(tree).toMatchSnapshot();");

                lines.push(`    });`);
            });

            lines.push("});\n");

            const data = lines.join("\n");

            const outPath = path.join(root, "snapshot.test.js");
            fs.writeFileSync(outPath, data, "utf8");
        });
    }

    const components = section.components;
}
