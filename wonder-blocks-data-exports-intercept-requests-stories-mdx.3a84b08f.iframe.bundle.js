"use strict";(self.webpackChunkwonder_blocks=self.webpackChunkwonder_blocks||[]).push([[2119],{"./__docs__/wonder-blocks-data/exports.intercept-requests.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-data/dist/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre"},(0,_storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.h_,{title:"Data / Exports / InterceptRequests",component:_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__.uk,parameters:{chromatic:{disableSnapshot:!0}}}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h1,{id:"interceptrequests",children:"InterceptRequests"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["When you want to generate tests that check the loading state and\nsubsequent loaded state are working correctly for your uses of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," you can\nuse the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"InterceptRequests"})," component. You can also use this component to\nregister request interceptors for any code that uses the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"useRequestInterception"}),"\nhook."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"This component takes the children to be rendered, and an interceptor function."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"Note that this component is expected to be used only within test cases or\nstories. Be careful want request IDs are matched to avoid intercepting the\nwrong requests and remember that in-flight requests for a given request ID\ncan be shared - which means a bad request ID match could share requests across\ndifferent request IDs.."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"interceptor"})," intercept function has the form:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{className:"language-js",children:"(requestId: string) => ?Promise<TData>;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["If this method returns ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"null"}),", then the next interceptor in the chain is\ninvoked, ultimately ending with the original handler. This\nmeans that a request will be made for data via the handler assigned to the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Data"})," component being intercepted if no interceptor handles the request first."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{className:"language-jsx",children:'import {Body, BodyMonospace} from "@khanacademy/wonder-blocks-typography";\nimport {View} from "@khanacademy/wonder-blocks-core";\nimport {InterceptRequests, Data} from "@khanacademy/wonder-blocks-data";\nimport {Strut} from "@khanacademy/wonder-blocks-layout";\nimport Color from "@khanacademy/wonder-blocks-color";\nimport Spacing from "@khanacademy/wonder-blocks-spacing";\n\nconst myHandler = () => Promise.reject(new Error("You should not see this!"));\n\nconst interceptor = (requestId) =>\n    requestId === "INTERCEPT_EXAMPLE"\n        ? Promise.resolve("INTERCEPTED DATA!")\n        : null;\n\n<InterceptRequests interceptor={interceptor}>\n    <View>\n        <Body>This received intercepted data!</Body>\n        <Data handler={myHandler} requestId="INTERCEPT_EXAMPLE">\n            {(result) => {\n                if (result.status !== "success") {\n                    return "If you see this, the example is broken!";\n                }\n\n                return <BodyMonospace>{result.data}</BodyMonospace>;\n            }}\n        </Data>\n    </View>\n</InterceptRequests>;\n'})})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Data / Exports / InterceptRequests",parameters:{chromatic:{disableSnapshot:!0}},component:_khanacademy_wonder_blocks_data__WEBPACK_IMPORTED_MODULE_1__.uk,tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_storybook_addon_essentials_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const __WEBPACK_DEFAULT_EXPORT__=componentMeta}}]);