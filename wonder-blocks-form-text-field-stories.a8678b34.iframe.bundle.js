/*! For license information please see wonder-blocks-form-text-field-stories.a8678b34.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkwonder_blocks=self.webpackChunkwonder_blocks||[]).push([[2956,7812],{"./.storybook/components/component-info.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-button/dist/es/index.js"),_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/wonder-blocks-typography/dist/es/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const githubIconAsset={small:"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z"},ComponentInfo=({name,version})=>{var _name$split;const packageFolder=null==(_name$split=name.split("/"))?void 0:_name$split[1];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_2__.G7,{style:{justifyContent:"flex-end",alignItems:"center",flexDirection:"row",gap:10},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_khanacademy_wonder_blocks_typography__WEBPACK_IMPORTED_MODULE_3__.YS,{children:[name,"@",version]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_khanacademy_wonder_blocks_button__WEBPACK_IMPORTED_MODULE_1__.Z,{kind:"secondary",href:`https://github.com/Khan/wonder-blocks/tree/main/packages/${packageFolder}`,target:"_blank",style:{color:"black"},icon:githubIconAsset,children:"Source code"})]})};ComponentInfo.displayName="ComponentInfo";const __WEBPACK_DEFAULT_EXPORT__=ComponentInfo;try{componentinfo.displayName="componentinfo",componentinfo.__docgenInfo={description:"An internal component that displays the package name and version. It also\nincludes a link to the Github repo.",displayName:"componentinfo",props:{name:{defaultValue:null,description:"The package name.",name:"name",required:!0,type:{name:"string"}},version:{defaultValue:null,description:"The latest stable version.",name:"version",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/components/component-info.tsx#componentinfo"]={docgenInfo:componentinfo.__docgenInfo,name:"componentinfo",path:".storybook/components/component-info.tsx#componentinfo"})}catch(__react_docgen_typescript_loader_error){}},"./__docs__/wonder-blocks-form/text-field.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoComplete:()=>AutoComplete,CustomStyle:()=>CustomStyle,Default:()=>Default,Disabled:()=>Disabled,Email:()=>Email,Error:()=>Error,ErrorLight:()=>ErrorLight,Light:()=>Light,Number:()=>text_field_stories_Number,Password:()=>Password,ReadOnly:()=>ReadOnly,Ref:()=>Ref,Required:()=>Required,Telephone:()=>Telephone,Text:()=>Text,WithAutofocus:()=>WithAutofocus,__namedExportsOrder:()=>__namedExportsOrder,default:()=>text_field_stories});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/aphrodite/lib/index.js"),es=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js"),dist_es=__webpack_require__("./packages/wonder-blocks-color/dist/es/index.js"),wonder_blocks_layout_dist_es=__webpack_require__("./packages/wonder-blocks-layout/dist/es/index.js"),wonder_blocks_spacing_dist_es=__webpack_require__("./packages/wonder-blocks-spacing/dist/es/index.js"),wonder_blocks_button_dist_es=__webpack_require__("./packages/wonder-blocks-button/dist/es/index.js"),wonder_blocks_typography_dist_es=__webpack_require__("./packages/wonder-blocks-typography/dist/es/index.js"),wonder_blocks_form_dist_es=__webpack_require__("./packages/wonder-blocks-form/dist/es/index.js"),wonder_blocks_form_package=__webpack_require__("./packages/wonder-blocks-form/package.json"),component_info=__webpack_require__("./.storybook/components/component-info.tsx");const text_field_argtypes={id:{description:"The unique identifier for the input.",type:{name:"string",required:!0},table:{type:{summary:"string"}},control:{type:"text"}},type:{description:"Determines the type of input. Defaults to text. This may change the appearance or type of characters allowed.",table:{type:{summary:'"text" | "password" | "email" | "number" | "tel"'},defaultValue:{summary:"text"}},options:["text","password","email","number","tel"],control:{type:"select"}},value:{description:"The input value.",type:{name:"string",required:!0},table:{type:{summary:"string"}},control:{type:"text"}},autoComplete:{description:"Specifies if the input field allows autocomplete.",table:{type:{summary:"string",detail:'There is a large number of options, including "on", "off", "username", "current-password", and many others.'}},control:{type:"text"}},disabled:{description:"Makes a read-only input field that cannot be focused.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:{type:"boolean"}},light:{description:"Change the default focus ring color to fit a dark background.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:{type:"boolean"}},required:{description:"Whether this field is required to to continue, or the error message to render if this field is left blank. Pass in a message instead of `true` if possible.",table:{type:{summary:"boolean | string",detail:"The string will not be used if a `validate` prop is passed in."}},control:{type:"null"}},placeholder:{description:"Provide hints or examples of what to enter.",table:{type:{summary:"string"}},control:{type:"text"}},readOnly:{description:"Specifies if the input field is read-only.",table:{type:{summary:"boolean"}},control:{type:"boolean"}},style:{description:"Custom styles for the input.",table:{type:{summary:"StyleType"}}},testId:{description:"Optional test ID for e2e testing.",table:{type:{summary:"string"}},control:{type:"text"}},validate:{description:"Provide a validation for the input value. Return a string error message or null | void for a valid input.",table:{type:{summary:"(value: string) => ?string"}},control:{type:"null"}},onValidate:{description:"Called right after the TextField input is validated.",table:{category:"Events",type:{summary:"(errorMessage: ?string) => mixed"}}},onChange:{description:"Called when the value has changed. Use this in conjunction with the `value` prop to update the string rendered in the input field.",type:{name:"other",value:"(newValue: string) => mixed",required:!0},table:{category:"Events",type:{summary:"(newValue: string) => mixed"}}},onKeyDown:{action:"keyDown",description:"Called when a key is pressed.",table:{category:"Events",type:{summary:"(event: SyntheticKeyboardEvent<HTMLInputElement>) => mixed"}}},onFocus:{action:"focus",description:"Called when the element has been focused.",table:{category:"Events",type:{summary:"(event: SyntheticFocusEvent<HTMLInputElement>) => mixed"}}},onBlur:{action:"blur",description:"Called when the element has been blurred.",table:{category:"Events",type:{summary:"(event: SyntheticFocusEvent<HTMLInputElement>) => mixed"}}}};var _Default$parameters,_Default$parameters2,_Default$parameters2$,_Text$parameters,_Text$parameters2,_Text$parameters2$doc,_Required$parameters,_Required$parameters2,_Required$parameters3,_Number$parameters,_Number$parameters2,_Number$parameters2$d,_Password$parameters,_Password$parameters2,_Password$parameters3,_Email$parameters,_Email$parameters2,_Email$parameters2$do,_Telephone$parameters,_Telephone$parameters2,_Telephone$parameters3,_Error$parameters,_Error$parameters2,_Error$parameters2$do,_Light$parameters,_Light$parameters2,_Light$parameters2$do,_ErrorLight$parameter,_ErrorLight$parameter2,_ErrorLight$parameter3,_Disabled$parameters,_Disabled$parameters2,_Disabled$parameters3,_CustomStyle$paramete,_CustomStyle$paramete2,_CustomStyle$paramete3,_Ref$parameters,_Ref$parameters2,_Ref$parameters2$docs,_ReadOnly$parameters,_ReadOnly$parameters2,_ReadOnly$parameters3,_WithAutofocus$parame,_WithAutofocus$parame2,_WithAutofocus$parame3,_AutoComplete$paramet,_AutoComplete$paramet2,_AutoComplete$paramet3,jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const text_field_stories={title:"Form / TextField",component:wonder_blocks_form_dist_es.nv,parameters:{componentSubtitle:(0,jsx_runtime.jsx)(component_info.Z,{name:wonder_blocks_form_package.u2,version:wonder_blocks_form_package.i8})},argTypes:text_field_argtypes},Default={args:{id:"some-id",type:"text",value:"",disabled:!1,placeholder:"",required:!1,light:!1,testId:"",readOnly:!1,autoComplete:"off",validate:()=>{},onValidate:()=>{},onChange:()=>{},onKeyDown:()=>{},onFocus:()=>{},onBlur:()=>{}}},Text=()=>{const[value,setValue]=react.useState("");return(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-1",type:"text",value,placeholder:"Text",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()}})};Text.displayName="Text",Text.parameters={docs:{storyDescription:"An input field with type `text` takes all kinds of characters."}};const Required=()=>{const[value,setValue]=react.useState("");return(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-2",type:"text",value,onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},required:!0})};Required.displayName="Required",Required.parameters={docs:{description:{story:"A required field will have error styling if the\n        field is left blank. To observe this, type something into the\n        field, backspace all the way, and then shift focus out of the field."}},chromatic:{disableSnapshot:!0}};const text_field_stories_Number=()=>{const[value,setValue]=react.useState("12345");return(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-3",type:"number",value,placeholder:"Number",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()}})};text_field_stories_Number.displayName="Number",text_field_stories_Number.parameters={docs:{description:{story:"An input field with type `number` will only take numeric characters as input."}}};const Password=()=>{const[value,setValue]=react.useState("Password123"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-4",type:"password",value,placeholder:"Password",validate:value=>value.length<8?"Password must be at least 8 characters long":/\d/.test(value)?void 0:"Password must contain a numeric value",onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessage,children:errorMessage})]})]})};Password.displayName="Password",Password.parameters={docs:{description:{story:"An input field with type `password` will\n        obscure the input value. It also often contains validation.\n        In this example, the password must be over 8 characters long and\n        must contain a numeric value."}}};const Email=()=>{const[value,setValue]=react.useState("khan@khanacademy.org"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-5",type:"email",value,placeholder:"Email",validate:value=>{if(!/^[^@\s]+@[^@\s.]+\.[^@.\s]+$/.test(value))return"Please enter a valid email"},onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessage,children:errorMessage})]})]})};Email.displayName="Email",Email.parameters={docs:{description:{story:"An input field with type `email` will automatically\n        validate an input on submit to ensure it's either formatted properly\n        or blank. `TextField` will run validation on blur if the\n        `validate` prop is passed in, as in this example."}}};const Telephone=()=>{const[value,setValue]=react.useState("123-456-7890"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-6",type:"tel",value,placeholder:"Telephone",validate:value=>{if(!/^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/.test(value))return"Invalid US telephone number"},onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessage,children:errorMessage})]})]})};Telephone.displayName="Telephone",Telephone.parameters={docs:{description:{story:"An input field with type `tel` will NOT\n        validate an input on submit by default as telephone numbers\n        can vary considerably. `TextField` will run validation on blur\n        if the `validate` prop is passed in, as in this example."}}};const Error=()=>{const[value,setValue]=react.useState("khan"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-7",type:"email",value,placeholder:"Email",validate:value=>{if(!/^[^@\s]+@[^@\s.]+\.[^@.\s]+$/.test(value))return"Please enter a valid email"},onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessage,children:errorMessage})]})]})};Error.displayName="Error",Error.parameters={docs:{description:{story:"If an input value fails validation,\n        `TextField` will have error styling."}}};const Light=()=>{const[value,setValue]=react.useState("khan@khanacademy.org"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{style:styles.darkBackground,children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-9",type:"email",value,placeholder:"Email",light:!0,validate:value=>{if(!/^[^@\s]+@[^@\s.]+\.[^@.\s]+$/.test(value))return"Please enter a valid email"},onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessageLight,children:errorMessage})]})]})};Light.displayName="Light",Light.parameters={docs:{description:{story:"If the `light` prop is set to true,\n        `TextField` will have light styling. This is intended to be used\n        on a dark background. There is also a specific light styling for the\n        error state, as seen in the `ErrorLight` story."}}};const ErrorLight=()=>{const[value,setValue]=react.useState("khan"),[errorMessage,setErrorMessage]=react.useState(),[focused,setFocused]=react.useState(!1);return(0,jsx_runtime.jsxs)(es.G7,{style:styles.darkBackground,children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-7",type:"email",value,placeholder:"Email",light:!0,validate:value=>{if(!/^[^@\s]+@[^@\s.]+\.[^@.\s]+$/.test(value))return"Please enter a valid email"},onValidate:errorMessage=>{setErrorMessage(errorMessage)},onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},onFocus:()=>{setFocused(!0)},onBlur:()=>{setFocused(!1)}}),!focused&&errorMessage&&(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.xSmall_8}),(0,jsx_runtime.jsx)(es.xv,{style:styles.errorMessage,children:errorMessage})]})]})};ErrorLight.displayName="ErrorLight",ErrorLight.parameters={docs:{description:{story:"If an input value fails validation and the\n        `light` prop is true, `TextField` will have light error styling."}}};const Disabled=()=>(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-8",value:"",placeholder:"This field is disabled.",onChange:()=>{},disabled:!0});Disabled.displayName="Disabled",Disabled.parameters={docs:{description:{story:"If the `disabled` prop is set to true,\n        `TextField` will have disabled styling and will not be interactable."}}};const CustomStyle=()=>{const[value,setValue]=react.useState("");return(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-10",style:styles.customField,type:"text",value,placeholder:"Text",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()}})};CustomStyle.displayName="CustomStyle",CustomStyle.parameters={docs:{description:{story:"`TextField` can take in custom styles that\n        override the default styles. This example has custom styles for the\n        `backgroundColor`, `color`, `border`, `maxWidth`, and\n        placeholder `color` properties."}}};const Ref=()=>{const[value,setValue]=react.useState(""),inputRef=react.createRef();return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-11",type:"text",value,placeholder:"Text",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},ref:inputRef}),(0,jsx_runtime.jsx)(wonder_blocks_layout_dist_es.x9,{size:wonder_blocks_spacing_dist_es.Z.medium_16}),(0,jsx_runtime.jsx)(wonder_blocks_button_dist_es.Z,{style:styles.button,onClick:()=>{inputRef.current&&inputRef.current.focus()},children:"Focus Input"})]})};Ref.displayName="Ref",Ref.parameters={docs:{description:{story:"If you need to save a reference to the input\n        field, you can do so by using the `ref` prop. In this example,\n        we want the input field to receive focus when the button is\n        pressed. We can do this by creating a React ref of type\n        `HTMLInputElement` and passing it into `TextField`'s `ref` prop.\n        Now we can use the ref variable in the `handleSubmit` function to\n        shift focus to the field."},chromatic:{disableSnapshot:!0}}};const ReadOnly=()=>{const[value,setValue]=react.useState("Khan");return(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-12",type:"text",value,placeholder:"Text",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},readOnly:!0})};ReadOnly.displayName="ReadOnly",ReadOnly.parameters={docs:{description:{story:"An input field with the prop `readOnly` set\n        to true is not interactable. It looks the same as if it were not\n        read only, and it can still receive focus, but the interaction\n        point will not appear and the input will not change."},chromatic:{disableSnapshot:!0}}};const WithAutofocus=()=>{const[value,setValue]=react.useState(""),[showDemo,setShowDemo]=react.useState(!1),handleChange=newValue=>{setValue(newValue)},handleKeyDown=event=>{"Enter"===event.key&&event.currentTarget.blur()},AutoFocusDemo=()=>(0,jsx_runtime.jsxs)(es.G7,{style:{flexDirection:"row"},children:[(0,jsx_runtime.jsx)(wonder_blocks_button_dist_es.Z,{onClick:()=>{},children:"Some other focusable element"}),(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-13",value,placeholder:"Placeholder",autoFocus:!0,onChange:handleChange,onKeyDown:handleKeyDown,style:{flexGrow:1,marginLeft:wonder_blocks_spacing_dist_es.Z.small_12}})]});return(0,jsx_runtime.jsxs)(es.G7,{children:[(0,jsx_runtime.jsx)(wonder_blocks_typography_dist_es.D9,{style:{marginBottom:wonder_blocks_spacing_dist_es.Z.small_12},children:"Press the button to view the text field with autofocus."}),(0,jsx_runtime.jsx)(wonder_blocks_button_dist_es.Z,{onClick:()=>{setShowDemo(!showDemo)},style:{width:300,marginBottom:wonder_blocks_spacing_dist_es.Z.large_24},children:"Toggle autoFocus demo"}),showDemo&&(0,jsx_runtime.jsx)(AutoFocusDemo,{})]})};WithAutofocus.displayName="WithAutofocus",WithAutofocus.parameters={docs:{description:{story:"TextField takes an `autoFocus` prop, which\n            makes it autofocus on page load. Try to avoid using this if\n            possible as it is bad for accessibility.\n\nPress the button\n            to view this example. Notice that the text field automatically\n            receives focus. Upon pressing the botton, try typing and\n            notice that the text appears directly in the text field. There\n            is another focusable element present to demonstrate that\n            focus skips that element and goes straight to the text field."}}};const AutoComplete=()=>{const[value,setValue]=react.useState("");return(0,jsx_runtime.jsxs)("form",{children:[(0,jsx_runtime.jsx)(wonder_blocks_form_dist_es.nv,{id:"tf-14",type:"text",value,placeholder:"Name",onChange:newValue=>{setValue(newValue)},onKeyDown:event=>{"Enter"===event.key&&event.currentTarget.blur()},style:styles.fieldWithButton,autoComplete:"name"}),(0,jsx_runtime.jsx)(wonder_blocks_button_dist_es.Z,{type:"submit",children:"Submit"})]})};AutoComplete.displayName="AutoComplete",AutoComplete.parameters={docs:{description:{story:"If `TextField`'s `autocomplete` prop is set,\n        the browser can predict values for the input. When the user starts\n        to type in the field, a list of options will show up based on\n        values that may have been submitted at a previous time.\n        In this example, the text field provides options after you\n        input a value, press the submit button, and refresh the page."},chromatic:{disableSnapshot:!0}}};const styles=lib.StyleSheet.create({errorMessage:{color:dist_es.default.red,paddingLeft:wonder_blocks_spacing_dist_es.Z.xxxSmall_4},errorMessageLight:{color:dist_es.default.white,paddingLeft:wonder_blocks_spacing_dist_es.Z.xxxSmall_4},darkBackground:{backgroundColor:dist_es.default.darkBlue,padding:wonder_blocks_spacing_dist_es.Z.medium_16},customField:{backgroundColor:dist_es.default.darkBlue,color:dist_es.default.white,border:"none",maxWidth:250,"::placeholder":{color:dist_es.default.white64}},button:{maxWidth:150},fieldWithButton:{marginBottom:wonder_blocks_spacing_dist_es.Z.medium_16}});Default.parameters=(0,esm_extends.Z)({},Default.parameters,{docs:(0,esm_extends.Z)({},null==(_Default$parameters=Default.parameters)?void 0:_Default$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'{\n  args: {\n    id: "some-id",\n    type: "text",\n    value: "",\n    disabled: false,\n    placeholder: "",\n    required: false,\n    light: false,\n    testId: "",\n    readOnly: false,\n    autoComplete: "off",\n    validate: () => undefined,\n    onValidate: () => {},\n    onChange: () => {},\n    onKeyDown: () => {},\n    onFocus: () => {},\n    onBlur: () => {}\n  }\n}'},null==(_Default$parameters2=Default.parameters)||null==(_Default$parameters2$=_Default$parameters2.docs)?void 0:_Default$parameters2$.source)})}),Text.parameters=(0,esm_extends.Z)({},Text.parameters,{docs:(0,esm_extends.Z)({},null==(_Text$parameters=Text.parameters)?void 0:_Text$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <TextField id="tf-1" type="text" value={value} placeholder="Text" onChange={handleChange} onKeyDown={handleKeyDown} />;\n}'},null==(_Text$parameters2=Text.parameters)||null==(_Text$parameters2$doc=_Text$parameters2.docs)?void 0:_Text$parameters2$doc.source)})}),Required.parameters=(0,esm_extends.Z)({},Required.parameters,{docs:(0,esm_extends.Z)({},null==(_Required$parameters=Required.parameters)?void 0:_Required$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <TextField id="tf-2" type="text" value={value} onChange={handleChange} onKeyDown={handleKeyDown} required={true} />;\n}'},null==(_Required$parameters2=Required.parameters)||null==(_Required$parameters3=_Required$parameters2.docs)?void 0:_Required$parameters3.source)})}),text_field_stories_Number.parameters=(0,esm_extends.Z)({},text_field_stories_Number.parameters,{docs:(0,esm_extends.Z)({},null==(_Number$parameters=text_field_stories_Number.parameters)?void 0:_Number$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("12345");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <TextField id="tf-3" type="number" value={value} placeholder="Number" onChange={handleChange} onKeyDown={handleKeyDown} />;\n}'},null==(_Number$parameters2=text_field_stories_Number.parameters)||null==(_Number$parameters2$d=_Number$parameters2.docs)?void 0:_Number$parameters2$d.source)})}),Password.parameters=(0,esm_extends.Z)({},Password.parameters,{docs:(0,esm_extends.Z)({},null==(_Password$parameters=Password.parameters)?void 0:_Password$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("Password123");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    if (value.length < 8) {\n      return "Password must be at least 8 characters long";\n    }\n    if (!/\\d/.test(value)) {\n      return "Password must contain a numeric value";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View>\n            <TextField id="tf-4" type="password" value={value} placeholder="Password" validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessage}>{errorMessage}</_Text>\n                </View>}\n        </View>;\n}'},null==(_Password$parameters2=Password.parameters)||null==(_Password$parameters3=_Password$parameters2.docs)?void 0:_Password$parameters3.source)})}),Email.parameters=(0,esm_extends.Z)({},Email.parameters,{docs:(0,esm_extends.Z)({},null==(_Email$parameters=Email.parameters)?void 0:_Email$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("khan@khanacademy.org");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    const emailRegex = /^[^@\\s]+@[^@\\s.]+\\.[^@.\\s]+$/;\n    if (!emailRegex.test(value)) {\n      return "Please enter a valid email";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View>\n            <TextField id="tf-5" type="email" value={value} placeholder="Email" validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessage}>{errorMessage}</_Text>\n                </View>}\n        </View>;\n}'},null==(_Email$parameters2=Email.parameters)||null==(_Email$parameters2$do=_Email$parameters2.docs)?void 0:_Email$parameters2$do.source)})}),Telephone.parameters=(0,esm_extends.Z)({},Telephone.parameters,{docs:(0,esm_extends.Z)({},null==(_Telephone$parameters=Telephone.parameters)?void 0:_Telephone$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("123-456-7890");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    const telRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n    if (!telRegex.test(value)) {\n      return "Invalid US telephone number";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View>\n            <TextField id="tf-6" type="tel" value={value} placeholder="Telephone" validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessage}>{errorMessage}</_Text>\n                </View>}\n        </View>;\n}'},null==(_Telephone$parameters2=Telephone.parameters)||null==(_Telephone$parameters3=_Telephone$parameters2.docs)?void 0:_Telephone$parameters3.source)})}),Error.parameters=(0,esm_extends.Z)({},Error.parameters,{docs:(0,esm_extends.Z)({},null==(_Error$parameters=Error.parameters)?void 0:_Error$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("khan");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    const emailRegex = /^[^@\\s]+@[^@\\s.]+\\.[^@.\\s]+$/;\n    if (!emailRegex.test(value)) {\n      return "Please enter a valid email";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View>\n            <TextField id="tf-7" type="email" value={value} placeholder="Email" validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessage}>{errorMessage}</_Text>\n                </View>}\n        </View>;\n}'},null==(_Error$parameters2=Error.parameters)||null==(_Error$parameters2$do=_Error$parameters2.docs)?void 0:_Error$parameters2$do.source)})}),Light.parameters=(0,esm_extends.Z)({},Light.parameters,{docs:(0,esm_extends.Z)({},null==(_Light$parameters=Light.parameters)?void 0:_Light$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("khan@khanacademy.org");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    const emailRegex = /^[^@\\s]+@[^@\\s.]+\\.[^@.\\s]+$/;\n    if (!emailRegex.test(value)) {\n      return "Please enter a valid email";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View style={styles.darkBackground}>\n            <TextField id="tf-9" type="email" value={value} placeholder="Email" light={true} validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessageLight}>\n                        {errorMessage}\n                    </_Text>\n                </View>}\n        </View>;\n}'},null==(_Light$parameters2=Light.parameters)||null==(_Light$parameters2$do=_Light$parameters2.docs)?void 0:_Light$parameters2$do.source)})}),ErrorLight.parameters=(0,esm_extends.Z)({},ErrorLight.parameters,{docs:(0,esm_extends.Z)({},null==(_ErrorLight$parameter=ErrorLight.parameters)?void 0:_ErrorLight$parameter.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("khan");\n  const [errorMessage, setErrorMessage] = React.useState<any>();\n  const [focused, setFocused] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const validate = (value: string) => {\n    const emailRegex = /^[^@\\s]+@[^@\\s.]+\\.[^@.\\s]+$/;\n    if (!emailRegex.test(value)) {\n      return "Please enter a valid email";\n    }\n  };\n  const handleValidate = (errorMessage?: string | null) => {\n    setErrorMessage(errorMessage);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    setFocused(false);\n  };\n  return <View style={styles.darkBackground}>\n            <TextField id="tf-7" type="email" value={value} placeholder="Email" light={true} validate={validate} onValidate={handleValidate} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} />\n            {!focused && errorMessage && <View>\n                    <Strut size={Spacing.xSmall_8} />\n                    <_Text style={styles.errorMessage}>{errorMessage}</_Text>\n                </View>}\n        </View>;\n}'},null==(_ErrorLight$parameter2=ErrorLight.parameters)||null==(_ErrorLight$parameter3=_ErrorLight$parameter2.docs)?void 0:_ErrorLight$parameter3.source)})}),Disabled.parameters=(0,esm_extends.Z)({},Disabled.parameters,{docs:(0,esm_extends.Z)({},null==(_Disabled$parameters=Disabled.parameters)?void 0:_Disabled$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => <TextField id="tf-8" value="" placeholder="This field is disabled." onChange={() => {}} disabled={true} />'},null==(_Disabled$parameters2=Disabled.parameters)||null==(_Disabled$parameters3=_Disabled$parameters2.docs)?void 0:_Disabled$parameters3.source)})}),CustomStyle.parameters=(0,esm_extends.Z)({},CustomStyle.parameters,{docs:(0,esm_extends.Z)({},null==(_CustomStyle$paramete=CustomStyle.parameters)?void 0:_CustomStyle$paramete.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <TextField id="tf-10" style={styles.customField} type="text" value={value} placeholder="Text" onChange={handleChange} onKeyDown={handleKeyDown} />;\n}'},null==(_CustomStyle$paramete2=CustomStyle.parameters)||null==(_CustomStyle$paramete3=_CustomStyle$paramete2.docs)?void 0:_CustomStyle$paramete3.source)})}),Ref.parameters=(0,esm_extends.Z)({},Ref.parameters,{docs:(0,esm_extends.Z)({},null==(_Ref$parameters=Ref.parameters)?void 0:_Ref$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleSubmit = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  return <View>\n            <TextField id="tf-11" type="text" value={value} placeholder="Text" onChange={handleChange} onKeyDown={handleKeyDown} ref={inputRef} />\n            <Strut size={Spacing.medium_16} />\n            <Button style={styles.button} onClick={handleSubmit}>\n                Focus Input\n            </Button>\n        </View>;\n}'},null==(_Ref$parameters2=Ref.parameters)||null==(_Ref$parameters2$docs=_Ref$parameters2.docs)?void 0:_Ref$parameters2$docs.source)})}),ReadOnly.parameters=(0,esm_extends.Z)({},ReadOnly.parameters,{docs:(0,esm_extends.Z)({},null==(_ReadOnly$parameters=ReadOnly.parameters)?void 0:_ReadOnly$parameters.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("Khan");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <TextField id="tf-12" type="text" value={value} placeholder="Text" onChange={handleChange} onKeyDown={handleKeyDown} readOnly={true} />;\n}'},null==(_ReadOnly$parameters2=ReadOnly.parameters)||null==(_ReadOnly$parameters3=_ReadOnly$parameters2.docs)?void 0:_ReadOnly$parameters3.source)})}),WithAutofocus.parameters=(0,esm_extends.Z)({},WithAutofocus.parameters,{docs:(0,esm_extends.Z)({},null==(_WithAutofocus$parame=WithAutofocus.parameters)?void 0:_WithAutofocus$parame.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const [showDemo, setShowDemo] = React.useState(false);\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  const handleShowDemo = () => {\n    setShowDemo(!showDemo);\n  };\n  const AutoFocusDemo = () => <View style={{\n    flexDirection: "row"\n  }}>\n            <Button onClick={() => {}}>Some other focusable element</Button>\n            <TextField id="tf-13" value={value} placeholder="Placeholder" autoFocus={true} onChange={handleChange} onKeyDown={handleKeyDown} style={{\n      flexGrow: 1,\n      marginLeft: Spacing.small_12\n    }} />\n        </View>;\n  return <View>\n            <LabelLarge style={{\n      marginBottom: Spacing.small_12\n    }}>\n                Press the button to view the text field with autofocus.\n            </LabelLarge>\n            <Button onClick={handleShowDemo} style={{\n      width: 300,\n      marginBottom: Spacing.large_24\n    }}>\n                Toggle autoFocus demo\n            </Button>\n            {showDemo && <AutoFocusDemo />}\n        </View>;\n}'},null==(_WithAutofocus$parame2=WithAutofocus.parameters)||null==(_WithAutofocus$parame3=_WithAutofocus$parame2.docs)?void 0:_WithAutofocus$parame3.source)})}),AutoComplete.parameters=(0,esm_extends.Z)({},AutoComplete.parameters,{docs:(0,esm_extends.Z)({},null==(_AutoComplete$paramet=AutoComplete.parameters)?void 0:_AutoComplete$paramet.docs,{source:(0,esm_extends.Z)({originalSource:'() => {\n  const [value, setValue] = React.useState("");\n  const handleChange = (newValue: string) => {\n    setValue(newValue);\n  };\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === "Enter") {\n      event.currentTarget.blur();\n    }\n  };\n  return <form>\n            <TextField id="tf-14" type="text" value={value} placeholder="Name" onChange={handleChange} onKeyDown={handleKeyDown} style={styles.fieldWithButton} autoComplete="name" />\n            <Button type="submit">Submit</Button>\n        </form>;\n}'},null==(_AutoComplete$paramet2=AutoComplete.parameters)||null==(_AutoComplete$paramet3=_AutoComplete$paramet2.docs)?void 0:_AutoComplete$paramet3.source)})});const __namedExportsOrder=["Default","Text","Required","Number","Password","Email","Telephone","Error","Light","ErrorLight","Disabled","CustomStyle","Ref","ReadOnly","WithAutofocus","AutoComplete"]},"./packages/wonder-blocks-layout/dist/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AM:()=>Spring,E6:()=>MEDIA_MODAL_SPEC,Ny:()=>MediaLayoutContext,bu:()=>MediaLayout,x9:()=>Strut});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/wonder-blocks-spacing/dist/es/index.js"),aphrodite__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/aphrodite/lib/index.js"),_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/wonder-blocks-core/dist/es/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const mediaDefaultSpecLargeMarginWidth=_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.large_24,MEDIA_DEFAULT_SPEC={small:{query:"(max-width: 767px)",totalColumns:4,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.medium_16,marginWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.medium_16},medium:{query:"(min-width: 768px) and (max-width: 1023px)",totalColumns:8,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.xLarge_32,marginWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.large_24},large:{query:"(min-width: 1024px)",totalColumns:12,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.xLarge_32,marginWidth:mediaDefaultSpecLargeMarginWidth,maxWidth:1120+2*mediaDefaultSpecLargeMarginWidth}},MEDIA_INTERNAL_SPEC={large:{query:"(min-width: 1px)",totalColumns:12,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.xLarge_32,marginWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.medium_16}},MEDIA_MODAL_SPEC={small:{query:"(max-width: 767px)",totalColumns:4,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.medium_16,marginWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.medium_16},large:{query:"(min-width: 768px)",totalColumns:12,gutterWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.xLarge_32,marginWidth:_khanacademy_wonder_blocks_spacing__WEBPACK_IMPORTED_MODULE_1__.Z.xxLarge_48}},defaultContext={ssrSize:"large",mediaSpec:MEDIA_DEFAULT_SPEC},MediaLayoutContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultContext);MediaLayoutContext.displayName="MediaLayoutContext";const queries=[...Object.values(MEDIA_DEFAULT_SPEC).map((spec=>spec.query)),...Object.values(MEDIA_INTERNAL_SPEC).map((spec=>spec.query)),...Object.values(MEDIA_MODAL_SPEC).map((spec=>spec.query))],mediaQueryLists={};class MediaLayoutInternal extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.cleanupThunks=void 0,this.state={size:void 0},this.cleanupThunks=[]}componentDidMount(){const entries=Object.entries(this.props.mediaSpec);for(const[size,spec]of entries){const mql=mediaQueryLists[spec.query];if(!mql)continue;const listener=e=>{e.matches&&this.setState({size})};mql.addListener(listener),this.cleanupThunks.push((()=>mql.removeListener(listener)))}}componentWillUnmount(){this.cleanupThunks.forEach((cleaup=>cleaup()))}getCurrentSize(spec){if(this.state.size)return this.state.size;{const entries=Object.entries(this.props.mediaSpec);for(const[size,_spec]of entries){if(mediaQueryLists[_spec.query].matches)return size}}return"large"}isServerSide(){return"undefined"==typeof window||!window.matchMedia}getMockStyleSheet(mediaSize){const{styleSheets}=this.props,mockStyleSheet={};if(!styleSheets)return mockStyleSheet;for(const styleSize of Object.keys(styleSheets)){const styleSheet=styleSheets[styleSize];if(styleSheet)for(const name of Object.keys(styleSheet))Object.prototype.hasOwnProperty.call(mockStyleSheet,name)||(mockStyleSheet[name]=[styleSheets.all&&styleSheets.all[name],"small"===mediaSize&&[styleSheets.mdOrSmaller&&styleSheets.mdOrSmaller[name],styleSheets.small&&styleSheets.small[name]],"medium"===mediaSize&&[styleSheets.mdOrSmaller&&styleSheets.mdOrSmaller[name],styleSheets.mdOrLarger&&styleSheets.mdOrLarger[name],styleSheets.medium&&styleSheets.medium[name]],"large"===mediaSize&&[styleSheets.mdOrLarger&&styleSheets.mdOrLarger[name],styleSheets.large&&styleSheets.large[name]]])}return mockStyleSheet}render(){const{children,mediaSpec,ssrSize,overrideSize}=this.props;if(!this.isServerSide())for(const query of queries.filter((query=>!mediaQueryLists[query])))mediaQueryLists[query]=window.matchMedia(query);const mediaSize=overrideSize||this.isServerSide()&&ssrSize||this.getCurrentSize(mediaSpec);return children({mediaSize,mediaSpec,styles:this.getMockStyleSheet(mediaSize)})}}MediaLayoutInternal.displayName="MediaLayoutInternal";class MediaLayout extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayoutContext.Consumer,null,(({overrideSize,ssrSize,mediaSpec})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayoutInternal,_extends({},this.props,{overrideSize,ssrSize,mediaSpec}))))}}MediaLayout.displayName="MediaLayout";class Spring extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const{style}=this.props;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_3__.G7,{"aria-hidden":"true",style:[styles.grow,style]})}}Spring.displayName="Spring";const styles=aphrodite__WEBPACK_IMPORTED_MODULE_2__.StyleSheet.create({grow:{flexGrow:1}});class Strut extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const{size,style}=this.props;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_khanacademy_wonder_blocks_core__WEBPACK_IMPORTED_MODULE_3__.G7,{"aria-hidden":"true",style:[strutStyle(size),style]})}}Strut.displayName="Strut";const strutStyle=size=>({width:size,MsFlexBasis:size,MsFlexPreferredSize:size,WebkitFlexBasis:size,flexBasis:size,flexShrink:0});MediaLayout.__docgenInfo={description:"",methods:[],displayName:"MediaLayout"},Spring.__docgenInfo={description:"",methods:[],displayName:"Spring"},Strut.__docgenInfo={description:"",methods:[],displayName:"Strut"}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./packages/wonder-blocks-form/package.json":module=>{module.exports=JSON.parse('{"u2":"@khanacademy/wonder-blocks-form","i8":"4.2.3"}')}}]);