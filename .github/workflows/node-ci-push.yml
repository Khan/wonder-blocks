name: Node CI (landed on master)

on:
  push:
    branches:
    - master

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 14).
#      This way the next two jobs can run in parallel but rely on this primed
#      cache.
#   2. Coverage
#   3. Chromatic autoApprove on squash commits
#
# For pushes directly to a branch, we assume a PR has been used with wider
# checks, this just makes sure our coverage data is up-to-date.
jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      # Use a matrix as it means we get the version info in the job name
      # which is very helpful.
      matrix:
        os: [ubuntu-latest]
        node-version: [14]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-yarn-
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile


  coverage:
    needs: [prime_cache_primary]
    name: Gather coverage
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use a matrix as it means we get the version info in the job name
        # which is very helpful.
        os: [ubuntu-latest]
        node-version: [14]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run Jest with coverage
      run: yarn coverage:ci
    - name: Upload Coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json

  chromatic:
    needs: [prime_cache_primary]
    name: Update Chromatic
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use a matrix as it means we get the version info in the job name
        # which is very helpful.
        os: [ubuntu-latest]
        node-version: [14]
    steps:
    - uses: actions/checkout@v2
      with:
          # This makes Actions fetch all Git history so that Chromatic can
          # track baselines with the correct commits
          # see: https://www.chromatic.com/docs/branching-and-baselines
          fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build all packages
      run: yarn build:all
    - name: Publish to Chromatic
      uses: chromaui/action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        projectToken: ${{ secrets.CHROMATIC_APP_CODE }}
        autoAcceptChanges: true
