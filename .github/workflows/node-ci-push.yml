name: Node CI (landed on master)

on:
  push:
    branches:
    - master
    - changeset-release/*
    - feature/*

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 14).
#      This way the next two jobs can run in parallel but rely on this primed
#      cache.
#   2. Coverage
#   3. Chromatic autoApprove on squash commits
#   4. Publish to branch (to ensure that the required checks will run on
#      protected branches)
#
# For pushes directly to a branch, we assume a PR has been used with wider
# checks, this just makes sure our coverage data is up-to-date.
jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      # Use a matrix as it means we get the version info in the job name
      # which is very helpful.
      matrix:
        os: [ubuntu-latest]
        node-version: [12]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-yarn-cache-
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile


  coverage:
    needs: [prime_cache_primary]
    name: Gather coverage
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use a matrix as it means we get the version info in the job name
        # which is very helpful.
        os: [ubuntu-latest]
        node-version: [12]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run Jest with coverage
      run: yarn coverage:ci
    - name: Upload Coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json

  chromatic:
    needs: [prime_cache_primary]
    name: Update Chromatic
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use a matrix as it means we get the version info in the job name
        # which is very helpful.
        os: [ubuntu-latest]
        node-version: [12]
    steps:
    - uses: actions/checkout@v2
      with:
          # This makes Actions fetch all Git history so that Chromatic can
          # track baselines with the correct commits
          # see: https://www.chromatic.com/docs/branching-and-baselines
          fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-modules-
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build all packages
      run: yarn build:all
    - name: Publish to Chromatic
      uses: chromaui/action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        projectToken: ${{ secrets.CHROMATIC_APP_CODE }}
        autoAcceptChanges: true

  # NOTE: This step is copied from render-gateway. See
  # https://github.com/Khan/render-gateway/blob/master/.github/workflows/node-ci.yml
  publish_to_branch:
    needs: [prime_cache_primary]
    name: Publish to branch
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [12.x]
    steps:
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Clone repository
      run: git clone git@github.com:Khan/wonder-blocks.git .

      # For PRs, we can use github.head_ref to get the branch that the PR
      # is made from. We cannot use github.ref as that points to the PR, not
      # its branch. For pushes, we have to get the branch name from GITHUB_REF
      # which, instead of just being a branch name, is of the form
      # refs/heads/<BRANCH NAME>
      # Note if we end up with a blank branch name, we quit as otherwise, we
      # would update the default branch, which is not what we want at all.
    - name: Determine checkout branch
      run: |
        _PUBLISH_BRANCH=$(test $GITHUB_HEAD_REF && echo $GITHUB_HEAD_REF || echo $GITHUB_REF | sed -e "s/refs\/heads\///g")
        test $_PUBLISH_BRANCH || exit 1
        echo "PUBLISH_BRANCH=$_PUBLISH_BRANCH" >> $GITHUB_ENV
    - name: Checkout via SSH
      run: git checkout ${{ env.PUBLISH_BRANCH }}
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Detect changes
      run: echo "HAS_CHANGES=$(git status --porcelain | wc -l | xargs echo)" >> $GITHUB_ENV
    - name: Commit changes
      if: env.HAS_CHANGES != '0'
      # If we have changes, we push them and then fail out. This prevents
      # us from running more testing than we want since the push will
      # trigger another test run anyway.
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config user.name "$GITHUB_ACTOR"
        git add dist
        git commit -m "Updating branch with build artifacts (https://github.com/Khan/wonder-blocks/actions/runs/${{ github.run_id }})"
        git push
        exit 1
