name: Node CI (landed on protected branch)

on:
  push:
    branches:
    - main
    - changeset-release/*
    - feature/*

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 14).
#      This way the next two jobs can run in parallel but rely on this primed
#      cache.
#   2. Coverage
#   3. Chromatic autoApprove on squash commits
#
# For pushes directly to a branch, we assume a PR has been used with wider
# checks, this just makes sure our coverage data is up-to-date.
jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      # Use a matrix as it means we get the version info in the job name
      # which is very helpful.
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Install & cache node_modules
        uses: Khan/actions@shared-node-cache-v2
        with:
          node-version: ${{ matrix.node-version }}


  coverage:
    needs: [prime_cache_primary]
    name: Gather coverage
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use a matrix as it means we get the version info in the job name
        # which is very helpful.
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    # Cache and install dependencies
    - name: Install & cache node_modules
      uses: Khan/actions@shared-node-cache-v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Run Jest with coverage
      run: yarn coverage:ci
    - name: Upload Coverage
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json

  lint:
    name: Lint
    needs: prime_cache_primary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install & cache node_modules
        uses: Khan/actions@shared-node-cache-v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get All Changed Files
        uses: Khan/actions@get-changed-files-v2
        id: changed

      - id: js-ts-files
        name: Find .js, .ts changed files
        uses: Khan/actions@filter-files-v1
        with:
          changed-files: ${{ steps.changed.outputs.files }}
          extensions: '.js,.jsx,.ts,.tsx'

      - id: eslint-reset
        uses: Khan/actions@filter-files-v1
        name: Files that would trigger a full eslint run
        with:
          changed-files: ${{ steps.changed.outputs.files }}
          files: '.eslintrc.js,yarn.lock,.eslintignore'

      - id: typecheck-reset
        uses: Khan/actions@filter-files-v1
        name: Files that would trigger a typecheck run
        with:
          changed-files: ${{ steps.changed.outputs.files }}
          files: '.yarn.lock'

      # Linting / type checking
      - name: Eslint
        uses: Khan/actions@full-or-limited-v0
        with:
          full-trigger: ${{ steps.eslint-reset.outputs.filtered }}
          full: yarn lint:ci .
          limited-trigger: ${{ steps.js-ts-files.outputs.filtered }}
          limited: yarn lint:ci {}

      - name: Typecheck
        if: always() # always run this check until we update the eslint config
        # if: steps.js-ts-files.outputs.filtered != '[]' || steps.typecheck-reset.outputs.filtered != '[]'
        run: yarn typecheck

      - name: Build .js bundles
        run: yarn build

      - name: Build .d.ts types
        run: yarn build:types

      - name: Check package.json files
        run: node utils/publish/pre-publish-check-ci.js

  test:
    name: Test
    needs: prime_cache_primary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
        shard: ["1/2", "2/2"]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install & cache node_modules
        uses: Khan/actions@shared-node-cache-v2
        with:
          node-version: ${{ matrix.node-version }}
      # Testing and coverage
      - name: Run jest tests with coverage
        run: yarn coverage:ci --shard ${{ matrix.shard }}
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
